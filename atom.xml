<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梁大红的技术Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liangdahong.com/"/>
  <updated>2019-10-17T03:21:49.000Z</updated>
  <id>https://liangdahong.com/</id>
  
  <author>
    <name>梁大红</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pthread、NSThread、GCD、NSOperation、NSOperationQueue</title>
    <link href="https://liangdahong.com/2019/10/12/pthread%E3%80%81NSThread%E3%80%81GCD%E3%80%81NSOperation%E3%80%81NSOperationQueue/"/>
    <id>https://liangdahong.com/2019/10/12/pthread、NSThread、GCD、NSOperation、NSOperationQueue/</id>
    <published>2019-10-12T15:36:17.000Z</published>
    <updated>2019-10-17T03:21:49.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>各种 队列&amp;同步&amp;同步 组合 <a href="https://naotu.baidu.com/file/fcc0f114a0116d1e4679d9327b3b5714" target="_blank" rel="noopener">https://naotu.baidu.com/file/fcc0f114a0116d1e4679d9327b3b5714</a></p></li><li><p>GCD <a href="https://www.jianshu.com/p/2d57c72016c6" target="_blank" rel="noopener">https://www.jianshu.com/p/2d57c72016c6</a></p></li><li><p>NSOperation NSOperationQueue  <a href="https://www.jianshu.com/p/4b1d77054b35" target="_blank" rel="noopener">https://www.jianshu.com/p/4b1d77054b35</a></p></li><li><p>pthread、NSThread <a href="https://www.jianshu.com/p/cbaeea5368b1" target="_blank" rel="noopener">https://www.jianshu.com/p/cbaeea5368b1</a></p></li></ul><a id="more"></a><h1 id="pthread、NSThread"><a href="#pthread、NSThread" class="headerlink" title="pthread、NSThread"></a>pthread、NSThread</h1><ul><li><a href="https://www.jianshu.com/p/cbaeea5368b1" target="_blank" rel="noopener">https://www.jianshu.com/p/cbaeea5368b1</a></li></ul><h1 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 并发队列</span><br><span class="line">dispatch_queue_t queue_t = dispatch_queue_create(&quot;ccc&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">// 串行队列</span><br><span class="line">dispatch_queue_t queue_t1 = dispatch_queue_create(&quot;ccc&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">// 串行队列 (主队列)</span><br><span class="line">dispatch_get_main_queue();</span><br><span class="line">// 全局并发队列</span><br><span class="line">dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line"></span><br><span class="line">// 同步</span><br><span class="line">dispatch_sync</span><br><span class="line">// 异步</span><br><span class="line">dispatch_async</span><br></pre></td></tr></table></figure><h2 id="线程通讯"><a href="#线程通讯" class="headerlink" title="线程通讯"></a>线程通讯</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// gcd 线程通讯一般只有 子线程通讯到主线程，</span><br><span class="line">// 因为我们在处理gcd的时候没有操作具体的线程，</span><br><span class="line">// 全部是由系统来处理的</span><br><span class="line">dispatch_async(mainQueue, ^&#123;</span><br></pre></td></tr></table></figure><h2 id="延时操作"><a href="#延时操作" class="headerlink" title="延时操作"></a>延时操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 延时操作 这里只是延时把任务加到队列中,具体什么时候执行是未知的。</span><br><span class="line">// dispatch_after</span><br></pre></td></tr></table></figure><h2 id="只执行一次"><a href="#只执行一次" class="headerlink" title="只执行一次"></a>只执行一次</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 只执行一次</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br></pre></td></tr></table></figure><h2 id="快速迭代方法"><a href="#快速迭代方法" class="headerlink" title="快速迭代方法"></a>快速迭代方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 快速迭代方法,普通遍历数组的时候是一个一个取，</span><br><span class="line">// 如果用快速迭代的话就可以在多个线程中同时（异步）遍历。</span><br><span class="line">dispatch_apply(6, queue, ^(size_t index) &#123;</span><br></pre></td></tr></table></figure><h2 id="栅栏"><a href="#栅栏" class="headerlink" title="栅栏"></a>栅栏</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 栅栏 可以把任务栅起来特殊处理，指定哪些任务完成后在执行哪些任务</span><br><span class="line">// 1 2 完成了再继续这些 3 4 5任务</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br></pre></td></tr></table></figure><h2 id="队列组"><a href="#队列组" class="headerlink" title="队列组"></a>队列组</h2><p>###通知方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 1 2 完成才通知 3</span><br><span class="line">dispatch_group_async(grou</span><br><span class="line">dispatch_group_async(grou</span><br><span class="line">dispatch_group_notify(grou</span><br></pre></td></tr></table></figure><h3 id="堵塞"><a href="#堵塞" class="headerlink" title="堵塞"></a>堵塞</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 暂停方式 </span><br><span class="line">// 到3就暂停堵塞当前线程，当 1 2 完成后才解除暂停</span><br><span class="line">dispatch_group_async(grou</span><br><span class="line">dispatch_group_async(grou</span><br><span class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 标记的方式</span><br><span class="line"></span><br><span class="line">// 使用标记的方式</span><br><span class="line">// 标记开始一个，标记结束一个</span><br><span class="line">dispatch_group_enter(group);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">dispatch_group_leave(group);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_enter(group);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">dispatch_group_leave(group);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 信号量 Dispatch Semaphore 线程同步，将异步执行任务转换为同步执行任务。</span><br><span class="line"></span><br><span class="line">Dispatch Semaphore 提供了三个方法：</span><br><span class="line">dispatch_semaphore_create：创建一个 Semaphore 并初始化信号的总量</span><br><span class="line">dispatch_semaphore_signal：发送一个信号，让信号总量加 1</span><br><span class="line">dispatch_semaphore_wait：可以使总信号量减 1，信号总量小于 0 时就会一直等待（阻塞所在线程），否则就可以正常执行。</span><br><span class="line"></span><br><span class="line">// 全局并发队列</span><br><span class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">// maphore 初始创建时计数为 0。</span><br><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">// 发送一个信号，让信号总量加 1</span><br><span class="line">dispatch_semaphore_signal(semaphore);</span><br><span class="line">&#125;);</span><br><span class="line">// 到这里让信号量减 1 、是-1 小于0 就开始等待，当信号量是0 或者大于1 时就继续执行</span><br><span class="line">dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;任务完成了&quot;);</span><br></pre></td></tr></table></figure><h1 id="NSOperation、NSOperationQueue"><a href="#NSOperation、NSOperationQueue" class="headerlink" title="NSOperation、NSOperationQueue"></a>NSOperation、NSOperationQueue</h1><blockquote><p>NSOperation、NSOperationQueue 是苹果提供给我们的一套多线程解决方案。实际上 NSOperation、NSOperationQueue 是基于 GCD 更高一层的封装，完全面向对象。但是比 GCD 更简单易用、代码可读性也更高。</p></blockquote><h2 id="为什么要使用-NSOperation、NSOperationQueue？"><a href="#为什么要使用-NSOperation、NSOperationQueue？" class="headerlink" title="为什么要使用 NSOperation、NSOperationQueue？"></a>为什么要使用 NSOperation、NSOperationQueue？</h2><ul><li><p>可添加完成的代码块，在操作完成后执行。</p></li><li><p>设定操作执行的优先级。</p></li><li><p>可以很方便的取消一个操作的执行。</p></li><li><p>使用 KVO 观察对操作执行状态的更改：isExecuteing、isFinished、isCancelled。</p></li></ul><h2 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h2><h3 id="NSOperation-的创建"><a href="#NSOperation-的创建" class="headerlink" title="NSOperation 的创建"></a>NSOperation 的创建</h3><h4 id="NSInvocationOperation"><a href="#NSInvocationOperation" class="headerlink" title="NSInvocationOperation"></a>NSInvocationOperation</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在当前线程上执行</span></span><br><span class="line"><span class="comment">// 1.创建 NSInvocationOperation 对象</span></span><br><span class="line"><span class="built_in">NSInvocationOperation</span> *op = [[<span class="built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(task1) object:<span class="literal">nil</span>];</span><br><span class="line"><span class="comment">// 2.调用 start 方法开始执行操作</span></span><br><span class="line">[op start];</span><br></pre></td></tr></table></figure><h4 id="NSBlockOperation"><a href="#NSBlockOperation" class="headerlink" title="NSBlockOperation"></a>NSBlockOperation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 各种 Block 可以在多个线程上执行</span><br><span class="line">// 1.创建 NSBlockOperation 对象</span><br><span class="line">NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock:</span><br><span class="line">// 2.添加额外的操作</span><br><span class="line">[op addExecutionBlock:</span><br><span class="line">[op addExecutionBlock:</span><br><span class="line">[op addExecutionBlock:</span><br><span class="line">[op addExecutionBlock:</span><br><span class="line">// 3.调用 start 方法开始执行操作</span><br><span class="line">[op start];</span><br></pre></td></tr></table></figure><h4 id="NSOperation-自定义"><a href="#NSOperation-自定义" class="headerlink" title="NSOperation 自定义"></a>NSOperation 自定义</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自定义 <span class="built_in">NSOperation</span> 的方式暂时不考虑</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YSCOperation</span> : <span class="title">NSOperation</span></span></span><br></pre></td></tr></table></figure><h3 id="NSOperationQueue-操作队列"><a href="#NSOperationQueue-操作队列" class="headerlink" title="NSOperationQueue 操作队列"></a>NSOperationQueue 操作队列</h3><h4 id="创建-Queue"><a href="#创建-Queue" class="headerlink" title="创建 Queue"></a>创建 Queue</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取主队列</span></span><br><span class="line">[<span class="built_in">NSOperationQueue</span> mainQueue];</span><br><span class="line"><span class="comment">// 获取当前队列</span></span><br><span class="line">[<span class="built_in">NSOperationQueue</span> currentQueue];</span><br><span class="line"><span class="comment">// 创建自定义队列 （可以通过其他属性来确定是串行或者并发 maxConcurrentOperationCount）</span></span><br><span class="line">[[<span class="built_in">NSOperationQueue</span> alloc] init];</span><br></pre></td></tr></table></figure><h4 id="向-NSOperationQueue-中添加操作"><a href="#向-NSOperationQueue-中添加操作" class="headerlink" title="向 NSOperationQueue 中添加操作"></a>向 NSOperationQueue 中添加操作</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Queue 直接添加操作  不需要调用 NSOperation 的 start 方法 </span></span><br><span class="line"><span class="comment">// 1.创建队列</span></span><br><span class="line"><span class="built_in">NSOperationQueue</span> *queue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建操作</span></span><br><span class="line"><span class="comment">// 使用 NSInvocationOperation 创建操作1</span></span><br><span class="line"><span class="built_in">NSInvocationOperation</span> *op1 = [[<span class="built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="keyword">self</span> </span><br><span class="line"><span class="built_in">NSInvocationOperation</span> *op2 = [[<span class="built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="keyword">self</span> </span><br><span class="line">                              </span><br><span class="line"><span class="built_in">NSBlockOperation</span> *op3 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">[op3 addExecutionBlock:</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3.使用 addOperation: 添加所有操作到队列中</span></span><br><span class="line">[queue addOperation:op1];</span><br><span class="line">[queue addOperation:op2];</span><br><span class="line">[queue addOperation:op3];</span><br></pre></td></tr></table></figure><h4 id="向-Queue-中直接加-Block-的方式"><a href="#向-Queue-中直接加-Block-的方式" class="headerlink" title="向 Queue 中直接加 Block 的方式"></a>向 Queue 中直接加 Block 的方式</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建队列</span></span><br><span class="line"><span class="built_in">NSOperationQueue</span> *queue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</span><br><span class="line"><span class="comment">// 2.使用 addOperationWithBlock: 添加操作到队列中</span></span><br><span class="line">[queue addOperationWithBlock:</span><br><span class="line">[queue addOperationWithBlock:</span><br><span class="line">[queue addOperationWithBlock:</span><br></pre></td></tr></table></figure><h4 id="控制并发和串行-maxConcurrentOperationCount"><a href="#控制并发和串行-maxConcurrentOperationCount" class="headerlink" title="控制并发和串行 maxConcurrentOperationCount"></a>控制并发和串行 maxConcurrentOperationCount</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认 -1 不控制</span></span><br><span class="line"><span class="comment">// 1  串行</span></span><br><span class="line"><span class="comment">// n  并发，但不会超过系统限制</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSInteger</span> maxConcurrentOperationCount;</span><br></pre></td></tr></table></figure><h2 id="NSOperation-的依耐和优先级"><a href="#NSOperation-的依耐和优先级" class="headerlink" title="NSOperation 的依耐和优先级"></a>NSOperation 的依耐和优先级</h2><h3 id="依耐"><a href="#依耐" class="headerlink" title="依耐"></a>依耐</h3><blockquote><p>NSOperation 的一个特点就是可以添加各种操作依赖，同时还可以设置一下参数，取消，暂停，恢复等。</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依赖确定了谁在前执行和谁在后执行。(a的执行需要b执行完毕，a依耐b)</span></span><br><span class="line">- (<span class="keyword">void</span>)addDependency:(<span class="built_in">NSOperation</span> *)op;</span><br><span class="line">- (<span class="keyword">void</span>)removeDependency:(<span class="built_in">NSOperation</span> *)op;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSOperation</span> *&gt; *dependencies;</span><br></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都处于就绪的状态的任务（操作），谁先开始执行，谁先取到。</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSOperationQueuePriority</span> queuePriority;</span><br></pre></td></tr></table></figure><h2 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建队列</span></span><br><span class="line"><span class="built_in">NSOperationQueue</span> *queue = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.添加操作</span></span><br><span class="line">[queue addOperationWithBlock:^&#123;</span><br><span class="line">    <span class="comment">// 异步进行耗时操作</span></span><br><span class="line">    <span class="comment">// 回到主线程</span></span><br><span class="line">    [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line">    &#125;];</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure><h2 id="常用属性和方法归纳"><a href="#常用属性和方法归纳" class="headerlink" title="常用属性和方法归纳"></a>常用属性和方法归纳</h2><h3 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消操作方法</span></span><br><span class="line">- (<span class="keyword">void</span>)cancel; 可取消操作，实质是标记 isCancelled 状态。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断操作状态方法</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isFinished; 判断操作是否已经结束。</span><br><span class="line">- (<span class="built_in">BOOL</span>)isCancelled; 判断操作是否已经标记为取消。</span><br><span class="line">- (<span class="built_in">BOOL</span>)isExecuting; 判断操作是否正在在运行。</span><br><span class="line">- (<span class="built_in">BOOL</span>)isReady; 判断操作是否处于准备就绪状态，这个值和操作的依赖关系相关。</span><br><span class="line">操作同步</span><br><span class="line">- (<span class="keyword">void</span>)waitUntilFinished; 阻塞当前线程，直到该操作结束。可用于线程执行顺序的同步。</span><br><span class="line">- (<span class="keyword">void</span>)setCompletionBlock:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))block; completionBlock 会在当前操作执行完毕时执行 completionBlock。</span><br><span class="line">- (<span class="keyword">void</span>)addDependency:(<span class="built_in">NSOperation</span> *)op; 添加依赖，使当前操作依赖于操作 op 的完成。</span><br><span class="line">- (<span class="keyword">void</span>)removeDependency:(<span class="built_in">NSOperation</span> *)op; 移除依赖，取消当前操作对操作 op 的依赖。</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSOperation</span> *&gt; *dependencies; 在当前操作开始执行之前完成执行的所有操作对象数组。</span><br></pre></td></tr></table></figure><h3 id="NSOperationQueue"><a href="#NSOperationQueue" class="headerlink" title="NSOperationQueue"></a>NSOperationQueue</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">取消/暂停/恢复操作</span><br><span class="line">- (<span class="keyword">void</span>)cancelAllOperations; 可以取消队列的所有操作。</span><br><span class="line">- (<span class="built_in">BOOL</span>)isSuspended; 判断队列是否处于暂停状态。 <span class="literal">YES</span> 为暂停状态，<span class="literal">NO</span> 为恢复状态。</span><br><span class="line">- (<span class="keyword">void</span>)setSuspended:(<span class="built_in">BOOL</span>)b; 可设置操作的暂停和恢复，<span class="literal">YES</span> 代表暂停队列，<span class="literal">NO</span> 代表恢复队列。</span><br><span class="line">操作同步</span><br><span class="line">- (<span class="keyword">void</span>)waitUntilAllOperationsAreFinished; 阻塞当前线程，直到队列中的操作全部执行完毕。</span><br><span class="line">添加/获取操作`</span><br><span class="line">- (<span class="keyword">void</span>)addOperationWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))block; 向队列中添加一个 <span class="built_in">NSBlockOperation</span> 类型操作对象。</span><br><span class="line">- (<span class="keyword">void</span>)addOperations:(<span class="built_in">NSArray</span> *)ops waitUntilFinished:(<span class="built_in">BOOL</span>)wait; 向队列中添加操作数组，wait 标志是否阻塞当前线程直到所有操作结束</span><br><span class="line">- (<span class="built_in">NSArray</span> *)operations; 当前在队列中的操作数组（某个操作执行结束后会自动从这个数组清除）。</span><br><span class="line">- (<span class="built_in">NSUInteger</span>)operationCount; 当前队列中的操作数。</span><br><span class="line">获取队列</span><br><span class="line">+ (<span class="keyword">id</span>)currentQueue; 获取当前队列，如果当前线程不是在 <span class="built_in">NSOperationQueue</span> 上运行则返回 <span class="literal">nil</span>。</span><br><span class="line">+ (<span class="keyword">id</span>)mainQueue; 获取主队列。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;各种 队列&amp;amp;同步&amp;amp;同步 组合 &lt;a href=&quot;https://naotu.baidu.com/file/fcc0f114a0116d1e4679d9327b3b5714&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://naotu.baidu.com/file/fcc0f114a0116d1e4679d9327b3b5714&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GCD &lt;a href=&quot;https://www.jianshu.com/p/2d57c72016c6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/2d57c72016c6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NSOperation NSOperationQueue  &lt;a href=&quot;https://www.jianshu.com/p/4b1d77054b35&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/4b1d77054b35&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pthread、NSThread &lt;a href=&quot;https://www.jianshu.com/p/cbaeea5368b1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/cbaeea5368b1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jenkins 相关</title>
    <link href="https://liangdahong.com/2019/10/11/Jenkins-%E7%9B%B8%E5%85%B3/"/>
    <id>https://liangdahong.com/2019/10/11/Jenkins-相关/</id>
    <published>2019-10-11T14:17:13.000Z</published>
    <updated>2019-10-12T13:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-jdk"><a href="#Java-jdk" class="headerlink" title="Java jdk"></a>Java jdk</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以去下面的地址去下载 Java jdk 来手动安装</p><ul><li><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li></ul><a id="more"></a><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin </span><br><span class="line">sudo rm -fr /Library/PreferencesPanes/JavaControlPanel.prefpane</span><br><span class="line"></span><br><span class="line">查找当前版本 </span><br><span class="line">输入：ls /Library/Java/JavaVirtualMachines/ </span><br><span class="line">输出：jdk-9.0.1.jdk</span><br><span class="line"></span><br><span class="line">sudo rm -rf /Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk</span><br></pre></td></tr></table></figure><h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><p>可以去下面的地区的下载安装包来安装</p><ul><li><a href="https://jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">https://jenkins.io/zh/doc/book/installing/</a></li></ul><p>或者去看下面的链接来处理 </p><ul><li><a href="https://jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">https://jenkins.io/zh/doc/book/installing/</a></li></ul><p>用 brew 来安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装最新版本</span><br><span class="line">brew install jenkins</span><br><span class="line"></span><br><span class="line">安装 LTS 版本</span><br><span class="line">brew install jenkins-lts</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装完成后安装的地址是 </span><br><span class="line">/Applications/Jenkins/jenkins.war</span><br></pre></td></tr></table></figure><ul><li><p>安装 java jdk 注意不要高版本 可以是jdk8</p></li><li><p>安装jenkins</p></li><li><p>安装好 jenkins 后面就可以使用浏览器打开 &lt;<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 了</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">解锁 Jenkins</span><br><span class="line">为了确保管理员安全地安装 Jenkins，密码已写入到日志中（不知道在哪里？）该文件在服务器上：</span><br><span class="line"></span><br><span class="line">/Users/Shared/Jenkins/Home/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line">请从本地复制密码并粘贴到下面。</span><br><span class="line"></span><br><span class="line">读取下面的这个文件中的密码 注意强制修改他的权限就可以打开了</span><br><span class="line">/Users/Shared/Jenkins/Home/secrets/initialAdminPassword </span><br><span class="line"></span><br><span class="line">我这里打开是 ：</span><br><span class="line"></span><br><span class="line">ebed5b8f51f84d50a9a04eb580cc1292</span><br><span class="line"></span><br><span class="line">然后可以选择安装插件</span><br><span class="line">1、自动安装推荐的插件</span><br><span class="line">2、自定义安装插件</span><br><span class="line"></span><br><span class="line">默认安装会有下面的这些插件</span><br><span class="line"></span><br><span class="line">Folders </span><br><span class="line">OWASP Markup Formatter</span><br><span class="line">Build Timeout </span><br><span class="line">Credentials Binding</span><br><span class="line">Timestamper</span><br><span class="line">Workspace Cleanup</span><br><span class="line">Ant</span><br><span class="line">Gradle </span><br><span class="line">Pipeline</span><br><span class="line">GitHub Branch Source </span><br><span class="line">Pipeline: GitHub Groovy Libraries</span><br><span class="line">Pipeline: Stage View </span><br><span class="line">Git </span><br><span class="line">Subversion </span><br><span class="line">SSH Slaves</span><br><span class="line">Matrix Authorization Strategy </span><br><span class="line">PAM Authentication </span><br><span class="line">LDAP </span><br><span class="line">Email Extension</span><br><span class="line">Mailer </span><br><span class="line">Localization: Chinese (Simplified)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果您不确定需要哪些插件，请选择 安装建议的插件 。 您可以通过Jenkins中的Manage Jenkins &gt; Manage Plugins 页面在稍后的时间点安装（或删除）其他Jenkins插件 。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装好了以后就你要设置用户名和密码了</span><br><span class="line"></span><br><span class="line">user: liangdahong</span><br><span class="line">pass: liangdahong</span><br></pre></td></tr></table></figure><p>jenkins 重新启动 - <a href="http://localhost:8080/reload" target="_blank" rel="noopener">http://localhost:8080/reload</a></p><p>参考 - <a href="https://www.cnblogs.com/dzblog/p/6962810.html" target="_blank" rel="noopener">https://www.cnblogs.com/dzblog/p/6962810.html</a></p><p>修改一些配置</p><p><a href="http://localhost:8080/pluginManager/advanced" target="_blank" rel="noopener">http://localhost:8080/pluginManager/advanced</a></p><ul><li>jenkins 插件下载 <a href="http://updates.jenkins-ci.org/download/plugins/ssh/" target="_blank" rel="noopener">http://updates.jenkins-ci.org/download/plugins/ssh/</a></li><li>可以在这里下载好了然后在 <a href="http://localhost:8080/pluginManager/advanced" target="_blank" rel="noopener">http://localhost:8080/pluginManager/advanced</a> 上传</li><li>就可以自己安装了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-jdk&quot;&gt;&lt;a href=&quot;#Java-jdk&quot; class=&quot;headerlink&quot; title=&quot;Java jdk&quot;&gt;&lt;/a&gt;Java jdk&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;可以去下面的地址去下载 Java jdk 来手动安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://liangdahong.com/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://liangdahong.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>React Native 相关</title>
    <link href="https://liangdahong.com/2019/10/09/2019/React-Native-%E7%9B%B8%E5%85%B3/"/>
    <id>https://liangdahong.com/2019/10/09/2019/React-Native-相关/</id>
    <published>2019-10-09T06:57:25.000Z</published>
    <updated>2019-10-10T09:26:23.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">https://facebook.github.io/react-native/</a></li><li><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">https://github.com/facebook/react-native</a></li></ul><a id="more"></a><ul><li><p><a href="https://reactnative.cn/docs/getting-started/" target="_blank" rel="noopener">https://reactnative.cn/docs/getting-started/</a></p></li><li><p><a href="https://www.imooc.com/" target="_blank" rel="noopener">https://www.imooc.com/</a></p></li><li><p><a href="http://www.devio.org/" target="_blank" rel="noopener">http://www.devio.org/</a></p></li><li><p><a href="https://github.com/crazycodeboy/RNStudyNotes" target="_blank" rel="noopener">https://github.com/crazycodeboy/RNStudyNotes</a></p></li><li><p><a href="https://github.com/crazycodeboy/react-native-awesome" target="_blank" rel="noopener">https://github.com/crazycodeboy/react-native-awesome</a></p></li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li>环境搭建 <a href="https://reactnative.cn/docs/getting-started/" target="_blank" rel="noopener">https://reactnative.cn/docs/getting-started/</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">react-native init xxx（项目名） 初始化项目</span><br><span class="line"></span><br><span class="line">cd 项目下</span><br><span class="line"></span><br><span class="line">react-native run-ios  运行项目</span><br><span class="line"></span><br><span class="line">react-native run-android</span><br></pre></td></tr></table></figure><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>模拟器上 Command + D  调出调试工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Reload 重新加载js</span><br><span class="line">Debug JS Remotely  Debug模式 会打开一个浏览器来调试</span><br><span class="line">Enable Live Reload 是否修改了实时加载（重新run 到首页去了）</span><br><span class="line">Start Systrace     </span><br><span class="line">Enable Hot Reloading  热加载当前的页面（只更新当前显示的页面，不会到 首页去）</span><br><span class="line">... 其他</span><br></pre></td></tr></table></figure><h3 id="vscode-的一些快捷键"><a href="#vscode-的一些快捷键" class="headerlink" title="vscode 的一些快捷键"></a>vscode 的一些快捷键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows Shift + Alt + F</span><br><span class="line">Ubuntu Ctrl + Shift + I</span><br><span class="line">Mac Shift + Option + F</span><br></pre></td></tr></table></figure><h3 id="真机调试"><a href="#真机调试" class="headerlink" title="真机调试"></a>真机调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用 Xcode 打开项目，修改 RCTWebSocketExecutor.m 文件下的 @&quot;localhost&quot; 为IP地址，手机和电脑在同一个路由器下。</span><br><span class="line"></span><br><span class="line">- (void)setUp</span><br><span class="line">&#123;</span><br><span class="line">  if (!_url) &#123;</span><br><span class="line">    NSInteger port = [[[_bridge bundleURL] port] integerValue] ?: RCT_METRO_PORT;</span><br><span class="line">    NSString *host = [[_bridge bundleURL] host] ?: @&quot;10.1.160.82&quot;;</span><br></pre></td></tr></table></figure><h3 id="Chrome-调试工具"><a href="#Chrome-调试工具" class="headerlink" title="Chrome 调试工具"></a>Chrome 调试工具</h3><ul><li><a href="https://www.imooc.com/video/18591" target="_blank" rel="noopener">https://www.imooc.com/video/18591</a></li></ul><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><ul><li>应用启动是到 index.js 文件</li><li>在参考使用下面的代码到指定的界面</li></ul><h3 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入 React  React 当然是必须的</span><br><span class="line"> import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line"> </span><br><span class="line"> // 导入 AppRegistry  AppRegistry 里有 registerComponent 函数</span><br><span class="line"> import &#123;AppRegistry&#125; from &apos;react-native&apos;;</span><br><span class="line"> </span><br><span class="line"> // 这个是自己写的内容 setup 来自 ./js/main 路径 和小程序差不多</span><br><span class="line"> import setup from &apos;./js/main&apos;</span><br><span class="line"> </span><br><span class="line"> // 使用 AppRegistry 调用 registerComponent 函数 ，传的参数是 &apos;AwesomeProject1&apos; 和  setup</span><br><span class="line"> AppRegistry.registerComponent(&apos;AwesomeProject1&apos;, () =&gt; setup)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入 React</span><br><span class="line">import React, &#123;Fragment&#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">// 导入 SafeAreaView ...</span><br><span class="line">import &#123;</span><br><span class="line">  SafeAreaView,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  ScrollView,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  StatusBar,</span><br><span class="line">&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  Header,</span><br><span class="line">  LearnMoreLinks,</span><br><span class="line">  Colors,</span><br><span class="line">  DebugInstructions,</span><br><span class="line">  ReloadInstructions,</span><br><span class="line">&#125; from &apos;react-native/Libraries/NewAppScreen&apos;;</span><br><span class="line"></span><br><span class="line">// 这里是导入一个组件</span><br><span class="line">// import HelloComponent from &apos;./HelloComponent&apos;</span><br><span class="line"></span><br><span class="line">import &#123; Function &#125; from &apos;core-js&apos;;</span><br><span class="line"></span><br><span class="line">// 定义一个常量  这里是组件 html</span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;StatusBar barStyle=&quot;dark-content&quot; /&gt;</span><br><span class="line">      &lt;SafeAreaView&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;Text style=&#123;styles.HelloComponent1&#125; onPress=&#123;this.onPressButton&#125;&gt;aaaaaa&lt;/Text&gt;  </span><br><span class="line">         &lt;/View&gt;</span><br><span class="line">      &lt;/SafeAreaView&gt;</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 函数</span><br><span class="line">function onPressButton() &#123;</span><br><span class="line">  console.log(&quot;sssssss&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义一个常量 是 css 样式</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  HelloComponent1: &#123;</span><br><span class="line">    fontSize:60,</span><br><span class="line">     backgroundColor: &apos;red&apos;, </span><br><span class="line">     marginTop:100</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 导出的内容</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const App = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">// 这里定义一个函数</span><br><span class="line">  this.onPressButton0 = &#123;</span><br><span class="line">    onStartShouldSetResponder: () =&gt; true,</span><br><span class="line">    onMoveShouldSetResponder: () =&gt; true,</span><br><span class="line">    </span><br><span class="line">    // 这里是响应结束时 触发</span><br><span class="line">    onResponderEnd:() =&gt; &#123;</span><br><span class="line">      console.log(&apos;main.js Text tap&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;StatusBar barStyle=&quot;dark-content&quot; /&gt;</span><br><span class="line">      &lt;SafeAreaView&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;HelloComponent&gt;&lt;/HelloComponent&gt;</span><br><span class="line">          // 绑定一个事件</span><br><span class="line">          &lt;Text &#123;...this.onPressButton0&#125;&gt;text&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/SafeAreaView&gt;</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h3 id="组件内绑定事件"><a href="#组件内绑定事件" class="headerlink" title="组件内绑定事件"></a>组件内绑定事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export default class HelloComponent extends Component &#123;</span><br><span class="line">// 定义一个函数</span><br><span class="line">  onPressButton0 = &#123;</span><br><span class="line">    onStartShouldSetResponder: () =&gt; true,</span><br><span class="line">    onMoveShouldSetResponder: () =&gt; true,</span><br><span class="line">    // 响应结束</span><br><span class="line">    onResponderEnd:() =&gt; &#123;</span><br><span class="line">      console.log(&apos;HelloComponent1 组件内响应 onPressButton0&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">    render()&#123;</span><br><span class="line">        return  &lt;View&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.HelloComponent1&#125; &#123;...this.onPressButton0&#125; &gt;HelloComponent1 组件内响应 onPressButton0&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件数据绑定"><a href="#组件数据绑定" class="headerlink" title="组件数据绑定"></a>组件数据绑定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 全局的变量</span><br><span class="line">var cc = &apos;sss&apos;</span><br><span class="line"></span><br><span class="line">export default class OneComponent extends Component &#123;</span><br><span class="line"></span><br><span class="line">组件的属性变量</span><br><span class="line">    state = &#123;</span><br><span class="line">        name: &apos;梁大红&apos;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">组件的属性变量</span><br><span class="line">  onPressButton0 = &#123;</span><br><span class="line">    onStartShouldSetResponder: () =&gt; true,</span><br><span class="line">    onMoveShouldSetResponder: () =&gt; true,</span><br><span class="line">    onResponderEnd:() =&gt; &#123;</span><br><span class="line">      console.log(&apos;OneComponent 组件内响应 onPressButton0&apos;)</span><br><span class="line">      // 刷新界面</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">          name: this.state.name + &apos;1&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 修改全局值 来刷新界面</span><br><span class="line">      cc = cc + &apos;1&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return  &lt;View&gt;</span><br><span class="line">        // 取出值</span><br><span class="line">        &lt;Text style=&#123;styles.HelloComponent1&#125; &#123;...this.onPressButton0&#125; &gt;&#123;this.state.name&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;Text&gt;&#123;cc&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><ul><li><a href="http://www.devio.org/2016/08/10/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%AD" target="_blank" rel="noopener">React Native之React速学教程(中) - 组件的生命周期</a>/)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default class OneComponent extends Component &#123;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        console.log(&apos;在初始化渲染执行之后立刻调用一次，仅客户端有效（服务器端不会调用）。&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><ul><li><a href="https://reactnative.cn/docs/network/" target="_blank" rel="noopener">https://reactnative.cn/docs/network/</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">export default class OneComponent extends Component &#123;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line"></span><br><span class="line">        fetch(&apos;https://facebook.github.io/react-native/movies.json&apos;, </span><br><span class="line">        &#123;</span><br><span class="line">            method: &apos;GET&apos;,</span><br><span class="line"></span><br><span class="line">            headers: &#123;</span><br><span class="line">                Accept: &apos;application/json&apos;,</span><br><span class="line">                &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // body: JSON.stringify(&#123;</span><br><span class="line">            //     // firstParam: &apos;yourValue&apos;,</span><br><span class="line">            //     // secondParam: &apos;yourOtherValue&apos;,</span><br><span class="line">            // &#125;),</span><br><span class="line">        &#125;,)</span><br><span class="line">        </span><br><span class="line">        //  json 处理</span><br><span class="line">            .then((response) =&gt; response.json())</span><br><span class="line">            </span><br><span class="line">            // 成功了</span><br><span class="line">            .then((responseJson) =&gt; &#123;</span><br><span class="line">                console.log(&apos;成功了&apos; + responseJson);</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">            // 异常处理</span><br><span class="line">            .catch((error) =&gt; &#123;</span><br><span class="line">                console.log(&apos;失败了&apos; + error);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Lib"><a href="#Lib" class="headerlink" title="Lib"></a>Lib</h3><ul><li><a href="https://github.com/react-native-community/react-native-navbar" target="_blank" rel="noopener">https://github.com/react-native-community/react-native-navbar</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://facebook.github.io/react-native/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react-native&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/facebook/react-native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="React Native" scheme="https://liangdahong.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="https://liangdahong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 相关</title>
    <link href="https://liangdahong.com/2019/10/09/React-Native-%E7%9B%B8%E5%85%B3/"/>
    <id>https://liangdahong.com/2019/10/09/React-Native-相关/</id>
    <published>2019-10-09T06:57:25.000Z</published>
    <updated>2019-10-18T08:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">https://facebook.github.io/react-native/</a></li><li><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">https://github.com/facebook/react-native</a></li></ul><a id="more"></a><ul><li><p><a href="https://reactnative.cn/docs/getting-started/" target="_blank" rel="noopener">https://reactnative.cn/docs/getting-started/</a></p></li><li><p><a href="https://www.imooc.com/" target="_blank" rel="noopener">https://www.imooc.com/</a></p></li><li><p><a href="http://www.devio.org/" target="_blank" rel="noopener">http://www.devio.org/</a></p></li><li><p><a href="https://github.com/crazycodeboy/RNStudyNotes" target="_blank" rel="noopener">https://github.com/crazycodeboy/RNStudyNotes</a></p></li><li><p><a href="https://github.com/crazycodeboy/react-native-awesome" target="_blank" rel="noopener">https://github.com/crazycodeboy/react-native-awesome</a></p></li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li>环境搭建 <a href="https://reactnative.cn/docs/getting-started/" target="_blank" rel="noopener">https://reactnative.cn/docs/getting-started/</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">react-native init xxx（项目名） 初始化项目</span><br><span class="line"></span><br><span class="line">cd 项目下</span><br><span class="line"></span><br><span class="line">react-native run-ios  运行项目</span><br><span class="line"></span><br><span class="line">react-native run-android</span><br></pre></td></tr></table></figure><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>模拟器上 Command + D  调出调试工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Reload 重新加载js</span><br><span class="line">Debug JS Remotely  Debug模式 会打开一个浏览器来调试</span><br><span class="line">Enable Live Reload 是否修改了实时加载（重新run 到首页去了）</span><br><span class="line">Start Systrace     </span><br><span class="line">Enable Hot Reloading  热加载当前的页面（只更新当前显示的页面，不会到 首页去）</span><br><span class="line">... 其他</span><br></pre></td></tr></table></figure><h3 id="vscode-的一些快捷键"><a href="#vscode-的一些快捷键" class="headerlink" title="vscode 的一些快捷键"></a>vscode 的一些快捷键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows Shift + Alt + F</span><br><span class="line">Ubuntu Ctrl + Shift + I</span><br><span class="line">Mac Shift + Option + F</span><br></pre></td></tr></table></figure><h3 id="真机调试"><a href="#真机调试" class="headerlink" title="真机调试"></a>真机调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用 Xcode 打开项目，修改 RCTWebSocketExecutor.m 文件下的 @&quot;localhost&quot; 为IP地址，手机和电脑在同一个路由器下。</span><br><span class="line"></span><br><span class="line">- (void)setUp</span><br><span class="line">&#123;</span><br><span class="line">  if (!_url) &#123;</span><br><span class="line">    NSInteger port = [[[_bridge bundleURL] port] integerValue] ?: RCT_METRO_PORT;</span><br><span class="line">    NSString *host = [[_bridge bundleURL] host] ?: @&quot;10.1.160.82&quot;;</span><br></pre></td></tr></table></figure><h3 id="Chrome-调试工具"><a href="#Chrome-调试工具" class="headerlink" title="Chrome 调试工具"></a>Chrome 调试工具</h3><ul><li><a href="https://www.imooc.com/video/18591" target="_blank" rel="noopener">https://www.imooc.com/video/18591</a></li></ul><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><ul><li>应用启动是到 index.js 文件</li><li>在参考使用下面的代码到指定的界面</li></ul><h3 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入 React  React 当然是必须的</span><br><span class="line"> import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line"> </span><br><span class="line"> // 导入 AppRegistry  AppRegistry 里有 registerComponent 函数</span><br><span class="line"> import &#123;AppRegistry&#125; from &apos;react-native&apos;;</span><br><span class="line"> </span><br><span class="line"> // 这个是自己写的内容 setup 来自 ./js/main 路径 和小程序差不多</span><br><span class="line"> import setup from &apos;./js/main&apos;</span><br><span class="line"> </span><br><span class="line"> // 使用 AppRegistry 调用 registerComponent 函数 ，传的参数是 &apos;AwesomeProject1&apos; 和  setup</span><br><span class="line"> AppRegistry.registerComponent(&apos;AwesomeProject1&apos;, () =&gt; setup)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入 React</span><br><span class="line">import React, &#123;Fragment&#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">// 导入 SafeAreaView ...</span><br><span class="line">import &#123;</span><br><span class="line">  SafeAreaView,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  ScrollView,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  StatusBar,</span><br><span class="line">&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  Header,</span><br><span class="line">  LearnMoreLinks,</span><br><span class="line">  Colors,</span><br><span class="line">  DebugInstructions,</span><br><span class="line">  ReloadInstructions,</span><br><span class="line">&#125; from &apos;react-native/Libraries/NewAppScreen&apos;;</span><br><span class="line"></span><br><span class="line">// 这里是导入一个组件</span><br><span class="line">// import HelloComponent from &apos;./HelloComponent&apos;</span><br><span class="line"></span><br><span class="line">import &#123; Function &#125; from &apos;core-js&apos;;</span><br><span class="line"></span><br><span class="line">// 定义一个常量  这里是组件 html</span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;StatusBar barStyle=&quot;dark-content&quot; /&gt;</span><br><span class="line">      &lt;SafeAreaView&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;Text style=&#123;styles.HelloComponent1&#125; onPress=&#123;this.onPressButton&#125;&gt;aaaaaa&lt;/Text&gt;  </span><br><span class="line">         &lt;/View&gt;</span><br><span class="line">      &lt;/SafeAreaView&gt;</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 函数</span><br><span class="line">function onPressButton() &#123;</span><br><span class="line">  console.log(&quot;sssssss&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义一个常量 是 css 样式</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  HelloComponent1: &#123;</span><br><span class="line">    fontSize:60,</span><br><span class="line">     backgroundColor: &apos;red&apos;, </span><br><span class="line">     marginTop:100</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 导出的内容</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const App = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">// 这里定义一个函数</span><br><span class="line">  this.onPressButton0 = &#123;</span><br><span class="line">    onStartShouldSetResponder: () =&gt; true,</span><br><span class="line">    onMoveShouldSetResponder: () =&gt; true,</span><br><span class="line">    </span><br><span class="line">    // 这里是响应结束时 触发</span><br><span class="line">    onResponderEnd:() =&gt; &#123;</span><br><span class="line">      console.log(&apos;main.js Text tap&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;StatusBar barStyle=&quot;dark-content&quot; /&gt;</span><br><span class="line">      &lt;SafeAreaView&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;HelloComponent&gt;&lt;/HelloComponent&gt;</span><br><span class="line">          // 绑定一个事件</span><br><span class="line">          &lt;Text &#123;...this.onPressButton0&#125;&gt;text&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/SafeAreaView&gt;</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h3 id="组件内绑定事件"><a href="#组件内绑定事件" class="headerlink" title="组件内绑定事件"></a>组件内绑定事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export default class HelloComponent extends Component &#123;</span><br><span class="line">// 定义一个函数</span><br><span class="line">  onPressButton0 = &#123;</span><br><span class="line">    onStartShouldSetResponder: () =&gt; true,</span><br><span class="line">    onMoveShouldSetResponder: () =&gt; true,</span><br><span class="line">    // 响应结束</span><br><span class="line">    onResponderEnd:() =&gt; &#123;</span><br><span class="line">      console.log(&apos;HelloComponent1 组件内响应 onPressButton0&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">    render()&#123;</span><br><span class="line">        return  &lt;View&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.HelloComponent1&#125; &#123;...this.onPressButton0&#125; &gt;HelloComponent1 组件内响应 onPressButton0&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件数据绑定"><a href="#组件数据绑定" class="headerlink" title="组件数据绑定"></a>组件数据绑定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 全局的变量</span><br><span class="line">var cc = &apos;sss&apos;</span><br><span class="line"></span><br><span class="line">export default class OneComponent extends Component &#123;</span><br><span class="line"></span><br><span class="line">组件的属性变量</span><br><span class="line">    state = &#123;</span><br><span class="line">        name: &apos;梁大红&apos;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">组件的属性变量</span><br><span class="line">  onPressButton0 = &#123;</span><br><span class="line">    onStartShouldSetResponder: () =&gt; true,</span><br><span class="line">    onMoveShouldSetResponder: () =&gt; true,</span><br><span class="line">    onResponderEnd:() =&gt; &#123;</span><br><span class="line">      console.log(&apos;OneComponent 组件内响应 onPressButton0&apos;)</span><br><span class="line">      // 刷新界面</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">          name: this.state.name + &apos;1&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 修改全局值 来刷新界面</span><br><span class="line">      cc = cc + &apos;1&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return  &lt;View&gt;</span><br><span class="line">        // 取出值</span><br><span class="line">        &lt;Text style=&#123;styles.HelloComponent1&#125; &#123;...this.onPressButton0&#125; &gt;&#123;this.state.name&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;Text&gt;&#123;cc&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><ul><li><a href="http://www.devio.org/2016/08/10/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%AD" target="_blank" rel="noopener">React Native之React速学教程(中) - 组件的生命周期</a>/)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default class OneComponent extends Component &#123;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        console.log(&apos;在初始化渲染执行之后立刻调用一次，仅客户端有效（服务器端不会调用）。&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><ul><li><a href="https://reactnative.cn/docs/network/" target="_blank" rel="noopener">https://reactnative.cn/docs/network/</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">export default class OneComponent extends Component &#123;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line"></span><br><span class="line">        fetch(&apos;https://facebook.github.io/react-native/movies.json&apos;, </span><br><span class="line">        &#123;</span><br><span class="line">            method: &apos;GET&apos;,</span><br><span class="line"></span><br><span class="line">            headers: &#123;</span><br><span class="line">                Accept: &apos;application/json&apos;,</span><br><span class="line">                &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // body: JSON.stringify(&#123;</span><br><span class="line">            //     // firstParam: &apos;yourValue&apos;,</span><br><span class="line">            //     // secondParam: &apos;yourOtherValue&apos;,</span><br><span class="line">            // &#125;),</span><br><span class="line">        &#125;,)</span><br><span class="line">        </span><br><span class="line">        //  json 处理</span><br><span class="line">            .then((response) =&gt; response.json())</span><br><span class="line">            </span><br><span class="line">            // 成功了</span><br><span class="line">            .then((responseJson) =&gt; &#123;</span><br><span class="line">                console.log(&apos;成功了&apos; + responseJson);</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">            // 异常处理</span><br><span class="line">            .catch((error) =&gt; &#123;</span><br><span class="line">                console.log(&apos;失败了&apos; + error);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Lib"><a href="#Lib" class="headerlink" title="Lib"></a>Lib</h3><ul><li><a href="https://github.com/react-native-community/react-native-navbar" target="_blank" rel="noopener">https://github.com/react-native-community/react-native-navbar</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://facebook.github.io/react-native/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react-native&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/facebook/react-native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="React Native" scheme="https://liangdahong.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="https://liangdahong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>(转)UIStackView的简单使用与理解</title>
    <link href="https://liangdahong.com/2019/06/04/%E8%BD%AC%E8%BD%BD/%E8%BD%AC-UIStackView%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
    <id>https://liangdahong.com/2019/06/04/转载/转-UIStackView的简单使用与理解/</id>
    <published>2019-06-04T03:16:33.000Z</published>
    <updated>2019-06-04T03:29:39.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>转载自 <a href="https://lockxmonk.github.io/15391408783293.html" target="_blank" rel="noopener">https://lockxmonk.github.io/15391408783293.html</a></li></ul><blockquote><p>之前一直在吐槽iOS的布局方式（frame和autolayout）相比前端的flex布局方式很落后，也在想有没有其它的方式来改善。最近偶然发现UIStackView的存在（苹果爸爸原谅我😂），了解后发现其中的使用与布局方式类似于flex布局，感觉这就是苹果爸爸借鉴flex布局特点所构造的一种布局实现方式吧。</p></blockquote><a id="more"></a><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><blockquote><p>这里我们看一下如何简单的使用stackview来创造一个拥有众多子item的水平视图。代码如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line"></span><br><span class="line">    containerView = [[UIStackView alloc]initWithFrame:CGRectMake(0, 100, CGRectGetWidth(self.view.bounds), 200)];</span><br><span class="line">    //子视图布局方向：水平或垂直</span><br><span class="line">    containerView.axis = UILayoutConstraintAxisHorizontal;//水平布局</span><br><span class="line">    //子控件依据何种规矩布局</span><br><span class="line">    containerView.distribution = UIStackViewDistributionFillEqually;//子控件均分</span><br><span class="line">    //子控件之间的最小间距</span><br><span class="line">    containerView.spacing = 10;</span><br><span class="line">    //子控件的对齐方式</span><br><span class="line">    containerView.alignment = UIStackViewAlignmentFill;</span><br><span class="line">    NSArray *tempArray = @[@&quot;1&quot;,@&quot;2&quot;,@&quot;3&quot;,@&quot;4&quot;];</span><br><span class="line">    for (NSInteger i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">//        UIView *view = [[UIView alloc]init];</span><br><span class="line">        UILabel *label = [[UILabel alloc] init];</span><br><span class="line">        label.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">        label.backgroundColor = [UIColor colorWithRed:random()%256/255.0 green:random()%256/255.0 blue:random()%256/255.0 alpha:1];</span><br><span class="line">        label.numberOfLines = 0;</span><br><span class="line">        label.text = tempArray[i];</span><br><span class="line">        </span><br><span class="line">        [containerView addArrangedSubview:label];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    [self.view addSubview:containerView];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到 <code>stackView</code> 的使用和view没有大的区别，使用时根绝需要来设置 <code>stackView</code> 的 <code>axis</code>（布局方向）, <code>distribution</code>（子控件依据何种规矩布局）, <code>spacing</code>（子控件之间的最小间距）, <code>alignment</code>（子控件的对齐方式）等属性。</p></blockquote><hr><h2 id="属性及方法"><a href="#属性及方法" class="headerlink" title="属性及方法"></a>属性及方法</h2><blockquote><p>这里详细说明一下个属性的主要参数：</p></blockquote><h3 id="axis："><a href="#axis：" class="headerlink" title="axis："></a>axis：</h3><blockquote><p>子控件的布局方向，水平（ <code>UILayoutConstraintAxisHorizontal</code>）或垂直（<code>UILayoutConstraintAxisVertical</code>）， 这个不用过多解释了</p></blockquote><h3 id="UIStackViewDistribution"><a href="#UIStackViewDistribution" class="headerlink" title="UIStackViewDistribution"></a>UIStackViewDistribution</h3><blockquote><p><code>UIStackViewDistributionFill</code> ：它就是将 arrangedSubviews 填充满整个 StackView ，如果设置了spacing，那么这些 arrangedSubviews 之间的间距就是spacing。如果减去所有的spacing，所有的 arrangedSubview 的固有尺寸( intrinsicContentSize )不能填满或者超出 StackView 的尺寸，那就会按照 Hugging 或者 CompressionResistance 的优先级来拉伸或压缩一些 arrangedSubview 。如果出现优先级相同的情况，就按排列顺序来拉伸或压缩。</p></blockquote><blockquote><p><code>UIStackViewDistributionFillEqually</code> ：这种就是 StackView 的尺寸减去所有的spacing之后均分给 arrangedSubviews ，每个 arrangedSubview 的尺寸是相同的。</p></blockquote><blockquote><p><code>UIStackViewDistributionFillProportionally</code> ：这种跟FillEqually差不多，只不过这个不是讲尺寸均分给 arrangedSubviews ，而是根据 arrangedSubviews 的 intrinsicContentSize 按比例分配。</p></blockquote><blockquote><p><code>UIStackViewDistributionEqualSpacing</code> ：这种是使 arrangedSubview 之间的spacing相等，但是这个spacing是有可能大于 StackView 所设置的spacing，但是绝对不会小于。这个类型的布局可以这样理解，先按所有的 arrangedSubview 的 intrinsicContentSize 布局，然后余下的空间均分为spacing，如果大约 StackView 设置的spacing那这样就OK了，如果小于就按照 StackView 设置的spacing，然后按照 CompressionResistance 的优先级来压缩一个 arrangedSubview 。</p></blockquote><blockquote><p><code>UIStackViewDistributionEqualCentering</code> ：这种是使 arrangedSubview 的中心点之间的距离相等，这样没两个 arrangedSubview 之间的spacing就有可能不是相等的，但是这个spacing仍然是大于等于 StackView 设置的spacing的，不会是小于。这个类型布局仍然是如果 StackView 有多余的空间会均分给 arrangedSubviews 之间的spacing，如果空间不够那就按照 CompressionResistance 的优先级压缩 arrangedSubview 。</p></blockquote><h3 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h3><blockquote><p><code>UIStackViewAlignmentFill</code> = 默认方式， 如果子控件水平布局, 则指子控件的垂直方向填充满stackView. 反之亦然</p></blockquote><blockquote><p><code>UIStackViewAlignmentLeading</code> = 如果子控件竖直布局, 则指子控件左边对齐stackView左边. 反之亦然, 即 UIStackViewAlignmentTop = UIStackViewAlignmentLeading。</p></blockquote><blockquote><p><code>UIStackViewAlignmentTop</code> = UIStackViewAlignmentLeading,</p></blockquote><blockquote><p><code>UIStackViewAlignmentFirstBaseline</code> = 根据上方基线布局所有子视图的 y 值(适用于 Horizontal 模式)</p></blockquote><blockquote><p><code>UIStackViewAlignmentLastBaseline</code> = 根据下方基线布局所有子视图的 y 值(适用于 Horizontal 模式)</p></blockquote><blockquote><p><code>UIStackViewAlignmentCenter</code> = 中心对齐</p></blockquote><blockquote><p><code>UIStackViewAlignmentTrailing</code> = 如果子控件竖直布局, 则指子控件左边对齐stackView右边. 反之亦然, 即UIStackViewAlignmentBottom = UIStackViewAlignmentTrailing</p></blockquote><blockquote><p><code>UIStackViewAlignmentBottom</code> = UIStackViewAlignmentTrailing</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>这里还要说明几个方法：addArrangedSubview、removeArrangedSubview和insertArrangedSubview，日常view的添加和子视图从复视图删除使用的是addSubview和removeFromSuperview。</p></blockquote><blockquote><p>其中完整方法如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">初始化数组:</span><br><span class="line">- (instancetype)initWithArrangedSubviews:(NSArray *)views;</span><br><span class="line">添加子视图: </span><br><span class="line">- (void)addArrangedSubview:(UIView *)view;</span><br><span class="line">移除子视图:</span><br><span class="line">- (void)removeArrangedSubview:(UIView *)view;</span><br><span class="line">根据下标插入视图:</span><br><span class="line">- (void)insertArrangedSubview:(UIView *)viewatIndex:(NSUInteger)stackIndex;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>注意： addArrangedSubview 和 insertArrangedSubview， 会把子控件加到arrangedSubviews数组的同时添加到StackView的subView数组中，但是removeArrangedSubview， 只会把子控件从arrangedSubviews数组中移除，不会从subviews中移除，如果需要调用removeFromSuperview</p></blockquote><hr><blockquote><p>若我们需要删除stackView中subView数组的最后一个视图，可以用如下方式：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//removeArrangedSubview， 只会把子控件从arrangedSubviews数组中移除，</span><br><span class="line">//不会从subviews中移除，如果需要可调用removeFromSuperview</span><br><span class="line">UIView *view = [_containerView.subviews lastObject];</span><br><span class="line">[_containerView removeArrangedSubview:view];</span><br><span class="line">[view removeFromSuperview];</span><br></pre></td></tr></table></figure><blockquote><p>到此stackView的一个简单使用方式就知道了。</p></blockquote><ul><li>转载自 <a href="https://lockxmonk.github.io/15391408783293.html" target="_blank" rel="noopener">https://lockxmonk.github.io/15391408783293.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;转载自 &lt;a href=&quot;https://lockxmonk.github.io/15391408783293.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://lockxmonk.github.io/15391408783293.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;之前一直在吐槽iOS的布局方式（frame和autolayout）相比前端的flex布局方式很落后，也在想有没有其它的方式来改善。最近偶然发现UIStackView的存在（苹果爸爸原谅我😂），了解后发现其中的使用与布局方式类似于flex布局，感觉这就是苹果爸爸借鉴flex布局特点所构造的一种布局实现方式吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>(转)UIStackView的简单使用与理解</title>
    <link href="https://liangdahong.com/2019/06/04/%E8%BD%AC-UIStackView%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
    <id>https://liangdahong.com/2019/06/04/转-UIStackView的简单使用与理解/</id>
    <published>2019-06-04T03:16:33.000Z</published>
    <updated>2019-10-18T08:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>转载自 <a href="https://lockxmonk.github.io/15391408783293.html" target="_blank" rel="noopener">https://lockxmonk.github.io/15391408783293.html</a></li></ul><blockquote><p>之前一直在吐槽iOS的布局方式（frame和autolayout）相比前端的flex布局方式很落后，也在想有没有其它的方式来改善。最近偶然发现UIStackView的存在（苹果爸爸原谅我😂），了解后发现其中的使用与布局方式类似于flex布局，感觉这就是苹果爸爸借鉴flex布局特点所构造的一种布局实现方式吧。</p></blockquote><a id="more"></a><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><blockquote><p>这里我们看一下如何简单的使用stackview来创造一个拥有众多子item的水平视图。代码如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line"></span><br><span class="line">    containerView = [[UIStackView alloc]initWithFrame:CGRectMake(0, 100, CGRectGetWidth(self.view.bounds), 200)];</span><br><span class="line">    //子视图布局方向：水平或垂直</span><br><span class="line">    containerView.axis = UILayoutConstraintAxisHorizontal;//水平布局</span><br><span class="line">    //子控件依据何种规矩布局</span><br><span class="line">    containerView.distribution = UIStackViewDistributionFillEqually;//子控件均分</span><br><span class="line">    //子控件之间的最小间距</span><br><span class="line">    containerView.spacing = 10;</span><br><span class="line">    //子控件的对齐方式</span><br><span class="line">    containerView.alignment = UIStackViewAlignmentFill;</span><br><span class="line">    NSArray *tempArray = @[@&quot;1&quot;,@&quot;2&quot;,@&quot;3&quot;,@&quot;4&quot;];</span><br><span class="line">    for (NSInteger i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">//        UIView *view = [[UIView alloc]init];</span><br><span class="line">        UILabel *label = [[UILabel alloc] init];</span><br><span class="line">        label.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">        label.backgroundColor = [UIColor colorWithRed:random()%256/255.0 green:random()%256/255.0 blue:random()%256/255.0 alpha:1];</span><br><span class="line">        label.numberOfLines = 0;</span><br><span class="line">        label.text = tempArray[i];</span><br><span class="line">        </span><br><span class="line">        [containerView addArrangedSubview:label];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    [self.view addSubview:containerView];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到 <code>stackView</code> 的使用和view没有大的区别，使用时根绝需要来设置 <code>stackView</code> 的 <code>axis</code>（布局方向）, <code>distribution</code>（子控件依据何种规矩布局）, <code>spacing</code>（子控件之间的最小间距）, <code>alignment</code>（子控件的对齐方式）等属性。</p></blockquote><hr><h2 id="属性及方法"><a href="#属性及方法" class="headerlink" title="属性及方法"></a>属性及方法</h2><blockquote><p>这里详细说明一下个属性的主要参数：</p></blockquote><h3 id="axis："><a href="#axis：" class="headerlink" title="axis："></a>axis：</h3><blockquote><p>子控件的布局方向，水平（ <code>UILayoutConstraintAxisHorizontal</code>）或垂直（<code>UILayoutConstraintAxisVertical</code>）， 这个不用过多解释了</p></blockquote><h3 id="UIStackViewDistribution"><a href="#UIStackViewDistribution" class="headerlink" title="UIStackViewDistribution"></a>UIStackViewDistribution</h3><blockquote><p><code>UIStackViewDistributionFill</code> ：它就是将 arrangedSubviews 填充满整个 StackView ，如果设置了spacing，那么这些 arrangedSubviews 之间的间距就是spacing。如果减去所有的spacing，所有的 arrangedSubview 的固有尺寸( intrinsicContentSize )不能填满或者超出 StackView 的尺寸，那就会按照 Hugging 或者 CompressionResistance 的优先级来拉伸或压缩一些 arrangedSubview 。如果出现优先级相同的情况，就按排列顺序来拉伸或压缩。</p></blockquote><blockquote><p><code>UIStackViewDistributionFillEqually</code> ：这种就是 StackView 的尺寸减去所有的spacing之后均分给 arrangedSubviews ，每个 arrangedSubview 的尺寸是相同的。</p></blockquote><blockquote><p><code>UIStackViewDistributionFillProportionally</code> ：这种跟FillEqually差不多，只不过这个不是讲尺寸均分给 arrangedSubviews ，而是根据 arrangedSubviews 的 intrinsicContentSize 按比例分配。</p></blockquote><blockquote><p><code>UIStackViewDistributionEqualSpacing</code> ：这种是使 arrangedSubview 之间的spacing相等，但是这个spacing是有可能大于 StackView 所设置的spacing，但是绝对不会小于。这个类型的布局可以这样理解，先按所有的 arrangedSubview 的 intrinsicContentSize 布局，然后余下的空间均分为spacing，如果大约 StackView 设置的spacing那这样就OK了，如果小于就按照 StackView 设置的spacing，然后按照 CompressionResistance 的优先级来压缩一个 arrangedSubview 。</p></blockquote><blockquote><p><code>UIStackViewDistributionEqualCentering</code> ：这种是使 arrangedSubview 的中心点之间的距离相等，这样没两个 arrangedSubview 之间的spacing就有可能不是相等的，但是这个spacing仍然是大于等于 StackView 设置的spacing的，不会是小于。这个类型布局仍然是如果 StackView 有多余的空间会均分给 arrangedSubviews 之间的spacing，如果空间不够那就按照 CompressionResistance 的优先级压缩 arrangedSubview 。</p></blockquote><h3 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h3><blockquote><p><code>UIStackViewAlignmentFill</code> = 默认方式， 如果子控件水平布局, 则指子控件的垂直方向填充满stackView. 反之亦然</p></blockquote><blockquote><p><code>UIStackViewAlignmentLeading</code> = 如果子控件竖直布局, 则指子控件左边对齐stackView左边. 反之亦然, 即 UIStackViewAlignmentTop = UIStackViewAlignmentLeading。</p></blockquote><blockquote><p><code>UIStackViewAlignmentTop</code> = UIStackViewAlignmentLeading,</p></blockquote><blockquote><p><code>UIStackViewAlignmentFirstBaseline</code> = 根据上方基线布局所有子视图的 y 值(适用于 Horizontal 模式)</p></blockquote><blockquote><p><code>UIStackViewAlignmentLastBaseline</code> = 根据下方基线布局所有子视图的 y 值(适用于 Horizontal 模式)</p></blockquote><blockquote><p><code>UIStackViewAlignmentCenter</code> = 中心对齐</p></blockquote><blockquote><p><code>UIStackViewAlignmentTrailing</code> = 如果子控件竖直布局, 则指子控件左边对齐stackView右边. 反之亦然, 即UIStackViewAlignmentBottom = UIStackViewAlignmentTrailing</p></blockquote><blockquote><p><code>UIStackViewAlignmentBottom</code> = UIStackViewAlignmentTrailing</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>这里还要说明几个方法：addArrangedSubview、removeArrangedSubview和insertArrangedSubview，日常view的添加和子视图从复视图删除使用的是addSubview和removeFromSuperview。</p></blockquote><blockquote><p>其中完整方法如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">初始化数组:</span><br><span class="line">- (instancetype)initWithArrangedSubviews:(NSArray *)views;</span><br><span class="line">添加子视图: </span><br><span class="line">- (void)addArrangedSubview:(UIView *)view;</span><br><span class="line">移除子视图:</span><br><span class="line">- (void)removeArrangedSubview:(UIView *)view;</span><br><span class="line">根据下标插入视图:</span><br><span class="line">- (void)insertArrangedSubview:(UIView *)viewatIndex:(NSUInteger)stackIndex;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>注意： addArrangedSubview 和 insertArrangedSubview， 会把子控件加到arrangedSubviews数组的同时添加到StackView的subView数组中，但是removeArrangedSubview， 只会把子控件从arrangedSubviews数组中移除，不会从subviews中移除，如果需要调用removeFromSuperview</p></blockquote><hr><blockquote><p>若我们需要删除stackView中subView数组的最后一个视图，可以用如下方式：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//removeArrangedSubview， 只会把子控件从arrangedSubviews数组中移除，</span><br><span class="line">//不会从subviews中移除，如果需要可调用removeFromSuperview</span><br><span class="line">UIView *view = [_containerView.subviews lastObject];</span><br><span class="line">[_containerView removeArrangedSubview:view];</span><br><span class="line">[view removeFromSuperview];</span><br></pre></td></tr></table></figure><blockquote><p>到此stackView的一个简单使用方式就知道了。</p></blockquote><ul><li>转载自 <a href="https://lockxmonk.github.io/15391408783293.html" target="_blank" rel="noopener">https://lockxmonk.github.io/15391408783293.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;转载自 &lt;a href=&quot;https://lockxmonk.github.io/15391408783293.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://lockxmonk.github.io/15391408783293.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;之前一直在吐槽iOS的布局方式（frame和autolayout）相比前端的flex布局方式很落后，也在想有没有其它的方式来改善。最近偶然发现UIStackView的存在（苹果爸爸原谅我😂），了解后发现其中的使用与布局方式类似于flex布局，感觉这就是苹果爸爸借鉴flex布局特点所构造的一种布局实现方式吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的资料</title>
    <link href="https://liangdahong.com/2019/05/28/2019/%E6%88%91%E7%9A%84%E8%B5%84%E6%96%99/"/>
    <id>https://liangdahong.com/2019/05/28/2019/我的资料/</id>
    <published>2019-05-28T07:05:13.000Z</published>
    <updated>2019-05-29T01:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>查看 <code>ip</code> 地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | grep &quot;inet &quot; | grep -v 127.0.0.1</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>微信小程序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.2.12</span><br><span class="line"></span><br><span class="line">// 搜索</span><br><span class="line">find / -name &quot;*.wxapkg&quot;</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">rm -rf $(find / -name &quot;*.wxapkg&quot;)</span><br><span class="line"></span><br><span class="line">// 拷贝到电脑</span><br><span class="line">scp root@192.168.2.12:/private/var/mobile/Containers/Data/Application/24B958CE-A2B6-4B8C-ABC6-90075E90F2A0/Library/WechatPrivate/5fbbe972df96a510dc8560269047c82a/WeApp/LocalCache/release/wxe7c3f366905ced15/1.wxapkg /Users/___liangdahong/Desktop/wx</span><br><span class="line"></span><br><span class="line">// 解包</span><br><span class="line">node ./wxappUnpacker-master/wuWxapkg.js 1.wxapkg</span><br><span class="line"></span><br><span class="line">335418265</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;查看 &lt;code&gt;ip&lt;/code&gt; 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ifconfig | grep &amp;quot;inet &amp;quot; | grep -v 127.0.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的资料</title>
    <link href="https://liangdahong.com/2019/05/28/%E6%88%91%E7%9A%84%E8%B5%84%E6%96%99/"/>
    <id>https://liangdahong.com/2019/05/28/我的资料/</id>
    <published>2019-05-28T07:05:13.000Z</published>
    <updated>2019-10-18T08:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>查看 <code>ip</code> 地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | grep &quot;inet &quot; | grep -v 127.0.0.1</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>微信小程序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.2.12</span><br><span class="line"></span><br><span class="line">// 搜索</span><br><span class="line">find / -name &quot;*.wxapkg&quot;</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">rm -rf $(find / -name &quot;*.wxapkg&quot;)</span><br><span class="line"></span><br><span class="line">// 拷贝到电脑</span><br><span class="line">scp root@192.168.2.12:/private/var/mobile/Containers/Data/Application/24B958CE-A2B6-4B8C-ABC6-90075E90F2A0/Library/WechatPrivate/5fbbe972df96a510dc8560269047c82a/WeApp/LocalCache/release/wxe7c3f366905ced15/1.wxapkg /Users/___liangdahong/Desktop/wx</span><br><span class="line"></span><br><span class="line">// 解包</span><br><span class="line">node ./wxappUnpacker-master/wuWxapkg.js 1.wxapkg</span><br><span class="line"></span><br><span class="line">335418265</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;查看 &lt;code&gt;ip&lt;/code&gt; 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ifconfig | grep &amp;quot;inet &amp;quot; | grep -v 127.0.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试题001</title>
    <link href="https://liangdahong.com/2019/02/26/2019/%E9%9D%A2%E8%AF%95%E9%A2%98001/"/>
    <id>https://liangdahong.com/2019/02/26/2019/面试题001/</id>
    <published>2019-02-26T08:18:26.000Z</published>
    <updated>2019-05-28T07:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>写一个标准宏 MIN/MAX</li></ul><a id="more"></a><blockquote><p>利用 <code>__typeof__</code> 重新声明 2 个相同类型的变量，在把相关的值赋值给新的变量，在进行比较，这样可以排除其他的各种优先级问题。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define kMIN(a,b) (&#123;__typeof__(a) __a__COUNTER__ = (a);__typeof__(b) __b__COUNTER__ = (b);(__a__COUNTER__) &lt; (__b__COUNTER__) ? (__a__COUNTER__) : (__b__COUNTER__);&#125;)</span><br><span class="line">#define kMAX(a,b) (&#123;__typeof__(a) __a__COUNTER__ = (a);__typeof__(b) __b__COUNTER__ = (b);(__a__COUNTER__) &gt; (__b__COUNTER__) ? (__a__COUNTER__) : (__b__COUNTER__);&#125;)</span><br></pre></td></tr></table></figure><ul><li>OC如何实现多继承 具体怎么做</li></ul><blockquote><p>可以使用 OC 的消息转发机制，消息转发有 3 个过程 <a href="https://liangdahong.com/2018/12/28/2018/iOS-%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B9%8B%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6/">参考</a>。<code>动态方法解析</code> -&gt; <code>转发</code> -&gt; <code>自由派发</code>。可以在 <code>第 2 步</code> 和 <code>第 3 步</code>来让相关的方法转发给其他对象，从而实现多继承类似的功能。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;写一个标准宏 MIN/MAX&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试题001</title>
    <link href="https://liangdahong.com/2019/02/26/%E9%9D%A2%E8%AF%95%E9%A2%98001/"/>
    <id>https://liangdahong.com/2019/02/26/面试题001/</id>
    <published>2019-02-26T08:18:26.000Z</published>
    <updated>2019-10-18T08:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>写一个标准宏 MIN/MAX</li></ul><a id="more"></a><blockquote><p>利用 <code>__typeof__</code> 重新声明 2 个相同类型的变量，在把相关的值赋值给新的变量，在进行比较，这样可以排除其他的各种优先级问题。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define kMIN(a,b) (&#123;__typeof__(a) __a__COUNTER__ = (a);__typeof__(b) __b__COUNTER__ = (b);(__a__COUNTER__) &lt; (__b__COUNTER__) ? (__a__COUNTER__) : (__b__COUNTER__);&#125;)</span><br><span class="line">#define kMAX(a,b) (&#123;__typeof__(a) __a__COUNTER__ = (a);__typeof__(b) __b__COUNTER__ = (b);(__a__COUNTER__) &gt; (__b__COUNTER__) ? (__a__COUNTER__) : (__b__COUNTER__);&#125;)</span><br></pre></td></tr></table></figure><ul><li>OC如何实现多继承 具体怎么做</li></ul><blockquote><p>可以使用 OC 的消息转发机制，消息转发有 3 个过程 <a href="https://liangdahong.com/2018/12/28/2018/iOS-%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B9%8B%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6/">参考</a>。<code>动态方法解析</code> -&gt; <code>转发</code> -&gt; <code>自由派发</code>。可以在 <code>第 2 步</code> 和 <code>第 3 步</code>来让相关的方法转发给其他对象，从而实现多继承类似的功能。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;写一个标准宏 MIN/MAX&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018</title>
    <link href="https://liangdahong.com/2018/12/31/2018/2018/"/>
    <id>https://liangdahong.com/2018/12/31/2018/2018/</id>
    <published>2018-12-31T08:57:38.000Z</published>
    <updated>2019-02-14T09:15:46.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>领证了;<a id="more"></a></li><li>小朋友比以前听话多了;</li><li>赚了点外快把之前的所有外债还清了，无债一身轻，存了点粮食;</li><li>感谢苹果粑粑，虽然被虐千百遍，但还是有一些收获;</li><li>世界杯输了点，但还好，因祸得福;</li><li>技术方面就不谈了;</li><li>2019 加油。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;领证了;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018</title>
    <link href="https://liangdahong.com/2018/12/31/2018/"/>
    <id>https://liangdahong.com/2018/12/31/2018/</id>
    <published>2018-12-31T08:57:38.000Z</published>
    <updated>2019-10-18T08:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>领证了;<a id="more"></a></li><li>小朋友比以前听话多了;</li><li>赚了点外快把之前的所有外债还清了，无债一身轻，存了点粮食;</li><li>感谢苹果粑粑，虽然被虐千百遍，但还是有一些收获;</li><li>世界杯输了点，但还好，因祸得福;</li><li>技术方面就不谈了;</li><li>2019 加油。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;领证了;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 运行时之消息转发机制</title>
    <link href="https://liangdahong.com/2018/12/28/2018/iOS-%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B9%8B%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>https://liangdahong.com/2018/12/28/2018/iOS-运行时之消息转发机制/</id>
    <published>2018-12-28T02:00:53.000Z</published>
    <updated>2018-12-28T06:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Objective-C 下所有的方法调用都可以理解为，消息。一个对象接收到消息后，处理流程如下：</p></blockquote><a id="more"></a><ul><li>通过 NSObject 的 isa 指针找到对应的 Class</li><li>在方法缓存中查找 SEL</li><li>在 Class 的方法列表中找到对应的 SEL</li><li>如果没有继续往父类中找</li></ul><blockquote><p>在常规的操作中，如果我们调用一个没有实现的方法时，一直找到 root class  时都没找到方法实现时，崩溃。</p></blockquote><hr><blockquote><p>那么在没有查到实现的方法时系统是否做了其他的操作呢？或者我们有什么办法来防止程序崩溃吗 ？这就是本文的主题 <code>消息转发机制</code>.</p></blockquote><hr><blockquote><p>如下的流程图清晰的描述了具体过程。</p></blockquote><p><img src="http://www.enkichen.com/uploads/forwardflow.png" alt=""></p><ul><li>总结为 3 个阶段可以补救。</li></ul><h2 id="第-1-个阶段-动态方法解析"><a href="#第-1-个阶段-动态方法解析" class="headerlink" title="第 1 个阶段 - 动态方法解析"></a>第 1 个阶段 - 动态方法解析</h2><blockquote><p>在动态方法解析阶段，在该阶段中，我们可以动态的为类添加一个方法，从而让动态添加的方法来处理之前未能处理的消息，具体是在下面的方法中动态添加方法同上返回 YES，那么系统就会重给对象发送刚才的消息来执行执行。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line"> // 动态添加方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &lt;objc/runtime.h&gt;</span><br><span class="line"></span><br><span class="line">void test1test1(id self, SEL _cmd) &#123;</span><br><span class="line">    NSLog(@&quot;test1test1 %@ %@&quot;, NSStringFromSelector(_cmd) ,self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@interface BMPerson : NSObject</span><br><span class="line">- (void)test1;</span><br><span class="line">@end</span><br><span class="line">@implementation BMPerson</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, NSStringFromSelector(sel));</span><br><span class="line">    class_addMethod(BMPerson.class, NSSelectorFromString(@&quot;test1&quot;), (IMP) test1test1, NULL);</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    BMPerson *peron = BMPerson.new;</span><br><span class="line">    [peron test1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第-2-个阶段-转发"><a href="#第-2-个阶段-转发" class="headerlink" title="第 2 个阶段 - 转发"></a>第 2 个阶段 - 转发</h2><blockquote><p>在这个阶段系统是要求我们给他返回一个可以正常响应次消息的对象，系统就会把刚才的消息转发给开发者返回的对象，让新的对象去消息响应的消息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line"> // 然后可以响应消息的对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface BMGood : NSObject</span><br><span class="line">@end</span><br><span class="line">@implementation BMGood</span><br><span class="line">- (void)test1 &#123;</span><br><span class="line">    NSLog(@&quot;BMGood test1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface BMPerson : NSObject</span><br><span class="line">- (void)test1;</span><br><span class="line">@end</span><br><span class="line">@implementation BMPerson</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    return BMGood.new;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    BMPerson *peron = BMPerson.new;</span><br><span class="line">    [peron test1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第-3-个阶段-自由派发"><a href="#第-3-个阶段-自由派发" class="headerlink" title="第 3 个阶段 - 自由派发"></a>第 3 个阶段 - 自由派发</h2><blockquote><p>在这个阶段是最后一次机会，也是最强大的一步，因为在这里我们可以任意的转发给其他对象，而且可以转发给多个其他对象，从而我们可以为 Objective-C 实现 <code>多重继承</code> 功能，如某一种动物继承了🐱和🐶，在这里就可以转发给🐱和🐶，同时拥有抓老鼠和看家的功能。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">// 返回 NSMethodSignature 对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface BMGood : NSObject</span><br><span class="line">@end</span><br><span class="line">@implementation BMGood</span><br><span class="line">- (void)test1BMGood &#123;</span><br><span class="line">    NSLog(@&quot;BMGood test1BMGood&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface BMPerson : NSObject</span><br><span class="line">- (void)test1;</span><br><span class="line">@end</span><br><span class="line">@implementation BMPerson</span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, NSStringFromSelector(aSelector));</span><br><span class="line">    SEL selector = @selector(test1BMGood);</span><br><span class="line">    // 创建NSMethodSignature</span><br><span class="line">    BMGood *target =  BMGood.new;</span><br><span class="line">    NSMethodSignature *signature = [target methodSignatureForSelector:selector];</span><br><span class="line">    // 创建NSInvocation</span><br><span class="line">    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];</span><br><span class="line">    // 设置target</span><br><span class="line">    invocation.target = target;</span><br><span class="line">    // 设置SEL</span><br><span class="line">    invocation.selector = selector;</span><br><span class="line">    // 开始调用</span><br><span class="line">    [invocation invoke];</span><br><span class="line">    return signature;</span><br><span class="line">&#125;</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, anInvocation);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    BMPerson *peron = BMPerson.new;</span><br><span class="line">    [peron test1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="崩溃阶段"><a href="#崩溃阶段" class="headerlink" title="崩溃阶段"></a>崩溃阶段</h2><blockquote><p>如果在上面的 3 步都没挽救，那么系统会调用 <code>doesNotRecognizeSelector</code> 方法来输出崩溃的日志信息.</p></blockquote><h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><blockquote><p>由上面的简单分析，我们在调用没有实现的方法到崩溃经过了 </p></blockquote><ul><li><code>方法查找</code> </li><li><code>动态方法解析</code> </li><li><code>转发</code> </li><li><code>自由派发</code> </li><li><code>崩溃</code> </li></ul><blockquote><p>5 个过程，我们可以在 2 3 4 中拦截这个崩溃的产生。</p></blockquote><ul><li><a href="https://github.com/liangdahong/resolve-Demo" target="_blank" rel="noopener">完整DEMO</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Objective-C 下所有的方法调用都可以理解为，消息。一个对象接收到消息后，处理流程如下：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 运行时之消息转发机制</title>
    <link href="https://liangdahong.com/2018/12/28/iOS-%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B9%8B%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>https://liangdahong.com/2018/12/28/iOS-运行时之消息转发机制/</id>
    <published>2018-12-28T02:00:53.000Z</published>
    <updated>2019-10-18T08:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Objective-C 下所有的方法调用都可以理解为，消息。一个对象接收到消息后，处理流程如下：</p></blockquote><a id="more"></a><ul><li>通过 NSObject 的 isa 指针找到对应的 Class</li><li>在方法缓存中查找 SEL</li><li>在 Class 的方法列表中找到对应的 SEL</li><li>如果没有继续往父类中找</li></ul><blockquote><p>在常规的操作中，如果我们调用一个没有实现的方法时，一直找到 root class  时都没找到方法实现时，崩溃。</p></blockquote><hr><blockquote><p>那么在没有查到实现的方法时系统是否做了其他的操作呢？或者我们有什么办法来防止程序崩溃吗 ？这就是本文的主题 <code>消息转发机制</code>.</p></blockquote><hr><blockquote><p>如下的流程图清晰的描述了具体过程。</p></blockquote><p><img src="http://www.enkichen.com/uploads/forwardflow.png" alt=""></p><ul><li>总结为 3 个阶段可以补救。</li></ul><h2 id="第-1-个阶段-动态方法解析"><a href="#第-1-个阶段-动态方法解析" class="headerlink" title="第 1 个阶段 - 动态方法解析"></a>第 1 个阶段 - 动态方法解析</h2><blockquote><p>在动态方法解析阶段，在该阶段中，我们可以动态的为类添加一个方法，从而让动态添加的方法来处理之前未能处理的消息，具体是在下面的方法中动态添加方法同上返回 YES，那么系统就会重给对象发送刚才的消息来执行执行。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line"> // 动态添加方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &lt;objc/runtime.h&gt;</span><br><span class="line"></span><br><span class="line">void test1test1(id self, SEL _cmd) &#123;</span><br><span class="line">    NSLog(@&quot;test1test1 %@ %@&quot;, NSStringFromSelector(_cmd) ,self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@interface BMPerson : NSObject</span><br><span class="line">- (void)test1;</span><br><span class="line">@end</span><br><span class="line">@implementation BMPerson</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, NSStringFromSelector(sel));</span><br><span class="line">    class_addMethod(BMPerson.class, NSSelectorFromString(@&quot;test1&quot;), (IMP) test1test1, NULL);</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    BMPerson *peron = BMPerson.new;</span><br><span class="line">    [peron test1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第-2-个阶段-转发"><a href="#第-2-个阶段-转发" class="headerlink" title="第 2 个阶段 - 转发"></a>第 2 个阶段 - 转发</h2><blockquote><p>在这个阶段系统是要求我们给他返回一个可以正常响应次消息的对象，系统就会把刚才的消息转发给开发者返回的对象，让新的对象去消息响应的消息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line"> // 然后可以响应消息的对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface BMGood : NSObject</span><br><span class="line">@end</span><br><span class="line">@implementation BMGood</span><br><span class="line">- (void)test1 &#123;</span><br><span class="line">    NSLog(@&quot;BMGood test1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface BMPerson : NSObject</span><br><span class="line">- (void)test1;</span><br><span class="line">@end</span><br><span class="line">@implementation BMPerson</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    return BMGood.new;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    BMPerson *peron = BMPerson.new;</span><br><span class="line">    [peron test1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第-3-个阶段-自由派发"><a href="#第-3-个阶段-自由派发" class="headerlink" title="第 3 个阶段 - 自由派发"></a>第 3 个阶段 - 自由派发</h2><blockquote><p>在这个阶段是最后一次机会，也是最强大的一步，因为在这里我们可以任意的转发给其他对象，而且可以转发给多个其他对象，从而我们可以为 Objective-C 实现 <code>多重继承</code> 功能，如某一种动物继承了🐱和🐶，在这里就可以转发给🐱和🐶，同时拥有抓老鼠和看家的功能。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">// 返回 NSMethodSignature 对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface BMGood : NSObject</span><br><span class="line">@end</span><br><span class="line">@implementation BMGood</span><br><span class="line">- (void)test1BMGood &#123;</span><br><span class="line">    NSLog(@&quot;BMGood test1BMGood&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface BMPerson : NSObject</span><br><span class="line">- (void)test1;</span><br><span class="line">@end</span><br><span class="line">@implementation BMPerson</span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, NSStringFromSelector(aSelector));</span><br><span class="line">    SEL selector = @selector(test1BMGood);</span><br><span class="line">    // 创建NSMethodSignature</span><br><span class="line">    BMGood *target =  BMGood.new;</span><br><span class="line">    NSMethodSignature *signature = [target methodSignatureForSelector:selector];</span><br><span class="line">    // 创建NSInvocation</span><br><span class="line">    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];</span><br><span class="line">    // 设置target</span><br><span class="line">    invocation.target = target;</span><br><span class="line">    // 设置SEL</span><br><span class="line">    invocation.selector = selector;</span><br><span class="line">    // 开始调用</span><br><span class="line">    [invocation invoke];</span><br><span class="line">    return signature;</span><br><span class="line">&#125;</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, anInvocation);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    BMPerson *peron = BMPerson.new;</span><br><span class="line">    [peron test1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="崩溃阶段"><a href="#崩溃阶段" class="headerlink" title="崩溃阶段"></a>崩溃阶段</h2><blockquote><p>如果在上面的 3 步都没挽救，那么系统会调用 <code>doesNotRecognizeSelector</code> 方法来输出崩溃的日志信息.</p></blockquote><h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><blockquote><p>由上面的简单分析，我们在调用没有实现的方法到崩溃经过了 </p></blockquote><ul><li><code>方法查找</code> </li><li><code>动态方法解析</code> </li><li><code>转发</code> </li><li><code>自由派发</code> </li><li><code>崩溃</code> </li></ul><blockquote><p>5 个过程，我们可以在 2 3 4 中拦截这个崩溃的产生。</p></blockquote><ul><li><a href="https://github.com/liangdahong/resolve-Demo" target="_blank" rel="noopener">完整DEMO</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Objective-C 下所有的方法调用都可以理解为，消息。一个对象接收到消息后，处理流程如下：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSPatch简单分析1</title>
    <link href="https://liangdahong.com/2018/10/19/2018/JSPatch%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%901/"/>
    <id>https://liangdahong.com/2018/10/19/2018/JSPatch简单分析1/</id>
    <published>2018-10-19T01:01:29.000Z</published>
    <updated>2018-10-19T01:46:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><ul><li><a href="https://github.com/bang590/JSPatch" target="_blank" rel="noopener">https://github.com/bang590/JSPatch</a></li></ul><blockquote><p>JSPatch 是一个基于 JavaScriptCore 的开源项目，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 实时修复线上 bug。</p></blockquote><a id="more"></a><h3 id="JavaScriptCore初探"><a href="#JavaScriptCore初探" class="headerlink" title="JavaScriptCore初探"></a>JavaScriptCore初探</h3><ul><li><a href="https://hjgitbook.gitbooks.io/ios/content/04-technical-research/04-javascriptcore-note.html" target="_blank" rel="noopener">本段参考来自</a></li></ul><blockquote><p>注：JavaScriptCore API也可以用Swift来调用，本文用Objective-C来介绍。</p></blockquote><ul><li><p>在iOS7之前，原生应用和Web应用之间很难通信。如果你想在iOS设备上渲染HTML或者运行JavaScript，你不得不使用UIWebView。iOS7引入了JavaScriptCore，功能更强大，使用更简单。</p></li><li><p>JavaScriptCore是封装了JavaScript和Objective-C桥接的Objective-C API，只要用很少的代码，就可以做到JavaScript调用Objective-C，或者Objective-C调用JavaScript。</p></li><li><p>在之前的iOS版本，你只能通过向UIWebView发送stringByEvaluatingJavaScriptFromString:消息来执行一段JavaScript脚本。并且如果想用JavaScript调用Objective-C，必须打开一个自定义的URL（例如：foo://），然后在UIWebView的delegate方法webView:shouldStartLoadWithRequest:navigationType中进行处理。</p></li><li><p>然而现在可以利用JavaScriptCore的先进功能了，它可以：</p></li><li><ul><li>运行JavaScript脚本而不需要依赖UIWebView</li></ul></li><li><ul><li>使用现代Objective-C的语法（例如Blocks和下标）</li></ul></li><li><ul><li>在Objective-C和JavaScript之间无缝的传递值或者对象</li></ul></li><li><ul><li>创建混合对象（原生对象可以将JavaScript值或函数作为一个属性）</li></ul></li></ul><h3 id="使用-JavaScriptCore-做-JavaScript-和-OC-之间的相互调用的2个小例子"><a href="#使用-JavaScriptCore-做-JavaScript-和-OC-之间的相互调用的2个小例子" class="headerlink" title="使用 JavaScriptCore 做 JavaScript 和 OC 之间的相互调用的2个小例子"></a>使用 JavaScriptCore 做 JavaScript 和 OC 之间的相互调用的2个小例子</h3><h4 id="Objective-C调用JavaScript"><a href="#Objective-C调用JavaScript" class="headerlink" title="Objective-C调用JavaScript"></a>Objective-C调用JavaScript</h4><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [[JSContext alloc] init];</span><br><span class="line">NSString *str = @<span class="string">"(1*(2-2)+1)*5*8-2+9"</span>;</span><br><span class="line">JSValue *value =  [context evaluateScript:str];</span><br><span class="line">NSLog(@<span class="string">"%@ = %@"</span>, str,value.toNumber);</span><br></pre></td></tr></table></figure><h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [[JSContext alloc] init];</span><br><span class="line">NSString *jsfunc = @<span class="string">"function fac(n)&#123; return (n * 2);&#125;"</span>;</span><br><span class="line">[context evaluateScript:jsfunc];</span><br><span class="line">JSValue *func = context[@<span class="string">"fac"</span>];</span><br><span class="line">JSValue *value1 = [func callWithArguments:@[@<span class="number">100</span>]];</span><br><span class="line">NSLog(@<span class="string">"%@"</span>,value1.toNumber);</span><br></pre></td></tr></table></figure><h4 id="JavaScript调用Objective-C"><a href="#JavaScript调用Objective-C" class="headerlink" title="JavaScript调用Objective-C"></a>JavaScript调用Objective-C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [[JSContext alloc] init];</span><br><span class="line">[context evaluateScript:@<span class="string">"function printHello() &#123;print(\"Hello, World! 我在 JS 中 来的\");&#125;"</span>];</span><br><span class="line">context[@<span class="string">"print"</span>] = ^(NSString *text) &#123;</span><br><span class="line">    NSLog(@<span class="string">"%@"</span>, text);</span><br><span class="line">&#125;;</span><br><span class="line">JSValue *function = context[@<span class="string">"printHello"</span>];</span><br><span class="line">[function callWithArguments:@[]];</span><br></pre></td></tr></table></figure><blockquote><p>知道了 JavaScriptCore 的强大之处，又由于 JavaScript 是脚本语言同时 OC 的动态语言，所以 JSPatch 就诞生了。</p></blockquote><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><ul><li><a href="https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3" target="_blank" rel="noopener">参考来自 JSPatch 实现原理详解</a></li></ul><ul><li>我们从 JSPatch 例子开始看，比如：我们使用了下面的 js 来动态创建一个view</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require('UIView')</span><br><span class="line">var view = UIView.alloc().init()</span><br><span class="line">view.setBackgroundColor(require('UIColor').grayColor())</span><br><span class="line">view.setAlpha(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><ul><li>当我们在 oc 中执行上面的 js 时，</li><li>require(‘UIView’) 是调用 js 中的一个方法 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var _require = function(clsName) &#123;</span><br><span class="line">  if (!global[clsName]) &#123;</span><br><span class="line">    global[clsName] = &#123;</span><br><span class="line">      __clsName: clsName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  return global[clsName]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>var view = UIView.alloc().init() 表示使用 UIView 调用  alloc init 方法，那么我们的 js 中其实是没有 这2 个方法的，但如果没有的话会报错，开发者开始想的办法动态给 js 添加，因为 js 可以随时随地增加方法，但比较痛苦。因为这些方法其实是来自于 oc 中  需要我们去遍历 oc 。由于 js 没有方法转发的功能，最后用了一个精巧的解决这个问题，在每一个 js 发放调用前先调一个 js 已经实现好的方法 __c（），其实现如下图。在这个js方法中做处理，同时想办法回调到 oc 中做应该做的事。使用上面的 js 就会最后回调到吗oc 中创建一个 view 设置颜色等。</li></ul><ul><li>动添加 __c 的调用如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *formatedScript = [NSString stringWithFormat:@<span class="string">";(function()&#123;try&#123;\n%@\n&#125;catch(e)&#123;_OC_catch(e.message, e.stack)&#125;&#125;)();"</span>,</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">;(function()&#123;<span class="keyword">try</span>&#123;</span><br><span class="line">defineClass('JPViewController', &#123;</span><br><span class="line">  handleBtn: function(sender) &#123;</span><br><span class="line">    var tableViewCtrl = JPTableViewController.__c(<span class="string">"alloc"</span>)().__c(<span class="string">"init"</span>)()</span><br><span class="line">    self.__c(<span class="string">"navigationController"</span>)().__c(<span class="string">"pushViewController_animated"</span>)(tableViewCtrl, YES)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineClass('JPTableViewController : UITableViewController &lt;UIAlertViewDelegate&gt;', ['data'], &#123;</span><br><span class="line">  dataSource: function() &#123;</span><br><span class="line">    var data = self.__c(<span class="string">"data"</span>)();</span><br><span class="line">    <span class="keyword">if</span> (data) <span class="keyword">return</span> data;</span><br><span class="line">    var data = [];</span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i ++) &#123;</span><br><span class="line">      data.__c(<span class="string">"push"</span>)(<span class="string">"cell from js "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    self.__c(<span class="string">"setData"</span>)(data)</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;,</span><br><span class="line">  numberOfSectionsInTableView: function(tableView) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_numberOfRowsInSection: function(tableView, section) &#123;</span><br><span class="line">    <span class="keyword">return</span> self.__c(<span class="string">"dataSource"</span>)().length;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_cellForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    var cell = tableView.__c(<span class="string">"dequeueReusableCellWithIdentifier"</span>)(<span class="string">"cell"</span>) </span><br><span class="line">    <span class="keyword">if</span> (!cell) &#123;</span><br><span class="line">      cell = require('UITableViewCell').__c("alloc")().__c("initWithStyle_reuseIdentifier")(0, "cell")</span><br><span class="line">    &#125;</span><br><span class="line">    cell.__c(<span class="string">"textLabel"</span>)().__c(<span class="string">"setText"</span>)(self.__c(<span class="string">"dataSource"</span>)()[indexPath.__c(<span class="string">"row"</span>)()])</span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_heightForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">60</span></span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">     var alertView = require('UIAlertView').__c("alloc")().__c("initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles")("Alert",self.__c("dataSource")()[indexPath.__c("row")()], self, "OK",  null);</span><br><span class="line">     alertView.__c(<span class="string">"show"</span>)()</span><br><span class="line">  &#125;,</span><br><span class="line">  alertView_willDismissWithButtonIndex: function(alertView, idx) &#123;</span><br><span class="line">    console.__c("log")('click btn ' + alertView.__c("buttonTitleAtIndex")(idx).__c("toJS")())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;_OC_catch(e.message, e.<span class="built_in">stack</span>)&#125;&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var _customMethods = &#123;</span><br><span class="line">__c: function(methodName) &#123;</span><br><span class="line">  var slf = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (slf instanceof Boolean) &#123;</span><br><span class="line">    <span class="keyword">return</span> function() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (slf[methodName]) &#123;</span><br><span class="line">    <span class="keyword">return</span> slf[methodName].bind(slf);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!slf.__obj &amp;&amp; !slf.__clsName) &#123;</span><br><span class="line">    throw new Error(slf + '.' + methodName + ' is undefined')</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>JSPatch 的最基本的操作底层原理就是依靠 js 和 oc 的相互调用来实现的，同时 JavaScriptCore 可以做到 oc 对象 在 oc 和 js 组件无缝传递。</li></ul><ul><li>下面简单说下 JSPatch 是怎么样做到动态添加方法  和 交换方法的。我们使用 runtime 来添加方法 一般是提前已经有了  C函数的实现，我们在添加时，让 IMP 指向我们的 c函数指针即可，但是 JSPatch 是完全动态的添加任何类型的方法，怎么做到呢？？ 肯定不可能我们提前就实现好了  c函数，这里开发者是使用了一个通用的 c函数来实现这个问题，就是 所有添加的方法 其实都是执行到了写死的 c函数中，c函数如下，当然做了各种的坑处理，包括各种参数匹配，</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JPForwardInvocation</span><span class="params">(__unsafe_unretained id assignSlf, SEL selector, NSInvocation *invocation)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">    _JSLastCallStack = [NSThread callStackSymbols];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    BOOL deallocFlag = NO;</span><br><span class="line">    id slf = assignSlf;</span><br><span class="line">    BOOL isBlock = [[assignSlf class] isSubclassOfClass : NSClassFromString(@<span class="string">"NSBlock"</span>)];</span><br><span class="line">    </span><br><span class="line">    NSMethodSignature *methodSignature = [invocation methodSignature];</span><br><span class="line">    NSInteger numberOfArguments = [methodSignature numberOfArguments];</span><br><span class="line">    NSString *selectorName = isBlock ? @<span class="string">""</span> : NSStringFromSelector(invocation.selector);</span><br><span class="line">    NSString *JPSelectorName = [NSString stringWithFormat:@<span class="string">"_JP%@"</span>, selectorName];</span><br><span class="line">    JSValue *jsFunc = isBlock ? objc_getAssociatedObject(assignSlf, <span class="string">"_JSValue"</span>)[@<span class="string">"cb"</span>] : getJSFunctionInObjectHierachy(slf, JPSelectorName);</span><br><span class="line">    <span class="keyword">if</span> (!jsFunc) &#123;</span><br><span class="line">        JPExecuteORIGForwardInvocation(slf, selector, invocation);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *argList = [[NSMutableArray alloc] init];</span><br><span class="line">    <span class="keyword">if</span> (!isBlock) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([slf class] == slf) &#123;</span><br><span class="line">            [argList addObject:[JSValue valueWithObject:@&#123;@<span class="string">"__clsName"</span>: NSStringFromClass([slf class])&#125; inContext:_context]];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([selectorName isEqualToString:@<span class="string">"dealloc"</span>]) &#123;</span><br><span class="line">            [argList addObject:[JPBoxing boxAssignObj:slf]];</span><br><span class="line">            deallocFlag = YES;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [argList addObject:[JPBoxing boxWeakObj:slf]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (NSUInteger i = isBlock ? <span class="number">1</span> : <span class="number">2</span>; i &lt; numberOfArguments; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *argumentType = [methodSignature getArgumentTypeAtIndex:i];</span><br><span class="line">        <span class="keyword">switch</span>(argumentType[<span class="number">0</span>] == <span class="string">'r'</span> ? argumentType[<span class="number">1</span>] : argumentType[<span class="number">0</span>]) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_ARG_CASE(_typeChar, _type) \</span></span><br><span class="line">            <span class="keyword">case</span> _typeChar: &#123;   \</span><br><span class="line">                _type arg;  \</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];    \</span><br><span class="line">                [argList addObject:@(arg)]; \</span><br><span class="line">                <span class="keyword">break</span>;  \</span><br><span class="line">            &#125;</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'c'</span>, <span class="keyword">char</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'C'</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'s'</span>, <span class="keyword">short</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'S'</span>, <span class="keyword">unsigned</span> <span class="keyword">short</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'i'</span>, <span class="keyword">int</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'I'</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'l'</span>, <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'L'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'q'</span>, <span class="keyword">long</span> <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'Q'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'f'</span>, <span class="keyword">float</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'d'</span>, <span class="keyword">double</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'B'</span>, BOOL)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'@'</span>: &#123;</span><br><span class="line">                __unsafe_unretained id arg;</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];</span><br><span class="line">                <span class="keyword">if</span> ([arg isKindOfClass:NSClassFromString(@<span class="string">"NSBlock"</span>)]) &#123;</span><br><span class="line">                    [argList addObject:(arg ? [arg copy]: _nilObj)];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    [argList addObject:(arg ? arg: _nilObj)];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>: &#123;</span><br><span class="line">                NSString *typeString = extractStructName([NSString stringWithUTF8String:argumentType]);</span><br><span class="line">                <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_ARG_STRUCT(_type, _transFunc) \</span></span><br><span class="line">                <span class="keyword">if</span> ([typeString rangeOfString:@#_type].location != NSNotFound) &#123;    \</span><br><span class="line">                    _type arg; \</span><br><span class="line">                    [invocation getArgument:&amp;arg atIndex:i];    \</span><br><span class="line">                    [argList addObject:[JSValue _transFunc:arg inContext:_context]];  \</span><br><span class="line">                    <span class="keyword">break</span>; \</span><br><span class="line">                &#125;</span><br><span class="line">                JP_FWD_ARG_STRUCT(CGRect, valueWithRect)</span><br><span class="line">                JP_FWD_ARG_STRUCT(CGPoint, valueWithPoint)</span><br><span class="line">                JP_FWD_ARG_STRUCT(CGSize, valueWithSize)</span><br><span class="line">                JP_FWD_ARG_STRUCT(NSRange, valueWithRange)</span><br><span class="line">                </span><br><span class="line">                @synchronized (_context) &#123;</span><br><span class="line">                    NSDictionary *structDefine = _registeredStruct[typeString];</span><br><span class="line">                    <span class="keyword">if</span> (structDefine) &#123;</span><br><span class="line">                        <span class="keyword">size_t</span> size = sizeOfStructTypes(structDefine[@<span class="string">"types"</span>]);</span><br><span class="line">                        <span class="keyword">if</span> (size) &#123;</span><br><span class="line">                            <span class="keyword">void</span> *ret = <span class="built_in">malloc</span>(size);</span><br><span class="line">                            [invocation getArgument:ret atIndex:i];</span><br><span class="line">                            NSDictionary *dict = getDictOfStruct(ret, structDefine);</span><br><span class="line">                            [argList addObject:[JSValue valueWithObject:dict inContext:_context]];</span><br><span class="line">                            <span class="built_in">free</span>(ret);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">':'</span>: &#123;</span><br><span class="line">                SEL selector;</span><br><span class="line">                [invocation getArgument:&amp;selector atIndex:i];</span><br><span class="line">                NSString *selectorName = NSStringFromSelector(selector);</span><br><span class="line">                [argList addObject:(selectorName ? selectorName: _nilObj)];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'^'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>: &#123;</span><br><span class="line">                <span class="keyword">void</span> *arg;</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];</span><br><span class="line">                [argList addObject:[JPBoxing boxPointer:arg]];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'#'</span>: &#123;</span><br><span class="line">                Class arg;</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];</span><br><span class="line">                [argList addObject:[JPBoxing boxClass:arg]];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                NSLog(@<span class="string">"error type %s"</span>, argumentType);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_currInvokeSuperClsName[selectorName]) &#123;</span><br><span class="line">        Class cls = NSClassFromString(_currInvokeSuperClsName[selectorName]);</span><br><span class="line">        NSString *tmpSelectorName = [[selectorName stringByReplacingOccurrencesOfString:@<span class="string">"_JPSUPER_"</span> withString:@<span class="string">"_JP"</span>] stringByReplacingOccurrencesOfString:@<span class="string">"SUPER_"</span> withString:@<span class="string">"_JP"</span>];</span><br><span class="line">        <span class="keyword">if</span> (!_JSOverideMethods[cls][tmpSelectorName]) &#123;</span><br><span class="line">            NSString *ORIGSelectorName = [selectorName stringByReplacingOccurrencesOfString:@<span class="string">"SUPER_"</span> withString:@<span class="string">"ORIG"</span>];</span><br><span class="line">            [argList removeObjectAtIndex:<span class="number">0</span>];</span><br><span class="line">            id retObj = callSelector(_currInvokeSuperClsName[selectorName], ORIGSelectorName, [JSValue valueWithObject:argList inContext:_context], [JSValue valueWithObject:@&#123;@<span class="string">"__obj"</span>: slf, @<span class="string">"__realClsName"</span>: @<span class="string">""</span>&#125; inContext:_context], NO);</span><br><span class="line">            id __autoreleasing ret = formatJSToOC([JSValue valueWithObject:retObj inContext:_context]);</span><br><span class="line">            [invocation setReturnValue:&amp;ret];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSArray *params = _formatOCToJSList(argList);</span><br><span class="line">    <span class="keyword">char</span> returnType[<span class="number">255</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(returnType, [methodSignature methodReturnType]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Restore the return type</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(returnType, @encode(JPDouble)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(returnType, @encode(<span class="keyword">double</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(returnType, @encode(JPFloat)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(returnType, @encode(<span class="keyword">float</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (returnType[<span class="number">0</span>] == <span class="string">'r'</span> ? returnType[<span class="number">1</span>] : returnType[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CALL_JS \</span></span><br><span class="line">            JSValue *jsval; \</span><br><span class="line">            [_JSMethodForwardCallLock lock];   \</span><br><span class="line">            jsval = [jsFunc callWithArguments:params]; \</span><br><span class="line">            [_JSMethodForwardCallLock unlock]; \</span><br><span class="line">            <span class="keyword">while</span> (![jsval isNull] &amp;&amp; ![jsval isUndefined] &amp;&amp; [jsval hasProperty:@<span class="string">"__isPerformInOC"</span>]) &#123; \</span><br><span class="line">                NSArray *args = nil;  \</span><br><span class="line">                JSValue *cb = jsval[@<span class="string">"cb"</span>]; \</span><br><span class="line">                <span class="keyword">if</span> ([jsval hasProperty:@<span class="string">"sel"</span>]) &#123;   \</span><br><span class="line">                    id callRet = callSelector(![jsval[@<span class="string">"clsName"</span>] isUndefined] ? [jsval[@<span class="string">"clsName"</span>] toString] : nil, [jsval[@<span class="string">"sel"</span>] toString], jsval[@<span class="string">"args"</span>], ![jsval[@<span class="string">"obj"</span>] isUndefined] ? jsval[@<span class="string">"obj"</span>] : nil, NO);  \</span><br><span class="line">                    args = @[[_context[@<span class="string">"_formatOCToJS"</span>] callWithArguments:callRet ? @[callRet] : _formatOCToJSList(@[_nilObj])]];  \</span><br><span class="line">                &#125;   \</span><br><span class="line">                [_JSMethodForwardCallLock lock];    \</span><br><span class="line">                jsval = [cb callWithArguments:args];  \</span><br><span class="line">                [_JSMethodForwardCallLock unlock];  \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CASE_RET(_typeChar, _type, _retCode)   \</span></span><br><span class="line">            <span class="keyword">case</span> _typeChar : &#123; \</span><br><span class="line">                JP_FWD_RET_CALL_JS \</span><br><span class="line">                _retCode \</span><br><span class="line">                [invocation setReturnValue:&amp;ret];\</span><br><span class="line">                <span class="keyword">break</span>;  \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CASE(_typeChar, _type, _typeSelector)   \</span></span><br><span class="line">            JP_FWD_RET_CASE_RET(_typeChar, _type, _type ret = [[jsval toObject] _typeSelector];)   \</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_ID \</span></span><br><span class="line">            id __autoreleasing ret = formatJSToOC(jsval); \</span><br><span class="line">            <span class="keyword">if</span> (ret == _nilObj ||   \</span><br><span class="line">                ([ret isKindOfClass:[NSNumber class]] &amp;&amp; <span class="built_in">strcmp</span>([ret objCType], <span class="string">"c"</span>) == <span class="number">0</span> &amp;&amp; ![ret boolValue])) ret = nil;  \</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_POINTER    \</span></span><br><span class="line">            <span class="keyword">void</span> *ret; \</span><br><span class="line">            id obj = formatJSToOC(jsval); \</span><br><span class="line">            <span class="keyword">if</span> ([obj isKindOfClass:[JPBoxing class]]) &#123; \</span><br><span class="line">                ret = [((JPBoxing *)obj) unboxPointer]; \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_CLASS    \</span></span><br><span class="line">            Class ret;   \</span><br><span class="line">            ret = formatJSToOC(jsval);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_SEL    \</span></span><br><span class="line">            SEL ret;   \</span><br><span class="line">            id obj = formatJSToOC(jsval); \</span><br><span class="line">            <span class="keyword">if</span> ([obj isKindOfClass:[NSString class]]) &#123; \</span><br><span class="line">                ret = NSSelectorFromString(obj); \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'@'</span>, id, JP_FWD_RET_CODE_ID)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'^'</span>, <span class="keyword">void</span>*, JP_FWD_RET_CODE_POINTER)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'*'</span>, <span class="keyword">void</span>*, JP_FWD_RET_CODE_POINTER)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'#'</span>, Class, JP_FWD_RET_CODE_CLASS)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">':'</span>, SEL, JP_FWD_RET_CODE_SEL)</span><br><span class="line"></span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'c'</span>, <span class="keyword">char</span>, charValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'C'</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span>, unsignedCharValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'s'</span>, <span class="keyword">short</span>, shortValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'S'</span>, <span class="keyword">unsigned</span> <span class="keyword">short</span>, unsignedShortValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'i'</span>, <span class="keyword">int</span>, intValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'I'</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>, unsignedIntValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'l'</span>, <span class="keyword">long</span>, longValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'L'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, unsignedLongValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'q'</span>, <span class="keyword">long</span> <span class="keyword">long</span>, longLongValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'Q'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>, unsignedLongLongValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'f'</span>, <span class="keyword">float</span>, floatValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'d'</span>, <span class="keyword">double</span>, doubleValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'B'</span>, BOOL, boolValue)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'v'</span>: &#123;</span><br><span class="line">            JP_FWD_RET_CALL_JS</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#123;'</span>: &#123;</span><br><span class="line">            NSString *typeString = extractStructName([NSString stringWithUTF8String:returnType]);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_STRUCT(_type, _funcSuffix) \</span></span><br><span class="line">            <span class="keyword">if</span> ([typeString rangeOfString:@#_type].location != NSNotFound) &#123;    \</span><br><span class="line">                JP_FWD_RET_CALL_JS \</span><br><span class="line">                _type ret = [jsval _funcSuffix]; \</span><br><span class="line">                [invocation setReturnValue:&amp;ret];\</span><br><span class="line">                <span class="keyword">break</span>;  \</span><br><span class="line">            &#125;</span><br><span class="line">            JP_FWD_RET_STRUCT(CGRect, toRect)</span><br><span class="line">            JP_FWD_RET_STRUCT(CGPoint, toPoint)</span><br><span class="line">            JP_FWD_RET_STRUCT(CGSize, toSize)</span><br><span class="line">            JP_FWD_RET_STRUCT(NSRange, toRange)</span><br><span class="line">            </span><br><span class="line">            @synchronized (_context) &#123;</span><br><span class="line">                NSDictionary *structDefine = _registeredStruct[typeString];</span><br><span class="line">                <span class="keyword">if</span> (structDefine) &#123;</span><br><span class="line">                    <span class="keyword">size_t</span> size = sizeOfStructTypes(structDefine[@<span class="string">"types"</span>]);</span><br><span class="line">                    JP_FWD_RET_CALL_JS</span><br><span class="line">                    <span class="keyword">void</span> *ret = <span class="built_in">malloc</span>(size);</span><br><span class="line">                    NSDictionary *dict = formatJSToOC(jsval);</span><br><span class="line">                    getStructDataWithDict(ret, dict, structDefine);</span><br><span class="line">                    [invocation setReturnValue:ret];</span><br><span class="line">                    <span class="built_in">free</span>(ret);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_pointersToRelease) &#123;</span><br><span class="line">        <span class="keyword">for</span> (NSValue *val in _pointersToRelease) &#123;</span><br><span class="line">            <span class="keyword">void</span> *pointer = <span class="literal">NULL</span>;</span><br><span class="line">            [val getValue:&amp;pointer];</span><br><span class="line">            CFRelease(pointer);</span><br><span class="line">        &#125;</span><br><span class="line">        _pointersToRelease = nil;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (deallocFlag) &#123;</span><br><span class="line">        slf = nil;</span><br><span class="line">        Class instClass = object_getClass(assignSlf);</span><br><span class="line">        Method deallocMethod = class_getInstanceMethod(instClass, NSSelectorFromString(@<span class="string">"ORIGdealloc"</span>));</span><br><span class="line">        <span class="keyword">void</span> (*originalDealloc)(__unsafe_unretained id, SEL) = (__typeof__(originalDealloc))method_getImplementation(deallocMethod);</span><br><span class="line">        originalDealloc(assignSlf, NSSelectorFromString(@<span class="string">"dealloc"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平台使用"><a href="#平台使用" class="headerlink" title="平台使用"></a>平台使用</h2><ul><li><a href="https://github.com/bang590/JSPatch/wiki" target="_blank" rel="noopener">平台使用说明</a></li><li>如果使用其平台来做还是算简单的，基本不用做其他配置。</li></ul><h3 id="集成-SDK"><a href="#集成-SDK" class="headerlink" title="集成 SDK"></a>集成 SDK</h3><blockquote><p>一般情况的SDK的使用完全按照文档基本没有问题</p></blockquote><ul><li>在平台创建 APP</li><li>下载SDK集成到项目中</li><li>已经集成完毕</li><li>在需要修复 bug 时，先写好 js 脚本</li><li>本地测试</li><li>测试成功后，去平台下发即可。</li></ul><h3 id="平台-SDK-使用注意点："><a href="#平台-SDK-使用注意点：" class="headerlink" title="平台 SDK 使用注意点："></a>平台 SDK 使用注意点：</h3><ul><li>补丁累计不要超过 1 个</li><li>每一次 App 更新必须使用原生来处理掉所有的补丁，同时需要清除相应的补丁下载。</li><li>每一次下发补丁需提本地测试</li></ul><h2 id="自建平台"><a href="#自建平台" class="headerlink" title="自建平台"></a>自建平台</h2><ul><li><p><img src="http://www.10tiao.com/img.do?url=http%3A//mmbiz.qpic.cn/mmbiz_png/2iaHTl80iajP816eIm8wfzO5MeuIT0VlNtlJWH4Xy4Ioj7ib79tKzAiaDpqJkVM8kDn8nTjXpUUqRibRulJ9bic5DqXg/0%3Fwx_fmt%3Dpng" alt=""></p></li><li><p><a href="http://www.10tiao.com/html/655/201701/2650215152/1.html" target="_blank" rel="noopener">自建平台时需要处理的一些问题</a></p></li></ul><h2 id="拷贝下官方的一个-DEMO"><a href="#拷贝下官方的一个-DEMO" class="headerlink" title="拷贝下官方的一个 DEMO"></a>拷贝下官方的一个 DEMO</h2><ul><li>有一个最简单的控制器上有一个按钮，现在想加点功能，就是在点击这个按钮时跳转到一个新界面，新的界面上有一个 tableView，同时做相应的简单展示、</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;JPViewController.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation JPViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    UIButton *btn = [[UIButton alloc] initWithFrame:CGRectMake(0, 100, [UIScreen mainScreen].bounds.size.width, 50)];</span><br><span class="line">    [btn setTitle:@&quot;Push JPTableViewController&quot; forState:UIControlStateNormal];</span><br><span class="line">    [btn addTarget:self action:@selector(handleBtn:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [btn setBackgroundColor:[UIColor grayColor]];</span><br><span class="line">    [self.view addSubview:btn];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)handleBtn:(id)sender</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li>集成项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[JPEngine startEngine];</span><br><span class="line">NSString *sourcePath = [[NSBundle mainBundle] pathForResource:@&quot;demo&quot; ofType:@&quot;js&quot;];</span><br><span class="line">NSString *script = [NSString stringWithContentsOfFile:sourcePath encoding:NSUTF8StringEncoding error:nil];</span><br><span class="line">[JPEngine evaluateScript:script];</span><br></pre></td></tr></table></figure><ul><li>JS 脚本如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">defineClass(&apos;JPViewController&apos;, &#123;</span><br><span class="line">  handleBtn: function(sender) &#123;</span><br><span class="line">    var tableViewCtrl = JPTableViewController.alloc().init()</span><br><span class="line">    self.navigationController().pushViewController_animated(tableViewCtrl, YES)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineClass(&apos;JPTableViewController : UITableViewController &lt;UIAlertViewDelegate&gt;&apos;, [&apos;data&apos;], &#123;</span><br><span class="line">  dataSource: function() &#123;</span><br><span class="line">    var data = self.data();</span><br><span class="line">    if (data) return data;</span><br><span class="line">    var data = [];</span><br><span class="line">    for (var i = 0; i &lt; 20; i ++) &#123;</span><br><span class="line">      data.push(&quot;cell from js &quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">    self.setData(data)</span><br><span class="line">    return data;</span><br><span class="line">  &#125;,</span><br><span class="line">  numberOfSectionsInTableView: function(tableView) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_numberOfRowsInSection: function(tableView, section) &#123;</span><br><span class="line">    return self.dataSource().length;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_cellForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    var cell = tableView.dequeueReusableCellWithIdentifier(&quot;cell&quot;) </span><br><span class="line">    if (!cell) &#123;</span><br><span class="line">      cell = require(&apos;UITableViewCell&apos;).alloc().initWithStyle_reuseIdentifier(0, &quot;cell&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    cell.textLabel().setText(self.dataSource()[indexPath.row()])</span><br><span class="line">    return cell</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_heightForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    return 60</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">     var alertView = require(&apos;UIAlertView&apos;).alloc().initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles(&quot;Alert&quot;,self.dataSource()[indexPath.row()], self, &quot;OK&quot;,  null);</span><br><span class="line">     alertView.show()</span><br><span class="line">  &#125;,</span><br><span class="line">  alertView_willDismissWithButtonIndex: function(alertView, idx) &#123;</span><br><span class="line">    console.log(&apos;click btn &apos; + alertView.buttonTitleAtIndex(idx).toJS())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2026898-1c826218dc28ab68.gif?imageMogr2/auto-orient/strip" alt="1111.gif"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bang590/JSPatch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/bang590/JSPatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JSPatch 是一个基于 JavaScriptCore 的开源项目，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 实时修复线上 bug。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSPatch简单分析1</title>
    <link href="https://liangdahong.com/2018/10/19/JSPatch%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%901/"/>
    <id>https://liangdahong.com/2018/10/19/JSPatch简单分析1/</id>
    <published>2018-10-19T01:01:29.000Z</published>
    <updated>2019-10-18T08:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><ul><li><a href="https://github.com/bang590/JSPatch" target="_blank" rel="noopener">https://github.com/bang590/JSPatch</a></li></ul><blockquote><p>JSPatch 是一个基于 JavaScriptCore 的开源项目，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 实时修复线上 bug。</p></blockquote><a id="more"></a><h3 id="JavaScriptCore初探"><a href="#JavaScriptCore初探" class="headerlink" title="JavaScriptCore初探"></a>JavaScriptCore初探</h3><ul><li><a href="https://hjgitbook.gitbooks.io/ios/content/04-technical-research/04-javascriptcore-note.html" target="_blank" rel="noopener">本段参考来自</a></li></ul><blockquote><p>注：JavaScriptCore API也可以用Swift来调用，本文用Objective-C来介绍。</p></blockquote><ul><li><p>在iOS7之前，原生应用和Web应用之间很难通信。如果你想在iOS设备上渲染HTML或者运行JavaScript，你不得不使用UIWebView。iOS7引入了JavaScriptCore，功能更强大，使用更简单。</p></li><li><p>JavaScriptCore是封装了JavaScript和Objective-C桥接的Objective-C API，只要用很少的代码，就可以做到JavaScript调用Objective-C，或者Objective-C调用JavaScript。</p></li><li><p>在之前的iOS版本，你只能通过向UIWebView发送stringByEvaluatingJavaScriptFromString:消息来执行一段JavaScript脚本。并且如果想用JavaScript调用Objective-C，必须打开一个自定义的URL（例如：foo://），然后在UIWebView的delegate方法webView:shouldStartLoadWithRequest:navigationType中进行处理。</p></li><li><p>然而现在可以利用JavaScriptCore的先进功能了，它可以：</p></li><li><ul><li>运行JavaScript脚本而不需要依赖UIWebView</li></ul></li><li><ul><li>使用现代Objective-C的语法（例如Blocks和下标）</li></ul></li><li><ul><li>在Objective-C和JavaScript之间无缝的传递值或者对象</li></ul></li><li><ul><li>创建混合对象（原生对象可以将JavaScript值或函数作为一个属性）</li></ul></li></ul><h3 id="使用-JavaScriptCore-做-JavaScript-和-OC-之间的相互调用的2个小例子"><a href="#使用-JavaScriptCore-做-JavaScript-和-OC-之间的相互调用的2个小例子" class="headerlink" title="使用 JavaScriptCore 做 JavaScript 和 OC 之间的相互调用的2个小例子"></a>使用 JavaScriptCore 做 JavaScript 和 OC 之间的相互调用的2个小例子</h3><h4 id="Objective-C调用JavaScript"><a href="#Objective-C调用JavaScript" class="headerlink" title="Objective-C调用JavaScript"></a>Objective-C调用JavaScript</h4><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [[JSContext alloc] init];</span><br><span class="line">NSString *str = @<span class="string">"(1*(2-2)+1)*5*8-2+9"</span>;</span><br><span class="line">JSValue *value =  [context evaluateScript:str];</span><br><span class="line">NSLog(@<span class="string">"%@ = %@"</span>, str,value.toNumber);</span><br></pre></td></tr></table></figure><h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [[JSContext alloc] init];</span><br><span class="line">NSString *jsfunc = @<span class="string">"function fac(n)&#123; return (n * 2);&#125;"</span>;</span><br><span class="line">[context evaluateScript:jsfunc];</span><br><span class="line">JSValue *func = context[@<span class="string">"fac"</span>];</span><br><span class="line">JSValue *value1 = [func callWithArguments:@[@<span class="number">100</span>]];</span><br><span class="line">NSLog(@<span class="string">"%@"</span>,value1.toNumber);</span><br></pre></td></tr></table></figure><h4 id="JavaScript调用Objective-C"><a href="#JavaScript调用Objective-C" class="headerlink" title="JavaScript调用Objective-C"></a>JavaScript调用Objective-C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [[JSContext alloc] init];</span><br><span class="line">[context evaluateScript:@<span class="string">"function printHello() &#123;print(\"Hello, World! 我在 JS 中 来的\");&#125;"</span>];</span><br><span class="line">context[@<span class="string">"print"</span>] = ^(NSString *text) &#123;</span><br><span class="line">    NSLog(@<span class="string">"%@"</span>, text);</span><br><span class="line">&#125;;</span><br><span class="line">JSValue *function = context[@<span class="string">"printHello"</span>];</span><br><span class="line">[function callWithArguments:@[]];</span><br></pre></td></tr></table></figure><blockquote><p>知道了 JavaScriptCore 的强大之处，又由于 JavaScript 是脚本语言同时 OC 的动态语言，所以 JSPatch 就诞生了。</p></blockquote><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><ul><li><a href="https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3" target="_blank" rel="noopener">参考来自 JSPatch 实现原理详解</a></li></ul><ul><li>我们从 JSPatch 例子开始看，比如：我们使用了下面的 js 来动态创建一个view</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require('UIView')</span><br><span class="line">var view = UIView.alloc().init()</span><br><span class="line">view.setBackgroundColor(require('UIColor').grayColor())</span><br><span class="line">view.setAlpha(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><ul><li>当我们在 oc 中执行上面的 js 时，</li><li>require(‘UIView’) 是调用 js 中的一个方法 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var _require = function(clsName) &#123;</span><br><span class="line">  if (!global[clsName]) &#123;</span><br><span class="line">    global[clsName] = &#123;</span><br><span class="line">      __clsName: clsName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  return global[clsName]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>var view = UIView.alloc().init() 表示使用 UIView 调用  alloc init 方法，那么我们的 js 中其实是没有 这2 个方法的，但如果没有的话会报错，开发者开始想的办法动态给 js 添加，因为 js 可以随时随地增加方法，但比较痛苦。因为这些方法其实是来自于 oc 中  需要我们去遍历 oc 。由于 js 没有方法转发的功能，最后用了一个精巧的解决这个问题，在每一个 js 发放调用前先调一个 js 已经实现好的方法 __c（），其实现如下图。在这个js方法中做处理，同时想办法回调到 oc 中做应该做的事。使用上面的 js 就会最后回调到吗oc 中创建一个 view 设置颜色等。</li></ul><ul><li>动添加 __c 的调用如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *formatedScript = [NSString stringWithFormat:@<span class="string">";(function()&#123;try&#123;\n%@\n&#125;catch(e)&#123;_OC_catch(e.message, e.stack)&#125;&#125;)();"</span>,</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">;(function()&#123;<span class="keyword">try</span>&#123;</span><br><span class="line">defineClass('JPViewController', &#123;</span><br><span class="line">  handleBtn: function(sender) &#123;</span><br><span class="line">    var tableViewCtrl = JPTableViewController.__c(<span class="string">"alloc"</span>)().__c(<span class="string">"init"</span>)()</span><br><span class="line">    self.__c(<span class="string">"navigationController"</span>)().__c(<span class="string">"pushViewController_animated"</span>)(tableViewCtrl, YES)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineClass('JPTableViewController : UITableViewController &lt;UIAlertViewDelegate&gt;', ['data'], &#123;</span><br><span class="line">  dataSource: function() &#123;</span><br><span class="line">    var data = self.__c(<span class="string">"data"</span>)();</span><br><span class="line">    <span class="keyword">if</span> (data) <span class="keyword">return</span> data;</span><br><span class="line">    var data = [];</span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i ++) &#123;</span><br><span class="line">      data.__c(<span class="string">"push"</span>)(<span class="string">"cell from js "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    self.__c(<span class="string">"setData"</span>)(data)</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;,</span><br><span class="line">  numberOfSectionsInTableView: function(tableView) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_numberOfRowsInSection: function(tableView, section) &#123;</span><br><span class="line">    <span class="keyword">return</span> self.__c(<span class="string">"dataSource"</span>)().length;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_cellForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    var cell = tableView.__c(<span class="string">"dequeueReusableCellWithIdentifier"</span>)(<span class="string">"cell"</span>) </span><br><span class="line">    <span class="keyword">if</span> (!cell) &#123;</span><br><span class="line">      cell = require('UITableViewCell').__c("alloc")().__c("initWithStyle_reuseIdentifier")(0, "cell")</span><br><span class="line">    &#125;</span><br><span class="line">    cell.__c(<span class="string">"textLabel"</span>)().__c(<span class="string">"setText"</span>)(self.__c(<span class="string">"dataSource"</span>)()[indexPath.__c(<span class="string">"row"</span>)()])</span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_heightForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">60</span></span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">     var alertView = require('UIAlertView').__c("alloc")().__c("initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles")("Alert",self.__c("dataSource")()[indexPath.__c("row")()], self, "OK",  null);</span><br><span class="line">     alertView.__c(<span class="string">"show"</span>)()</span><br><span class="line">  &#125;,</span><br><span class="line">  alertView_willDismissWithButtonIndex: function(alertView, idx) &#123;</span><br><span class="line">    console.__c("log")('click btn ' + alertView.__c("buttonTitleAtIndex")(idx).__c("toJS")())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;_OC_catch(e.message, e.<span class="built_in">stack</span>)&#125;&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var _customMethods = &#123;</span><br><span class="line">__c: function(methodName) &#123;</span><br><span class="line">  var slf = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (slf instanceof Boolean) &#123;</span><br><span class="line">    <span class="keyword">return</span> function() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (slf[methodName]) &#123;</span><br><span class="line">    <span class="keyword">return</span> slf[methodName].bind(slf);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!slf.__obj &amp;&amp; !slf.__clsName) &#123;</span><br><span class="line">    throw new Error(slf + '.' + methodName + ' is undefined')</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>JSPatch 的最基本的操作底层原理就是依靠 js 和 oc 的相互调用来实现的，同时 JavaScriptCore 可以做到 oc 对象 在 oc 和 js 组件无缝传递。</li></ul><ul><li>下面简单说下 JSPatch 是怎么样做到动态添加方法  和 交换方法的。我们使用 runtime 来添加方法 一般是提前已经有了  C函数的实现，我们在添加时，让 IMP 指向我们的 c函数指针即可，但是 JSPatch 是完全动态的添加任何类型的方法，怎么做到呢？？ 肯定不可能我们提前就实现好了  c函数，这里开发者是使用了一个通用的 c函数来实现这个问题，就是 所有添加的方法 其实都是执行到了写死的 c函数中，c函数如下，当然做了各种的坑处理，包括各种参数匹配，</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JPForwardInvocation</span><span class="params">(__unsafe_unretained id assignSlf, SEL selector, NSInvocation *invocation)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">    _JSLastCallStack = [NSThread callStackSymbols];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    BOOL deallocFlag = NO;</span><br><span class="line">    id slf = assignSlf;</span><br><span class="line">    BOOL isBlock = [[assignSlf class] isSubclassOfClass : NSClassFromString(@<span class="string">"NSBlock"</span>)];</span><br><span class="line">    </span><br><span class="line">    NSMethodSignature *methodSignature = [invocation methodSignature];</span><br><span class="line">    NSInteger numberOfArguments = [methodSignature numberOfArguments];</span><br><span class="line">    NSString *selectorName = isBlock ? @<span class="string">""</span> : NSStringFromSelector(invocation.selector);</span><br><span class="line">    NSString *JPSelectorName = [NSString stringWithFormat:@<span class="string">"_JP%@"</span>, selectorName];</span><br><span class="line">    JSValue *jsFunc = isBlock ? objc_getAssociatedObject(assignSlf, <span class="string">"_JSValue"</span>)[@<span class="string">"cb"</span>] : getJSFunctionInObjectHierachy(slf, JPSelectorName);</span><br><span class="line">    <span class="keyword">if</span> (!jsFunc) &#123;</span><br><span class="line">        JPExecuteORIGForwardInvocation(slf, selector, invocation);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *argList = [[NSMutableArray alloc] init];</span><br><span class="line">    <span class="keyword">if</span> (!isBlock) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([slf class] == slf) &#123;</span><br><span class="line">            [argList addObject:[JSValue valueWithObject:@&#123;@<span class="string">"__clsName"</span>: NSStringFromClass([slf class])&#125; inContext:_context]];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([selectorName isEqualToString:@<span class="string">"dealloc"</span>]) &#123;</span><br><span class="line">            [argList addObject:[JPBoxing boxAssignObj:slf]];</span><br><span class="line">            deallocFlag = YES;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [argList addObject:[JPBoxing boxWeakObj:slf]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (NSUInteger i = isBlock ? <span class="number">1</span> : <span class="number">2</span>; i &lt; numberOfArguments; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *argumentType = [methodSignature getArgumentTypeAtIndex:i];</span><br><span class="line">        <span class="keyword">switch</span>(argumentType[<span class="number">0</span>] == <span class="string">'r'</span> ? argumentType[<span class="number">1</span>] : argumentType[<span class="number">0</span>]) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_ARG_CASE(_typeChar, _type) \</span></span><br><span class="line">            <span class="keyword">case</span> _typeChar: &#123;   \</span><br><span class="line">                _type arg;  \</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];    \</span><br><span class="line">                [argList addObject:@(arg)]; \</span><br><span class="line">                <span class="keyword">break</span>;  \</span><br><span class="line">            &#125;</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'c'</span>, <span class="keyword">char</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'C'</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'s'</span>, <span class="keyword">short</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'S'</span>, <span class="keyword">unsigned</span> <span class="keyword">short</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'i'</span>, <span class="keyword">int</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'I'</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'l'</span>, <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'L'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'q'</span>, <span class="keyword">long</span> <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'Q'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'f'</span>, <span class="keyword">float</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'d'</span>, <span class="keyword">double</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'B'</span>, BOOL)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'@'</span>: &#123;</span><br><span class="line">                __unsafe_unretained id arg;</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];</span><br><span class="line">                <span class="keyword">if</span> ([arg isKindOfClass:NSClassFromString(@<span class="string">"NSBlock"</span>)]) &#123;</span><br><span class="line">                    [argList addObject:(arg ? [arg copy]: _nilObj)];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    [argList addObject:(arg ? arg: _nilObj)];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>: &#123;</span><br><span class="line">                NSString *typeString = extractStructName([NSString stringWithUTF8String:argumentType]);</span><br><span class="line">                <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_ARG_STRUCT(_type, _transFunc) \</span></span><br><span class="line">                <span class="keyword">if</span> ([typeString rangeOfString:@#_type].location != NSNotFound) &#123;    \</span><br><span class="line">                    _type arg; \</span><br><span class="line">                    [invocation getArgument:&amp;arg atIndex:i];    \</span><br><span class="line">                    [argList addObject:[JSValue _transFunc:arg inContext:_context]];  \</span><br><span class="line">                    <span class="keyword">break</span>; \</span><br><span class="line">                &#125;</span><br><span class="line">                JP_FWD_ARG_STRUCT(CGRect, valueWithRect)</span><br><span class="line">                JP_FWD_ARG_STRUCT(CGPoint, valueWithPoint)</span><br><span class="line">                JP_FWD_ARG_STRUCT(CGSize, valueWithSize)</span><br><span class="line">                JP_FWD_ARG_STRUCT(NSRange, valueWithRange)</span><br><span class="line">                </span><br><span class="line">                @synchronized (_context) &#123;</span><br><span class="line">                    NSDictionary *structDefine = _registeredStruct[typeString];</span><br><span class="line">                    <span class="keyword">if</span> (structDefine) &#123;</span><br><span class="line">                        <span class="keyword">size_t</span> size = sizeOfStructTypes(structDefine[@<span class="string">"types"</span>]);</span><br><span class="line">                        <span class="keyword">if</span> (size) &#123;</span><br><span class="line">                            <span class="keyword">void</span> *ret = <span class="built_in">malloc</span>(size);</span><br><span class="line">                            [invocation getArgument:ret atIndex:i];</span><br><span class="line">                            NSDictionary *dict = getDictOfStruct(ret, structDefine);</span><br><span class="line">                            [argList addObject:[JSValue valueWithObject:dict inContext:_context]];</span><br><span class="line">                            <span class="built_in">free</span>(ret);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">':'</span>: &#123;</span><br><span class="line">                SEL selector;</span><br><span class="line">                [invocation getArgument:&amp;selector atIndex:i];</span><br><span class="line">                NSString *selectorName = NSStringFromSelector(selector);</span><br><span class="line">                [argList addObject:(selectorName ? selectorName: _nilObj)];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'^'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>: &#123;</span><br><span class="line">                <span class="keyword">void</span> *arg;</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];</span><br><span class="line">                [argList addObject:[JPBoxing boxPointer:arg]];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'#'</span>: &#123;</span><br><span class="line">                Class arg;</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];</span><br><span class="line">                [argList addObject:[JPBoxing boxClass:arg]];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                NSLog(@<span class="string">"error type %s"</span>, argumentType);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_currInvokeSuperClsName[selectorName]) &#123;</span><br><span class="line">        Class cls = NSClassFromString(_currInvokeSuperClsName[selectorName]);</span><br><span class="line">        NSString *tmpSelectorName = [[selectorName stringByReplacingOccurrencesOfString:@<span class="string">"_JPSUPER_"</span> withString:@<span class="string">"_JP"</span>] stringByReplacingOccurrencesOfString:@<span class="string">"SUPER_"</span> withString:@<span class="string">"_JP"</span>];</span><br><span class="line">        <span class="keyword">if</span> (!_JSOverideMethods[cls][tmpSelectorName]) &#123;</span><br><span class="line">            NSString *ORIGSelectorName = [selectorName stringByReplacingOccurrencesOfString:@<span class="string">"SUPER_"</span> withString:@<span class="string">"ORIG"</span>];</span><br><span class="line">            [argList removeObjectAtIndex:<span class="number">0</span>];</span><br><span class="line">            id retObj = callSelector(_currInvokeSuperClsName[selectorName], ORIGSelectorName, [JSValue valueWithObject:argList inContext:_context], [JSValue valueWithObject:@&#123;@<span class="string">"__obj"</span>: slf, @<span class="string">"__realClsName"</span>: @<span class="string">""</span>&#125; inContext:_context], NO);</span><br><span class="line">            id __autoreleasing ret = formatJSToOC([JSValue valueWithObject:retObj inContext:_context]);</span><br><span class="line">            [invocation setReturnValue:&amp;ret];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSArray *params = _formatOCToJSList(argList);</span><br><span class="line">    <span class="keyword">char</span> returnType[<span class="number">255</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(returnType, [methodSignature methodReturnType]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Restore the return type</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(returnType, @encode(JPDouble)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(returnType, @encode(<span class="keyword">double</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(returnType, @encode(JPFloat)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(returnType, @encode(<span class="keyword">float</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (returnType[<span class="number">0</span>] == <span class="string">'r'</span> ? returnType[<span class="number">1</span>] : returnType[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CALL_JS \</span></span><br><span class="line">            JSValue *jsval; \</span><br><span class="line">            [_JSMethodForwardCallLock lock];   \</span><br><span class="line">            jsval = [jsFunc callWithArguments:params]; \</span><br><span class="line">            [_JSMethodForwardCallLock unlock]; \</span><br><span class="line">            <span class="keyword">while</span> (![jsval isNull] &amp;&amp; ![jsval isUndefined] &amp;&amp; [jsval hasProperty:@<span class="string">"__isPerformInOC"</span>]) &#123; \</span><br><span class="line">                NSArray *args = nil;  \</span><br><span class="line">                JSValue *cb = jsval[@<span class="string">"cb"</span>]; \</span><br><span class="line">                <span class="keyword">if</span> ([jsval hasProperty:@<span class="string">"sel"</span>]) &#123;   \</span><br><span class="line">                    id callRet = callSelector(![jsval[@<span class="string">"clsName"</span>] isUndefined] ? [jsval[@<span class="string">"clsName"</span>] toString] : nil, [jsval[@<span class="string">"sel"</span>] toString], jsval[@<span class="string">"args"</span>], ![jsval[@<span class="string">"obj"</span>] isUndefined] ? jsval[@<span class="string">"obj"</span>] : nil, NO);  \</span><br><span class="line">                    args = @[[_context[@<span class="string">"_formatOCToJS"</span>] callWithArguments:callRet ? @[callRet] : _formatOCToJSList(@[_nilObj])]];  \</span><br><span class="line">                &#125;   \</span><br><span class="line">                [_JSMethodForwardCallLock lock];    \</span><br><span class="line">                jsval = [cb callWithArguments:args];  \</span><br><span class="line">                [_JSMethodForwardCallLock unlock];  \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CASE_RET(_typeChar, _type, _retCode)   \</span></span><br><span class="line">            <span class="keyword">case</span> _typeChar : &#123; \</span><br><span class="line">                JP_FWD_RET_CALL_JS \</span><br><span class="line">                _retCode \</span><br><span class="line">                [invocation setReturnValue:&amp;ret];\</span><br><span class="line">                <span class="keyword">break</span>;  \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CASE(_typeChar, _type, _typeSelector)   \</span></span><br><span class="line">            JP_FWD_RET_CASE_RET(_typeChar, _type, _type ret = [[jsval toObject] _typeSelector];)   \</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_ID \</span></span><br><span class="line">            id __autoreleasing ret = formatJSToOC(jsval); \</span><br><span class="line">            <span class="keyword">if</span> (ret == _nilObj ||   \</span><br><span class="line">                ([ret isKindOfClass:[NSNumber class]] &amp;&amp; <span class="built_in">strcmp</span>([ret objCType], <span class="string">"c"</span>) == <span class="number">0</span> &amp;&amp; ![ret boolValue])) ret = nil;  \</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_POINTER    \</span></span><br><span class="line">            <span class="keyword">void</span> *ret; \</span><br><span class="line">            id obj = formatJSToOC(jsval); \</span><br><span class="line">            <span class="keyword">if</span> ([obj isKindOfClass:[JPBoxing class]]) &#123; \</span><br><span class="line">                ret = [((JPBoxing *)obj) unboxPointer]; \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_CLASS    \</span></span><br><span class="line">            Class ret;   \</span><br><span class="line">            ret = formatJSToOC(jsval);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_SEL    \</span></span><br><span class="line">            SEL ret;   \</span><br><span class="line">            id obj = formatJSToOC(jsval); \</span><br><span class="line">            <span class="keyword">if</span> ([obj isKindOfClass:[NSString class]]) &#123; \</span><br><span class="line">                ret = NSSelectorFromString(obj); \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'@'</span>, id, JP_FWD_RET_CODE_ID)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'^'</span>, <span class="keyword">void</span>*, JP_FWD_RET_CODE_POINTER)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'*'</span>, <span class="keyword">void</span>*, JP_FWD_RET_CODE_POINTER)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'#'</span>, Class, JP_FWD_RET_CODE_CLASS)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">':'</span>, SEL, JP_FWD_RET_CODE_SEL)</span><br><span class="line"></span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'c'</span>, <span class="keyword">char</span>, charValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'C'</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span>, unsignedCharValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'s'</span>, <span class="keyword">short</span>, shortValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'S'</span>, <span class="keyword">unsigned</span> <span class="keyword">short</span>, unsignedShortValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'i'</span>, <span class="keyword">int</span>, intValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'I'</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>, unsignedIntValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'l'</span>, <span class="keyword">long</span>, longValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'L'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, unsignedLongValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'q'</span>, <span class="keyword">long</span> <span class="keyword">long</span>, longLongValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'Q'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>, unsignedLongLongValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'f'</span>, <span class="keyword">float</span>, floatValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'d'</span>, <span class="keyword">double</span>, doubleValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'B'</span>, BOOL, boolValue)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'v'</span>: &#123;</span><br><span class="line">            JP_FWD_RET_CALL_JS</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#123;'</span>: &#123;</span><br><span class="line">            NSString *typeString = extractStructName([NSString stringWithUTF8String:returnType]);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_STRUCT(_type, _funcSuffix) \</span></span><br><span class="line">            <span class="keyword">if</span> ([typeString rangeOfString:@#_type].location != NSNotFound) &#123;    \</span><br><span class="line">                JP_FWD_RET_CALL_JS \</span><br><span class="line">                _type ret = [jsval _funcSuffix]; \</span><br><span class="line">                [invocation setReturnValue:&amp;ret];\</span><br><span class="line">                <span class="keyword">break</span>;  \</span><br><span class="line">            &#125;</span><br><span class="line">            JP_FWD_RET_STRUCT(CGRect, toRect)</span><br><span class="line">            JP_FWD_RET_STRUCT(CGPoint, toPoint)</span><br><span class="line">            JP_FWD_RET_STRUCT(CGSize, toSize)</span><br><span class="line">            JP_FWD_RET_STRUCT(NSRange, toRange)</span><br><span class="line">            </span><br><span class="line">            @synchronized (_context) &#123;</span><br><span class="line">                NSDictionary *structDefine = _registeredStruct[typeString];</span><br><span class="line">                <span class="keyword">if</span> (structDefine) &#123;</span><br><span class="line">                    <span class="keyword">size_t</span> size = sizeOfStructTypes(structDefine[@<span class="string">"types"</span>]);</span><br><span class="line">                    JP_FWD_RET_CALL_JS</span><br><span class="line">                    <span class="keyword">void</span> *ret = <span class="built_in">malloc</span>(size);</span><br><span class="line">                    NSDictionary *dict = formatJSToOC(jsval);</span><br><span class="line">                    getStructDataWithDict(ret, dict, structDefine);</span><br><span class="line">                    [invocation setReturnValue:ret];</span><br><span class="line">                    <span class="built_in">free</span>(ret);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_pointersToRelease) &#123;</span><br><span class="line">        <span class="keyword">for</span> (NSValue *val in _pointersToRelease) &#123;</span><br><span class="line">            <span class="keyword">void</span> *pointer = <span class="literal">NULL</span>;</span><br><span class="line">            [val getValue:&amp;pointer];</span><br><span class="line">            CFRelease(pointer);</span><br><span class="line">        &#125;</span><br><span class="line">        _pointersToRelease = nil;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (deallocFlag) &#123;</span><br><span class="line">        slf = nil;</span><br><span class="line">        Class instClass = object_getClass(assignSlf);</span><br><span class="line">        Method deallocMethod = class_getInstanceMethod(instClass, NSSelectorFromString(@<span class="string">"ORIGdealloc"</span>));</span><br><span class="line">        <span class="keyword">void</span> (*originalDealloc)(__unsafe_unretained id, SEL) = (__typeof__(originalDealloc))method_getImplementation(deallocMethod);</span><br><span class="line">        originalDealloc(assignSlf, NSSelectorFromString(@<span class="string">"dealloc"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平台使用"><a href="#平台使用" class="headerlink" title="平台使用"></a>平台使用</h2><ul><li><a href="https://github.com/bang590/JSPatch/wiki" target="_blank" rel="noopener">平台使用说明</a></li><li>如果使用其平台来做还是算简单的，基本不用做其他配置。</li></ul><h3 id="集成-SDK"><a href="#集成-SDK" class="headerlink" title="集成 SDK"></a>集成 SDK</h3><blockquote><p>一般情况的SDK的使用完全按照文档基本没有问题</p></blockquote><ul><li>在平台创建 APP</li><li>下载SDK集成到项目中</li><li>已经集成完毕</li><li>在需要修复 bug 时，先写好 js 脚本</li><li>本地测试</li><li>测试成功后，去平台下发即可。</li></ul><h3 id="平台-SDK-使用注意点："><a href="#平台-SDK-使用注意点：" class="headerlink" title="平台 SDK 使用注意点："></a>平台 SDK 使用注意点：</h3><ul><li>补丁累计不要超过 1 个</li><li>每一次 App 更新必须使用原生来处理掉所有的补丁，同时需要清除相应的补丁下载。</li><li>每一次下发补丁需提本地测试</li></ul><h2 id="自建平台"><a href="#自建平台" class="headerlink" title="自建平台"></a>自建平台</h2><ul><li><p><img src="http://www.10tiao.com/img.do?url=http%3A//mmbiz.qpic.cn/mmbiz_png/2iaHTl80iajP816eIm8wfzO5MeuIT0VlNtlJWH4Xy4Ioj7ib79tKzAiaDpqJkVM8kDn8nTjXpUUqRibRulJ9bic5DqXg/0%3Fwx_fmt%3Dpng" alt=""></p></li><li><p><a href="http://www.10tiao.com/html/655/201701/2650215152/1.html" target="_blank" rel="noopener">自建平台时需要处理的一些问题</a></p></li></ul><h2 id="拷贝下官方的一个-DEMO"><a href="#拷贝下官方的一个-DEMO" class="headerlink" title="拷贝下官方的一个 DEMO"></a>拷贝下官方的一个 DEMO</h2><ul><li>有一个最简单的控制器上有一个按钮，现在想加点功能，就是在点击这个按钮时跳转到一个新界面，新的界面上有一个 tableView，同时做相应的简单展示、</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;JPViewController.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation JPViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    UIButton *btn = [[UIButton alloc] initWithFrame:CGRectMake(0, 100, [UIScreen mainScreen].bounds.size.width, 50)];</span><br><span class="line">    [btn setTitle:@&quot;Push JPTableViewController&quot; forState:UIControlStateNormal];</span><br><span class="line">    [btn addTarget:self action:@selector(handleBtn:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [btn setBackgroundColor:[UIColor grayColor]];</span><br><span class="line">    [self.view addSubview:btn];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)handleBtn:(id)sender</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li>集成项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[JPEngine startEngine];</span><br><span class="line">NSString *sourcePath = [[NSBundle mainBundle] pathForResource:@&quot;demo&quot; ofType:@&quot;js&quot;];</span><br><span class="line">NSString *script = [NSString stringWithContentsOfFile:sourcePath encoding:NSUTF8StringEncoding error:nil];</span><br><span class="line">[JPEngine evaluateScript:script];</span><br></pre></td></tr></table></figure><ul><li>JS 脚本如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">defineClass(&apos;JPViewController&apos;, &#123;</span><br><span class="line">  handleBtn: function(sender) &#123;</span><br><span class="line">    var tableViewCtrl = JPTableViewController.alloc().init()</span><br><span class="line">    self.navigationController().pushViewController_animated(tableViewCtrl, YES)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineClass(&apos;JPTableViewController : UITableViewController &lt;UIAlertViewDelegate&gt;&apos;, [&apos;data&apos;], &#123;</span><br><span class="line">  dataSource: function() &#123;</span><br><span class="line">    var data = self.data();</span><br><span class="line">    if (data) return data;</span><br><span class="line">    var data = [];</span><br><span class="line">    for (var i = 0; i &lt; 20; i ++) &#123;</span><br><span class="line">      data.push(&quot;cell from js &quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">    self.setData(data)</span><br><span class="line">    return data;</span><br><span class="line">  &#125;,</span><br><span class="line">  numberOfSectionsInTableView: function(tableView) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_numberOfRowsInSection: function(tableView, section) &#123;</span><br><span class="line">    return self.dataSource().length;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_cellForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    var cell = tableView.dequeueReusableCellWithIdentifier(&quot;cell&quot;) </span><br><span class="line">    if (!cell) &#123;</span><br><span class="line">      cell = require(&apos;UITableViewCell&apos;).alloc().initWithStyle_reuseIdentifier(0, &quot;cell&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    cell.textLabel().setText(self.dataSource()[indexPath.row()])</span><br><span class="line">    return cell</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_heightForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    return 60</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">     var alertView = require(&apos;UIAlertView&apos;).alloc().initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles(&quot;Alert&quot;,self.dataSource()[indexPath.row()], self, &quot;OK&quot;,  null);</span><br><span class="line">     alertView.show()</span><br><span class="line">  &#125;,</span><br><span class="line">  alertView_willDismissWithButtonIndex: function(alertView, idx) &#123;</span><br><span class="line">    console.log(&apos;click btn &apos; + alertView.buttonTitleAtIndex(idx).toJS())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2026898-1c826218dc28ab68.gif?imageMogr2/auto-orient/strip" alt="1111.gif"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bang590/JSPatch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/bang590/JSPatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JSPatch 是一个基于 JavaScriptCore 的开源项目，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 实时修复线上 bug。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift 之 init 构造方法</title>
    <link href="https://liangdahong.com/2018/08/08/2018/Swift-%E4%B9%8B-init-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
    <id>https://liangdahong.com/2018/08/08/2018/Swift-之-init-构造方法/</id>
    <published>2018-08-08T03:54:09.000Z</published>
    <updated>2018-08-08T05:16:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在我们刚刚接触 <code>Swift</code> 时，可能会遇到 <code>init 构造方法</code> 的各种坑，各种报错，那么 <code>Apple</code> 为什么要这样做呢？难道是无聊虐开发者吗？当然不是，其实我们在使用 <code>Objective-C</code> 编码时，对于新手来说太多坑了，比如：在 <code>init</code> 中调各种方法，访问各种属性等，在 <code>Objective-C</code> 中其实 <code>Apple</code> 是不推荐在 <code>init</code> 中访问属性的，因为此时可能部分属性根本没有初始化，可能导致一系列的问题存在。到了 <code>Swift</code> 时，<code>Apple</code> 做了强制措施，彻底解决类似的问题。</p></blockquote><a id="more"></a><blockquote><p><code>Apple</code> 在 <code>Swift</code> 中的 <code>init</code> 方法做各种限制的终极目标就是为了 <code>保证使用者不关使用什么方式创建对象，均保证在初始化完成前所有的属性都被初始化</code>，明白这目的时，对 <code>Swift</code> 的 <code>init</code> 就比较好理解了,具体的可以参考下面的文章，就不再一一分析了哈，逃.</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://swifter.tips/init-keywords/" target="_blank" rel="noopener">http://swifter.tips/init-keywords/</a></li><li><a href="https://www.jianshu.com/p/b1ab25ab00c1" target="_blank" rel="noopener">https://www.jianshu.com/p/b1ab25ab00c1</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在我们刚刚接触 &lt;code&gt;Swift&lt;/code&gt; 时，可能会遇到 &lt;code&gt;init 构造方法&lt;/code&gt; 的各种坑，各种报错，那么 &lt;code&gt;Apple&lt;/code&gt; 为什么要这样做呢？难道是无聊虐开发者吗？当然不是，其实我们在使用 &lt;code&gt;Objective-C&lt;/code&gt; 编码时，对于新手来说太多坑了，比如：在 &lt;code&gt;init&lt;/code&gt; 中调各种方法，访问各种属性等，在 &lt;code&gt;Objective-C&lt;/code&gt; 中其实 &lt;code&gt;Apple&lt;/code&gt; 是不推荐在 &lt;code&gt;init&lt;/code&gt; 中访问属性的，因为此时可能部分属性根本没有初始化，可能导致一系列的问题存在。到了 &lt;code&gt;Swift&lt;/code&gt; 时，&lt;code&gt;Apple&lt;/code&gt; 做了强制措施，彻底解决类似的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://liangdahong.com/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift 之 init 构造方法</title>
    <link href="https://liangdahong.com/2018/08/08/Swift-%E4%B9%8B-init-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
    <id>https://liangdahong.com/2018/08/08/Swift-之-init-构造方法/</id>
    <published>2018-08-08T03:54:09.000Z</published>
    <updated>2019-10-18T08:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在我们刚刚接触 <code>Swift</code> 时，可能会遇到 <code>init 构造方法</code> 的各种坑，各种报错，那么 <code>Apple</code> 为什么要这样做呢？难道是无聊虐开发者吗？当然不是，其实我们在使用 <code>Objective-C</code> 编码时，对于新手来说太多坑了，比如：在 <code>init</code> 中调各种方法，访问各种属性等，在 <code>Objective-C</code> 中其实 <code>Apple</code> 是不推荐在 <code>init</code> 中访问属性的，因为此时可能部分属性根本没有初始化，可能导致一系列的问题存在。到了 <code>Swift</code> 时，<code>Apple</code> 做了强制措施，彻底解决类似的问题。</p></blockquote><a id="more"></a><blockquote><p><code>Apple</code> 在 <code>Swift</code> 中的 <code>init</code> 方法做各种限制的终极目标就是为了 <code>保证使用者不关使用什么方式创建对象，均保证在初始化完成前所有的属性都被初始化</code>，明白这目的时，对 <code>Swift</code> 的 <code>init</code> 就比较好理解了,具体的可以参考下面的文章，就不再一一分析了哈，逃.</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://swifter.tips/init-keywords/" target="_blank" rel="noopener">http://swifter.tips/init-keywords/</a></li><li><a href="https://www.jianshu.com/p/b1ab25ab00c1" target="_blank" rel="noopener">https://www.jianshu.com/p/b1ab25ab00c1</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在我们刚刚接触 &lt;code&gt;Swift&lt;/code&gt; 时，可能会遇到 &lt;code&gt;init 构造方法&lt;/code&gt; 的各种坑，各种报错，那么 &lt;code&gt;Apple&lt;/code&gt; 为什么要这样做呢？难道是无聊虐开发者吗？当然不是，其实我们在使用 &lt;code&gt;Objective-C&lt;/code&gt; 编码时，对于新手来说太多坑了，比如：在 &lt;code&gt;init&lt;/code&gt; 中调各种方法，访问各种属性等，在 &lt;code&gt;Objective-C&lt;/code&gt; 中其实 &lt;code&gt;Apple&lt;/code&gt; 是不推荐在 &lt;code&gt;init&lt;/code&gt; 中访问属性的，因为此时可能部分属性根本没有初始化，可能导致一系列的问题存在。到了 &lt;code&gt;Swift&lt;/code&gt; 时，&lt;code&gt;Apple&lt;/code&gt; 做了强制措施，彻底解决类似的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://liangdahong.com/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>正确高效使用 Google</title>
    <link href="https://liangdahong.com/2018/07/11/2018/%E6%AD%A3%E7%A1%AE%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8-Google/"/>
    <id>https://liangdahong.com/2018/07/11/2018/正确高效使用-Google/</id>
    <published>2018-07-11T03:30:49.000Z</published>
    <updated>2018-08-07T01:50:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><a id="more"></a><ul><li>文章来自 <strong>七年就是一辈子-李笑来</strong></li></ul><blockquote><p>研究这个词，在英文中是research，我把它理解为re-search，实际上各种语言是相通的，所谓re-search其实就是“反复搜索”，就是“上下求索”（路漫漫其修远兮，吾将上下而求索）。所以，如果你想学点什么，就要善于搜索。而在这个时代里，最好的搜索工具就是 Google。</p></blockquote><blockquote><p>搜索引擎之所以迷人，就是因为它就好像望远镜一样：</p></blockquote><blockquote><p>能让你看到你原本完全看不到的东西……</p></blockquote><blockquote><p>互联网就好像那浩瀚的宇宙，里面几乎什么都有，只要你肯用“望远镜”去看、用搜索引擎去搜……</p></blockquote><blockquote><p>搜索引擎是公开的，人人都可以用的，可偏偏大多数人不用、不会用，甚至错误地用…… 于是人与人之间的差异多了另外一个不断延展的维度。在这个维度上你不如人家你能怪谁？</p></blockquote><blockquote><p>最烂的提问是：“我连不上 Google 怎么办呀？” 答案是“自己想办法” —— 如果你在乎，你就肯花时间自己解决这个问题，如果你不在乎，就不用在乎了。</p></blockquote><h2 id="使用“本尊”"><a href="#使用“本尊”" class="headerlink" title="使用“本尊”"></a>使用“本尊”</h2><p>最好使用 <a href="http://www.google.com/ncr" target="_blank" rel="noopener">http://www.google.com/ncr</a> NCR: No Country Redirection，而不是<a href="http://www.google.com.hk；有时，直接输入http://www.google.com也会被自动转到“本地Google”，比如，我用日本的" target="_blank" rel="noopener">http://www.google.com.hk；有时，直接输入http://www.google.com也会被自动转到“本地Google”，比如，我用日本的</a> VPN，浏览器就会把我转到<a href="http://www.google.co.jp……" target="_blank" rel="noopener">http://www.google.co.jp……</a></p><h2 id="优先使用英文关键字搜索"><a href="#优先使用英文关键字搜索" class="headerlink" title="优先使用英文关键字搜索"></a>优先使用英文关键字搜索</h2><p>这是个好习惯。别说不会英文，不会就学，没那么难。</p><h2 id="基本技巧"><a href="#基本技巧" class="headerlink" title="基本技巧"></a>基本技巧</h2><p>Google 搜索引擎也许是世界上最简单的应用界面，只有一个输入框和一个按钮。然而，用好它还是需要花点时间去学习的。Google 有帮助文档，还专门设计了个学习网站 A Google A Day</p><h3 id="加号"><a href="#加号" class="headerlink" title="加号"></a>加号</h3><p>在 Google 的输入框里，所有的空格都被 Google 理解为加号+。如果你输入的是 purpose of education那么 Google 返回的文章里既有“purpose”存在，也有“education”存在，但不一定有“purpose of education”存在。另外，过分常用的、单独存在没有意义的词汇往往被忽略掉，比如冠词“a”、“the”；介词“of”、“in”、“on”、“at”、“to”；连词“and”、“or”、“but”；从属连词“that”、“which”、“when”；代词“my”、“his”、“them”等等。</p><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>如果你想要找含有“purpose of education”这个词组的文章，那么你必须输入”purpose of education”。现在的 Google 已经可以处理 utf-8 大字符集了，所以，即便你在输入的时候使用的是全角字符（不是半角字符的”而是“或者”）Google也照样能够正确处理。比较一下两种输入返回的结果：purpose of education vs.“purpose of education”。再试试 the most important benefit of education 和 “the most important benefit of education”。这就是引号（“……”）的作用——返回“完整匹配”的结果。</p><h3 id="减号"><a href="#减号" class="headerlink" title="减号"></a>减号</h3><p>为了进一步筛选搜索结果，还需要学会另外一个符号——减号-。比如，“the most important benefit of education” – “united states”要求Google返回含有“the most important benefit of education”但不存在“united states”的文章。</p><h3 id="星号"><a href="#星号" class="headerlink" title="星号"></a>星号</h3><p>另外一个威力无穷的符号是星号<em>。Google 支持通配符搜索，即搜索字符串中可以包含星号</em>，用来替代任意字符串。比如，“the most * examples of censorship”将会返回含有类似“the most outrageous examples of censorship”、“the most brazen examples of censorship”、“the most heinous examples of censorship”、“the most stupidest examples of censorship”、“the most dangerous examples of censorship”、“the most egregious examples of censorship”、“the most prolific examples of censorship”、“the most absurd examples of censorship”……</p><h3 id="波浪号"><a href="#波浪号" class="headerlink" title="波浪号"></a>波浪号</h3><p>还有一个运用相当灵活、经常带来意外收获的符号是波浪号~。把波浪号~加在某个单词前面，是在告诉 Google：除了给出的关键字之外，还要搜索与波浪号~后面的那个单词相关的词汇。比如，搜索the importance of ~censorship的结果中包含着“the importance of censorship”，也包含着与censorship相关的另外一个词汇“propaganda”——“the importance of propaganda”。</p><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>再学一个在指定网站中搜索的语法“site:”。比如，“the purpose of education” site:<a href="http://www.time.com/就是要求" target="_blank" rel="noopener">http://www.time.com/就是要求</a> Google 只返回 <a href="http://www.time.com" target="_blank" rel="noopener">http://www.time.com</a> 这个网站里的含有“the purpose of education”的文章。</p><h3 id="定制搜索"><a href="#定制搜索" class="headerlink" title="定制搜索"></a>定制搜索</h3><p>2006年，Google 推出了“co-op”服务（自定义搜索引擎）。其中最常用的功能之一就是可以指定 Google 搜索一个或者若干个指定的网站——相当于前面提到的 Google 语法“site:”的扩展。比如，我就曾经为我的学生定制了一个 Google cse（Custom Search Engine）——Search News Media。不妨看看在这个自定义搜索引擎上搜索censorship返回的结果（GRE/SAT 的作文考试中，都有很多关于“censorship”的作文题）。这个 cse 只搜索以下10个网站：</p><ul><li><a href="http://www.economist.com/" target="_blank" rel="noopener">http://www.economist.com/</a></li><li><a href="http://www.cnn.com/" target="_blank" rel="noopener">http://www.cnn.com/</a></li><li><a href="http://www.time.com/" target="_blank" rel="noopener">http://www.time.com/</a></li><li><a href="http://nytimes.com/" target="_blank" rel="noopener">http://nytimes.com/</a></li><li><a href="http://www.washingtonpost.com/" target="_blank" rel="noopener">http://www.washingtonpost.com/</a></li><li><a href="http://www.usnews.com/" target="_blank" rel="noopener">http://www.usnews.com/</a></li><li><a href="http://usatoday.com/" target="_blank" rel="noopener">http://usatoday.com/</a></li><li><a href="http://www.reuters.com/" target="_blank" rel="noopener">http://www.reuters.com/</a></li><li><a href="http://www.bbc.co.uk/" target="_blank" rel="noopener">http://www.bbc.co.uk/</a></li><li><a href="http://en.wikinews.org/" target="_blank" rel="noopener">http://en.wikinews.org/</a></li></ul><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><ul><li>文章来自 <strong>七年就是一辈子-李笑来</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;
    
    </summary>
    
      <category term="效率" scheme="https://liangdahong.com/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
  <entry>
    <title>正确高效使用 Google</title>
    <link href="https://liangdahong.com/2018/07/11/%E6%AD%A3%E7%A1%AE%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8-Google/"/>
    <id>https://liangdahong.com/2018/07/11/正确高效使用-Google/</id>
    <published>2018-07-11T03:30:49.000Z</published>
    <updated>2019-10-18T08:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><a id="more"></a><ul><li>文章来自 <strong>七年就是一辈子-李笑来</strong></li></ul><blockquote><p>研究这个词，在英文中是research，我把它理解为re-search，实际上各种语言是相通的，所谓re-search其实就是“反复搜索”，就是“上下求索”（路漫漫其修远兮，吾将上下而求索）。所以，如果你想学点什么，就要善于搜索。而在这个时代里，最好的搜索工具就是 Google。</p></blockquote><blockquote><p>搜索引擎之所以迷人，就是因为它就好像望远镜一样：</p></blockquote><blockquote><p>能让你看到你原本完全看不到的东西……</p></blockquote><blockquote><p>互联网就好像那浩瀚的宇宙，里面几乎什么都有，只要你肯用“望远镜”去看、用搜索引擎去搜……</p></blockquote><blockquote><p>搜索引擎是公开的，人人都可以用的，可偏偏大多数人不用、不会用，甚至错误地用…… 于是人与人之间的差异多了另外一个不断延展的维度。在这个维度上你不如人家你能怪谁？</p></blockquote><blockquote><p>最烂的提问是：“我连不上 Google 怎么办呀？” 答案是“自己想办法” —— 如果你在乎，你就肯花时间自己解决这个问题，如果你不在乎，就不用在乎了。</p></blockquote><h2 id="使用“本尊”"><a href="#使用“本尊”" class="headerlink" title="使用“本尊”"></a>使用“本尊”</h2><p>最好使用 <a href="http://www.google.com/ncr" target="_blank" rel="noopener">http://www.google.com/ncr</a> NCR: No Country Redirection，而不是<a href="http://www.google.com.hk；有时，直接输入http://www.google.com也会被自动转到“本地Google”，比如，我用日本的" target="_blank" rel="noopener">http://www.google.com.hk；有时，直接输入http://www.google.com也会被自动转到“本地Google”，比如，我用日本的</a> VPN，浏览器就会把我转到<a href="http://www.google.co.jp……" target="_blank" rel="noopener">http://www.google.co.jp……</a></p><h2 id="优先使用英文关键字搜索"><a href="#优先使用英文关键字搜索" class="headerlink" title="优先使用英文关键字搜索"></a>优先使用英文关键字搜索</h2><p>这是个好习惯。别说不会英文，不会就学，没那么难。</p><h2 id="基本技巧"><a href="#基本技巧" class="headerlink" title="基本技巧"></a>基本技巧</h2><p>Google 搜索引擎也许是世界上最简单的应用界面，只有一个输入框和一个按钮。然而，用好它还是需要花点时间去学习的。Google 有帮助文档，还专门设计了个学习网站 A Google A Day</p><h3 id="加号"><a href="#加号" class="headerlink" title="加号"></a>加号</h3><p>在 Google 的输入框里，所有的空格都被 Google 理解为加号+。如果你输入的是 purpose of education那么 Google 返回的文章里既有“purpose”存在，也有“education”存在，但不一定有“purpose of education”存在。另外，过分常用的、单独存在没有意义的词汇往往被忽略掉，比如冠词“a”、“the”；介词“of”、“in”、“on”、“at”、“to”；连词“and”、“or”、“but”；从属连词“that”、“which”、“when”；代词“my”、“his”、“them”等等。</p><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>如果你想要找含有“purpose of education”这个词组的文章，那么你必须输入”purpose of education”。现在的 Google 已经可以处理 utf-8 大字符集了，所以，即便你在输入的时候使用的是全角字符（不是半角字符的”而是“或者”）Google也照样能够正确处理。比较一下两种输入返回的结果：purpose of education vs.“purpose of education”。再试试 the most important benefit of education 和 “the most important benefit of education”。这就是引号（“……”）的作用——返回“完整匹配”的结果。</p><h3 id="减号"><a href="#减号" class="headerlink" title="减号"></a>减号</h3><p>为了进一步筛选搜索结果，还需要学会另外一个符号——减号-。比如，“the most important benefit of education” – “united states”要求Google返回含有“the most important benefit of education”但不存在“united states”的文章。</p><h3 id="星号"><a href="#星号" class="headerlink" title="星号"></a>星号</h3><p>另外一个威力无穷的符号是星号<em>。Google 支持通配符搜索，即搜索字符串中可以包含星号</em>，用来替代任意字符串。比如，“the most * examples of censorship”将会返回含有类似“the most outrageous examples of censorship”、“the most brazen examples of censorship”、“the most heinous examples of censorship”、“the most stupidest examples of censorship”、“the most dangerous examples of censorship”、“the most egregious examples of censorship”、“the most prolific examples of censorship”、“the most absurd examples of censorship”……</p><h3 id="波浪号"><a href="#波浪号" class="headerlink" title="波浪号"></a>波浪号</h3><p>还有一个运用相当灵活、经常带来意外收获的符号是波浪号~。把波浪号~加在某个单词前面，是在告诉 Google：除了给出的关键字之外，还要搜索与波浪号~后面的那个单词相关的词汇。比如，搜索the importance of ~censorship的结果中包含着“the importance of censorship”，也包含着与censorship相关的另外一个词汇“propaganda”——“the importance of propaganda”。</p><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>再学一个在指定网站中搜索的语法“site:”。比如，“the purpose of education” site:<a href="http://www.time.com/就是要求" target="_blank" rel="noopener">http://www.time.com/就是要求</a> Google 只返回 <a href="http://www.time.com" target="_blank" rel="noopener">http://www.time.com</a> 这个网站里的含有“the purpose of education”的文章。</p><h3 id="定制搜索"><a href="#定制搜索" class="headerlink" title="定制搜索"></a>定制搜索</h3><p>2006年，Google 推出了“co-op”服务（自定义搜索引擎）。其中最常用的功能之一就是可以指定 Google 搜索一个或者若干个指定的网站——相当于前面提到的 Google 语法“site:”的扩展。比如，我就曾经为我的学生定制了一个 Google cse（Custom Search Engine）——Search News Media。不妨看看在这个自定义搜索引擎上搜索censorship返回的结果（GRE/SAT 的作文考试中，都有很多关于“censorship”的作文题）。这个 cse 只搜索以下10个网站：</p><ul><li><a href="http://www.economist.com/" target="_blank" rel="noopener">http://www.economist.com/</a></li><li><a href="http://www.cnn.com/" target="_blank" rel="noopener">http://www.cnn.com/</a></li><li><a href="http://www.time.com/" target="_blank" rel="noopener">http://www.time.com/</a></li><li><a href="http://nytimes.com/" target="_blank" rel="noopener">http://nytimes.com/</a></li><li><a href="http://www.washingtonpost.com/" target="_blank" rel="noopener">http://www.washingtonpost.com/</a></li><li><a href="http://www.usnews.com/" target="_blank" rel="noopener">http://www.usnews.com/</a></li><li><a href="http://usatoday.com/" target="_blank" rel="noopener">http://usatoday.com/</a></li><li><a href="http://www.reuters.com/" target="_blank" rel="noopener">http://www.reuters.com/</a></li><li><a href="http://www.bbc.co.uk/" target="_blank" rel="noopener">http://www.bbc.co.uk/</a></li><li><a href="http://en.wikinews.org/" target="_blank" rel="noopener">http://en.wikinews.org/</a></li></ul><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><ul><li>文章来自 <strong>七年就是一辈子-李笑来</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;
    
    </summary>
    
      <category term="效率" scheme="https://liangdahong.com/categories/%E6%95%88%E7%8E%87/"/>
    
    
  </entry>
  
</feed>
