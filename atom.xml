<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梁大红的技术Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liangdahong.com/"/>
  <updated>2019-12-09T09:30:21.000Z</updated>
  <id>http://liangdahong.com/</id>
  
  <author>
    <name>梁大红</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git</title>
    <link href="http://liangdahong.com/2019/12/06/Git/"/>
    <id>http://liangdahong.com/2019/12/06/Git/</id>
    <published>2019-12-06T15:05:59.000Z</published>
    <updated>2019-12-09T09:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git 官网 <a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><p>查看git版本<br>git  version</p><p>创建git仓库<br>已经有源代码的情况<br>cd your_project<br>git init<br>git init your_project</p><p>配置用户名<br>对当前用户所有的仓库有效<br>git config –global user.name ‘your_name’<br>git config –global user.email ‘your_email’</p><p>// 对指定仓库有效<br>git config –local user.name ‘your_name’<br>git config –local user.email ‘your_email’</p><p>// 对系统所有登录的用户有效<br>git config –system user.name ‘your_name’<br>git config –system user.email ‘your_email’</p><p>查看当前的设置<br>git config  –list –local<br>git config  –list –global<br>git config  –list –system</p><p>git config –local user.name ‘梁大红’<br>git config –local user.email <a href="mailto:&#39;ios@liangdahong.com" target="_blank" rel="noopener">&#39;ios@liangdahong.com</a>‘</p><p>// 全部文件添加到暂存区<br>git add .<br>// 指定名字添加<br>git add file_name file_name1 file_nam2<br>// 已经管理的文件全部提交到暂存区<br>git add -u</p><p>// 查看状态<br>git  status</p><p>放弃全部修改【已经是 git 管理的文件】<br>git checkout . </p><p>// 差提交日志<br>git log<br>// 简化为一个列表<br>git log –oneline<br>// 查看最近的几次提交<br>git log -n2<br>git log -n2 –oneline</p><p>// 全部分支的历史<br>git log –all</p><p>graph 图形化<br>oneline 一行<br>all: all branch<br>n2: xxx条提交</p><p>git log –oneline –all -n4 –graph<br>git log -n2 –oneline  –graph</p><p>git branch -v  查看本地分支<br>git branch -r  查看远程分支<br>git branch -a 查看本地+远程分支</p><p>gitk 就可以启动 git 自带的图形化界面</p><p>git branch </p><p>命令行命令 重命名</p><p>拷贝文件到指定目录<br>cp  xxx/xxxx.png    xxx/xxx/xx/aaa.png<br>cp  xxx/xxxx.png    xxx/xxx/xx/</p><p>拷贝文件夹到指定路径<br>cp -r   xxx/xxxx xxx/xxx/xx/</p><p>输出文件的内容到控制台<br>cat ssss.h</p><p>rm -rf  xx/xxx/xxx/xxx/xx/<br>rm -f 删除文件<br>rm -rf 可删除文件夹<br>创建文件夹<br>mkdir xxx</p><p>vim<br>vi<br>q!<br>wq<br>q</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git 官网 &lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-scm.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;查看git版本&lt;br&gt;git  version&lt;/p&gt;
&lt;p&gt;创建git仓库&lt;br&gt;已经有源代码的情况&lt;br&gt;cd your_project&lt;br&gt;git init&lt;br&gt;git init your_project&lt;/p&gt;
&lt;p&gt;配置用户名&lt;br&gt;对当前用户所有的仓库有效&lt;br&gt;git config –global user.name ‘your_name’&lt;br&gt;git config –global user.email ‘your_email’&lt;/p&gt;
&lt;p&gt;// 对指定仓库有效&lt;br&gt;git config –local user.name ‘your_name’&lt;br&gt;git config –local user.email ‘your_email’&lt;/p&gt;
&lt;p&gt;// 对系统所有登录的用户有效&lt;br&gt;git config –system user.name ‘your_name’&lt;br&gt;git config –system user.email ‘your_email’&lt;/p&gt;
&lt;p&gt;查看当前的设置&lt;br&gt;git config  –list –local&lt;br&gt;git config  –list –global&lt;br&gt;git config  –list –system&lt;/p&gt;
&lt;p&gt;git config –local user.name ‘梁大红’&lt;br&gt;git config –local user.email &lt;a href=&quot;mailto:&amp;#39;ios@liangdahong.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#39;ios@liangdahong.com&lt;/a&gt;‘&lt;/p&gt;
&lt;p&gt;// 全部文件添加到暂存区&lt;br&gt;git add .&lt;br&gt;// 指定名字添加&lt;br&gt;git add file_name file_name1 file_nam2&lt;br&gt;// 已经管理的文件全部提交到暂存区&lt;br&gt;git add -u&lt;/p&gt;
&lt;p&gt;// 查看状态&lt;br&gt;git  status&lt;/p&gt;
&lt;p&gt;放弃全部修改【已经是 git 管理的文件】&lt;br&gt;git checkout . &lt;/p&gt;
&lt;p&gt;// 差提交日志&lt;br&gt;git log&lt;br&gt;// 简化为一个列表&lt;br&gt;git log –oneline&lt;br&gt;// 查看最近的几次提交&lt;br&gt;git log -n2&lt;br&gt;git log -n2 –oneline&lt;/p&gt;
&lt;p&gt;// 全部分支的历史&lt;br&gt;git log –all&lt;/p&gt;
&lt;p&gt;graph 图形化&lt;br&gt;oneline 一行&lt;br&gt;all: all branch&lt;br&gt;n2: xxx条提交&lt;/p&gt;
&lt;p&gt;git log –oneline –all -n4 –graph&lt;br&gt;git log -n2 –oneline  –graph&lt;/p&gt;
&lt;p&gt;git branch -v  查看本地分支&lt;br&gt;git branch -r  查看远程分支&lt;br&gt;git branch -a 查看本地+远程分支&lt;/p&gt;
&lt;p&gt;gitk 就可以启动 git 自带的图形化界面&lt;/p&gt;
&lt;p&gt;git branch &lt;/p&gt;
&lt;p&gt;命令行命令 重命名&lt;/p&gt;
&lt;p&gt;拷贝文件到指定目录&lt;br&gt;cp  xxx/xxxx.png    xxx/xxx/xx/aaa.png&lt;br&gt;cp  xxx/xxxx.png    xxx/xxx/xx/&lt;/p&gt;
&lt;p&gt;拷贝文件夹到指定路径&lt;br&gt;cp -r   xxx/xxxx xxx/xxx/xx/&lt;/p&gt;
&lt;p&gt;输出文件的内容到控制台&lt;br&gt;cat ssss.h&lt;/p&gt;
&lt;p&gt;rm -rf  xx/xxx/xxx/xxx/xx/&lt;br&gt;rm -f 删除文件&lt;br&gt;rm -rf 可删除文件夹&lt;br&gt;创建文件夹&lt;br&gt;mkdir xxx&lt;/p&gt;
&lt;p&gt;vim&lt;br&gt;vi&lt;br&gt;q!&lt;br&gt;wq&lt;br&gt;q&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vapor</title>
    <link href="http://liangdahong.com/2019/12/02/vapor/"/>
    <id>http://liangdahong.com/2019/12/02/vapor/</id>
    <published>2019-12-02T13:03:24.000Z</published>
    <updated>2019-12-15T05:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li></li><li><p><a href="https://www.yuque.com/fcwys/linux/exgglu" target="_blank" rel="noopener">https://www.yuque.com/fcwys/linux/exgglu</a></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl status        //查看所有进程的状态</span><br><span class="line">sudo supervisorctl stop hello       //停止es</span><br><span class="line">sudo supervisorctl start hello      //启动es</span><br><span class="line">sudo supervisorctl restart       //重启es</span><br><span class="line">sudo supervisorctl update        //配置文件修改后使用该命令加载新的配置</span><br><span class="line">sudo supervisorctl reload        //重新启动配置中的所有程序</span><br><span class="line"></span><br><span class="line">注：把es换成all可以管理配置中的所有进程。直接输入supervisorctl进入supervisorctl的shell交互界面，此时上面的命令不带supervisorctl可直接使用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kill 进程</span><br><span class="line">sudo lsof -i :8080 </span><br><span class="line">sudo lsof -i :8080nana</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">======</span><br><span class="line">// 修改代码</span><br><span class="line">1、修改代码</span><br><span class="line">2、打包 </span><br><span class="line">sudo vapor build --release</span><br><span class="line">3、 重新启动</span><br><span class="line">sudo supervisorctl restart hello</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">sudo vapor new hello</span><br><span class="line">sudo vapor build</span><br><span class="line"></span><br><span class="line">使用vapor build或者vapor build --release编译项目</span><br><span class="line"></span><br><span class="line">使用vapor run serve运行项目。</span><br><span class="line"></span><br><span class="line">Error (1):</span><br><span class="line">error: failed to clone; Cloning into bare repository &apos;/home/ubuntu/hello/.build/repositories/swift-nio.git-8838494804493912501&apos;...</span><br><span class="line">error: RPC failed; curl 18 transfer closed with outstanding read data remaining</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br><span class="line">&apos;hello&apos; /home/ubuntu/hello: error: product dependency &apos;FluentSQLite&apos; not found</span><br><span class="line">&apos;hello&apos; /home/ubuntu/hello: error: product dependency &apos;Vapor&apos; not found</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Nginx配置：</span><br><span class="line"></span><br><span class="line">替换以下“你的域名”  为你的域名地址， api 根据你的需要换成 www 或者其他字符。</span><br><span class="line"></span><br><span class="line">第一步</span><br><span class="line">sudo vi /etc/nginx/sites-available/api.你的域名.com</span><br><span class="line"></span><br><span class="line">第二步，填入以下内容，然后按 esc 输入 :wq 按回车</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        server_name api.你的域名.com;</span><br><span class="line">        listen 80;</span><br><span class="line">        try_files $uri @proxy;</span><br><span class="line">        client_max_body_size 20m;</span><br><span class="line">        location @proxy &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1:8080;</span><br><span class="line">                proxy_pass_header Server;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_pass_header Server;</span><br><span class="line">                proxy_connect_timeout 3s;</span><br><span class="line">                proxy_read_timeout 10s;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[program:hello]</span><br><span class="line">command=sudo /home/ubuntu/hello/.build/release/Run serve --env=production</span><br><span class="line">directory=/home/ubuntu/Hello</span><br><span class="line">autorestart=false</span><br><span class="line">user=root</span><br><span class="line">stdout_logfile=/var/log/supervisor/%(program_name)-stdout.log</span><br><span class="line">stderr_logfile=/var/log/supervisor/%(program_name)-stderr.log</span><br><span class="line"></span><br><span class="line">command=/home/vapor/ubuntu/hello/.build/release/Run serve --env=production</span><br><span class="line">directory=/home/vapor/hello/</span><br><span class="line">user=www-data</span><br><span class="line">stdout_logfile=/var/log/supervisor/%(program_name)-stdout.log</span><br><span class="line">stderr_logfile=/var/log/supervisor/%(program_name)-stderr.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行</span><br><span class="line"></span><br><span class="line">$ sudo supervisorctlre read</span><br><span class="line">$ sudo supervisorctl add hello</span><br><span class="line">$ sudo supervisorctl start hello</span><br><span class="line"> sudo supervisorctl start hellofind / -name supervisor.sock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三步  执行</span><br><span class="line">sudo ln -s /etc/nginx/sites-available/api.你的域名.com /etc/nginx/sites-enabled/api.你的域名.com</span><br><span class="line"></span><br><span class="line">sudo ln -s /etc/nginx/sites-available/hexo.com /etc/nginx/sites-enabled/hexo.com</span><br><span class="line"></span><br><span class="line">第四步，执行以下2个命令</span><br><span class="line">sudo service nginx start</span><br><span class="line">sudo service nginx reload</span><br><span class="line"></span><br><span class="line">sudo service nginx restart</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">api</span><br><span class="line">server &#123;</span><br><span class="line">        server_name api.liangdahong.com;</span><br><span class="line">        listen 80;</span><br><span class="line">        try_files $uri @proxy;</span><br><span class="line">        client_max_body_size 20m;</span><br><span class="line">        location @proxy &#123;</span><br><span class="line">                proxy_pass http://127.0.0.1:8080;</span><br><span class="line">                proxy_pass_header Server;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_pass_header Server;</span><br><span class="line">                proxy_connect_timeout 3s;</span><br><span class="line">                proxy_read_timeout 10s;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">blog</span><br><span class="line"> server&#123;</span><br><span class="line">        listen          8081 default_server;</span><br><span class="line">        listen          [::]:8081 default_server;</span><br><span class="line">        server_name     blog.liangdahong.com;</span><br><span class="line">        root            /home/hexoBlog;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        server_name blog.liangdahong.com;</span><br><span class="line">        listen 80;</span><br><span class="line">        try_files $uri @proxy;</span><br><span class="line">        client_max_body_size 20m;</span><br><span class="line">        root /home/hexoBlog;</span><br><span class="line">        location @proxy &#123;</span><br><span class="line">                proxy_pass_header Server;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_pass_header Server;</span><br><span class="line">                proxy_connect_timeout 3s;</span><br><span class="line">                proxy_read_timeout 10s;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        server_name liangdahong.com;</span><br><span class="line">        listen 80;</span><br><span class="line">        try_files $uri @proxy;</span><br><span class="line">        client_max_body_size 20m;</span><br><span class="line">        root /home/ubuntu/hexoBlog/other/me;</span><br><span class="line">        location @proxy &#123;</span><br><span class="line">                proxy_pass_header Server;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                proxy_pass_header Server;</span><br><span class="line">                proxy_connect_timeout 3s;</span><br><span class="line">                proxy_read_timeout 10s;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen          8081 default_server;</span><br><span class="line">listen          [::]:8081 default_server;</span><br><span class="line">server_name     blog.liangdahong.com;</span><br><span class="line">root            /home/hexoBlog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen          8081 default_server;</span><br><span class="line">listen          [::]:8081 default_server;</span><br><span class="line">server_name     blog.liangdahong.com;</span><br><span class="line">root            /home/hexoBlog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sudo ln -s /etc/nginx/sites-available/api.liangdahong.com /etc/nginx/sites-enabled/api.liangdahong.com</span><br><span class="line">sudo ln -s /etc/nginx/sites-available/hexo.com /etc/nginx/sites-enabled/hexo.com</span><br><span class="line">第四步，执行以下2个命令</span><br><span class="line">vim </span><br><span class="line">sudo service nginx reload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo ln -s /etc/nginx/sites-available/blog.liangdahong.com /etc/nginx/sites-enabled/blog.liangdahong.com</span><br><span class="line">sudo ln -s /etc/nginx/sites-available/api.liangdahong.com /etc/nginx/sites-enabled/api.liangdahong.com</span><br></pre></td></tr></table></figure><p>mac -&gt; linux</p><p><a href="https://blog.csdn.net/m82_a1/article/details/97624965" target="_blank" rel="noopener">https://blog.csdn.net/m82_a1/article/details/97624965</a></p><p>使用 id_rsa.pub</p><p>/home/ubuntu/.ssh/authorized_keys</p><p>scp /Users/Mac/Desktop/1/He.java <a href="mailto:ubuntu@123.207.253.160" target="_blank" rel="noopener">ubuntu@123.207.253.160</a>:/home/ubuntu/</p><p>scp /Users/bluemoon/Desktop/未命名文件夹/操作.jpeg <a href="mailto:ubuntu@123.207.253.160" target="_blank" rel="noopener">ubuntu@123.207.253.160</a>:/home/ubuntu/</p><p>注意腾讯的是 ubuntu  不是  root</p><p>scp /home/hexoBlog/index.html  /home/root/</p><p>scp -r /Users/Mac/Desktop/root <a href="mailto:ubuntu@123.207.253.160" target="_blank" rel="noopener">ubuntu@123.207.253.160</a>:/home/</p><p> sudo scp -r /Users/Mac/Desktop/root <a href="mailto:ubuntu@123.207.253.160" target="_blank" rel="noopener">ubuntu@123.207.253.160</a>:/home/</p><p> sudo scp -r /Users/Mac/Desktop/me <a href="mailto:ubuntu@123.207.253.160" target="_blank" rel="noopener">ubuntu@123.207.253.160</a>:/home/ubuntu/</p><p>sudo scp -r  /Users/Mac/Desktop/2.底层下-原理.png <a href="mailto:ubuntu@123.207.253.160" target="_blank" rel="noopener">ubuntu@123.207.253.160</a>:/home/ubuntu/</p><p> sudo chmod -R 777 myResources<br> -R 是指级联应用到文件夹里的全部子文件夹和文件<br> 777 是全部用户都拥有最高权限<br> myResources 具体的文件夹或者资源</p><p>ssh 登录到ubuntu</p><p>ssh <a href="mailto:ubuntu@123.207.253.160" target="_blank" rel="noopener">ubuntu@123.207.253.160</a>  </p><a id="more"></a><p>进入 root<br>su root<br>退出 root<br>exit </p><p>// 看系统版本<br>cat /etc/issue</p><p>apt install nginx-core<br>apt install nginx-extras<br>apt install nginx-full<br>apt install nginx-light </p><p>ssl</p><p> sudo scp /home/ubuntu/hexoBlog/other/Resources/blog.liangdahong.com/Nginx/1_blog.liangdahong.com_bundle.crt  /etc/nginx/<br>sudo scp /home/ubuntu/hexoBlog/other/Resources/blog.liangdahong.com/Nginx/2_blog.liangdahong.com.key  /etc/nginx/</p><p>server {</p><pre><code>#SSL 访问端口号为 443listen 443; #填写绑定证书的域名server_name blog.liangdahong.com; #启用 SSL 功能ssl on;#证书文件名称ssl_certificate 1_blog.liangdahong.com_bundle.crt; #私钥文件名称ssl_certificate_key 2_blog.liangdahong.com.key; ssl_session_timeout 5m;#请按照以下协议配置ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on;location / {   #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。    root /home/ubuntu/hexoBlog;     index  index.html index.htm;}</code></pre><p>}</p><p>server {<br>        server_name blog.liangdahong.com;<br>        listen 80;<br>        try_files $uri @proxy;<br>        client_max_body_size 20m;<br>        root /home/ubuntu/hexoBlog;<br>        location @proxy {<br>                proxy_pass_header Server;<br>                proxy_set_header Host $host;<br>                proxy_set_header X-Real-IP $remote_addr;<br>                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>                proxy_pass_header Server;<br>                proxy_connect_timeout 3s;<br>                proxy_read_timeout 10s;<br>                proxy_redirect off;<br>        }<br>}</p><p>sudo service nginx restart</p><p>sudo scp /home/ubuntu/hexoBlog/other/Resources/liangdahong.com/Nginx/1_liangdahong.com_bundle.crt /etc/nginx/<br> sudo scp /home/ubuntu/hexoBlog/other/Resources/liangdahong.com/Nginx/2_liangdahong.com.key /etc/nginx/</p><p>server {</p><pre><code>#SSL 访问端口号为 443listen 443; #填写绑定证书的域名server_name liangdahong.com; #启用 SSL 功能ssl on;#证书文件名称ssl_certificate 1_liangdahong.com_bundle.crt ; #私钥文件名称ssl_certificate_key 2_liangdahong.com.key; ssl_session_timeout 5m;#请按照以下协议配置ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on;location / {   #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。    root /home/ubuntu/hexoBlog/other/me;     index  index.html index.htm;}</code></pre><p>}</p><p>sudo scp /home/ubuntu/hexoBlog/other/Resources/resume.liangdahong.com/Nginx/1_resume.liangdahong.com_bundle.crt /etc/nginx/<br>sudo scp /home/ubuntu/hexoBlog/other/Resources/resume.liangdahong.com/Nginx/2_resume.liangdahong.com.key /etc/nginx/</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/fcwys/linux/exgglu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.yuque.com/fcwys/linux/exgglu&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo supervisorctl status        //查看所有进程的状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo supervisorctl stop hello       //停止es&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo supervisorctl start hello      //启动es&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo supervisorctl restart       //重启es&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo supervisorctl update        //配置文件修改后使用该命令加载新的配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo supervisorctl reload        //重新启动配置中的所有程序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注：把es换成all可以管理配置中的所有进程。直接输入supervisorctl进入supervisorctl的shell交互界面，此时上面的命令不带supervisorctl可直接使用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kill 进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo lsof -i :8080 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo lsof -i :8080nana&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;======&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 修改代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1、修改代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2、打包 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo vapor build --release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3、 重新启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo supervisorctl restart hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;======&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo vapor new hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo vapor build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用vapor build或者vapor build --release编译项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用vapor run serve运行项目。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error (1):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error: failed to clone; Cloning into bare repository &amp;apos;/home/ubuntu/hello/.build/repositories/swift-nio.git-8838494804493912501&amp;apos;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error: RPC failed; curl 18 transfer closed with outstanding read data remaining&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: The remote end hung up unexpectedly&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: early EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: index-pack failed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;hello&amp;apos; /home/ubuntu/hello: error: product dependency &amp;apos;FluentSQLite&amp;apos; not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;hello&amp;apos; /home/ubuntu/hello: error: product dependency &amp;apos;Vapor&amp;apos; not found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Nginx配置：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;替换以下“你的域名”  为你的域名地址， api 根据你的需要换成 www 或者其他字符。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第一步&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo vi /etc/nginx/sites-available/api.你的域名.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二步，填入以下内容，然后按 esc 输入 :wq 按回车&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server_name api.你的域名.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listen 80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try_files $uri @proxy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        client_max_body_size 20m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        location @proxy &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass http://127.0.0.1:8080;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass_header Server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header Host $host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Real-IP $remote_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass_header Server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_connect_timeout 3s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_read_timeout 10s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[program:hello]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;command=sudo /home/ubuntu/hello/.build/release/Run serve --env=production&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;directory=/home/ubuntu/Hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autorestart=false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stdout_logfile=/var/log/supervisor/%(program_name)-stdout.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stderr_logfile=/var/log/supervisor/%(program_name)-stderr.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;command=/home/vapor/ubuntu/hello/.build/release/Run serve --env=production&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;directory=/home/vapor/hello/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user=www-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stdout_logfile=/var/log/supervisor/%(program_name)-stdout.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stderr_logfile=/var/log/supervisor/%(program_name)-stderr.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo supervisorctlre read&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo supervisorctl add hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo supervisorctl start hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; sudo supervisorctl start hellofind / -name supervisor.sock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三步  执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -s /etc/nginx/sites-available/api.你的域名.com /etc/nginx/sites-enabled/api.你的域名.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -s /etc/nginx/sites-available/hexo.com /etc/nginx/sites-enabled/hexo.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第四步，执行以下2个命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service nginx start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service nginx reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service nginx restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;api&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server_name api.liangdahong.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listen 80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try_files $uri @proxy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        client_max_body_size 20m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        location @proxy &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass http://127.0.0.1:8080;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass_header Server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header Host $host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Real-IP $remote_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass_header Server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_connect_timeout 3s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_read_timeout 10s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_redirect off;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; server&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listen          8081 default_server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listen          [::]:8081 default_server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server_name     blog.liangdahong.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root            /home/hexoBlog;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server_name blog.liangdahong.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listen 80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try_files $uri @proxy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        client_max_body_size 20m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root /home/hexoBlog;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        location @proxy &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass_header Server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header Host $host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Real-IP $remote_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass_header Server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_connect_timeout 3s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_read_timeout 10s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_redirect off;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server_name liangdahong.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listen 80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try_files $uri @proxy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        client_max_body_size 20m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root /home/ubuntu/hexoBlog/other/me;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        location @proxy &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass_header Server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header Host $host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Real-IP $remote_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass_header Server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_connect_timeout 3s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_read_timeout 10s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_redirect off;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listen          8081 default_server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listen          [::]:8081 default_server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server_name     blog.liangdahong.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root            /home/hexoBlog;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listen          8081 default_server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listen          [::]:8081 default_server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server_name     blog.liangdahong.com;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root            /home/hexoBlog;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -s /etc/nginx/sites-available/api.liangdahong.com /etc/nginx/sites-enabled/api.liangdahong.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -s /etc/nginx/sites-available/hexo.com /etc/nginx/sites-enabled/hexo.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第四步，执行以下2个命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vim &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service nginx reload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -s /etc/nginx/sites-available/blog.liangdahong.com /etc/nginx/sites-enabled/blog.liangdahong.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -s /etc/nginx/sites-available/api.liangdahong.com /etc/nginx/sites-enabled/api.liangdahong.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mac -&amp;gt; linux&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m82_a1/article/details/97624965&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/m82_a1/article/details/97624965&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 id_rsa.pub&lt;/p&gt;
&lt;p&gt;/home/ubuntu/.ssh/authorized_keys&lt;/p&gt;
&lt;p&gt;scp /Users/Mac/Desktop/1/He.java &lt;a href=&quot;mailto:ubuntu@123.207.253.160&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ubuntu@123.207.253.160&lt;/a&gt;:/home/ubuntu/&lt;/p&gt;
&lt;p&gt;scp /Users/bluemoon/Desktop/未命名文件夹/操作.jpeg &lt;a href=&quot;mailto:ubuntu@123.207.253.160&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ubuntu@123.207.253.160&lt;/a&gt;:/home/ubuntu/&lt;/p&gt;
&lt;p&gt;注意腾讯的是 ubuntu  不是  root&lt;/p&gt;
&lt;p&gt;scp /home/hexoBlog/index.html  /home/root/&lt;/p&gt;
&lt;p&gt;scp -r /Users/Mac/Desktop/root &lt;a href=&quot;mailto:ubuntu@123.207.253.160&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ubuntu@123.207.253.160&lt;/a&gt;:/home/&lt;/p&gt;
&lt;p&gt; sudo scp -r /Users/Mac/Desktop/root &lt;a href=&quot;mailto:ubuntu@123.207.253.160&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ubuntu@123.207.253.160&lt;/a&gt;:/home/&lt;/p&gt;
&lt;p&gt; sudo scp -r /Users/Mac/Desktop/me &lt;a href=&quot;mailto:ubuntu@123.207.253.160&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ubuntu@123.207.253.160&lt;/a&gt;:/home/ubuntu/&lt;/p&gt;
&lt;p&gt;sudo scp -r  /Users/Mac/Desktop/2.底层下-原理.png &lt;a href=&quot;mailto:ubuntu@123.207.253.160&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ubuntu@123.207.253.160&lt;/a&gt;:/home/ubuntu/&lt;/p&gt;
&lt;p&gt; sudo chmod -R 777 myResources&lt;br&gt; -R 是指级联应用到文件夹里的全部子文件夹和文件&lt;br&gt; 777 是全部用户都拥有最高权限&lt;br&gt; myResources 具体的文件夹或者资源&lt;/p&gt;
&lt;p&gt;ssh 登录到ubuntu&lt;/p&gt;
&lt;p&gt;ssh &lt;a href=&quot;mailto:ubuntu@123.207.253.160&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ubuntu@123.207.253.160&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift Codable</title>
    <link href="http://liangdahong.com/2019/11/08/00-%E6%8A%80%E6%9C%AF-iOS/Swift-Codable/"/>
    <id>http://liangdahong.com/2019/11/08/00-技术-iOS/Swift-Codable/</id>
    <published>2019-11-08T02:34:18.000Z</published>
    <updated>2019-11-08T02:40:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们有模型如下</span></span><br><span class="line">    <span class="comment">// 要使用 Codable 需要模型遵守 Codable 协议</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">User</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> userId: <span class="type">Int</span>?</span><br><span class="line">        <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">        <span class="keyword">var</span> height: <span class="type">CGFloat</span>?</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> jsonString =</span><br><span class="line">     <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">     &#123;</span></span><br><span class="line"><span class="string">       "</span>userId<span class="string">": 1,</span></span><br><span class="line"><span class="string">       "</span>name<span class="string">": "</span><span class="type">Jack</span><span class="string">",</span></span><br><span class="line"><span class="string">       "</span>height<span class="string">": 1.7,</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">     "</span><span class="string">""</span></span><br><span class="line">     <span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">let</span> data = jsonString.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8) &#123;</span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">let</span> user = <span class="keyword">try</span>? decoder.decode(<span class="type">User</span>.<span class="keyword">self</span>, from: data) &#123;</span><br><span class="line">            <span class="built_in">print</span>(user)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jsonString-gt-data"><a href="#jsonString-gt-data" class="headerlink" title="jsonString -&gt; data"></a>jsonString -&gt; data</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsonString -&gt; data</span></span><br><span class="line"><span class="number">_</span> = <span class="string">"&#123;&#125;"</span>.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8)</span><br></pre></td></tr></table></figure><h2 id="Dictionary-gt-data"><a href="#Dictionary-gt-data" class="headerlink" title="Dictionary -&gt; data"></a>Dictionary -&gt; data</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dict -&gt; data</span></span><br><span class="line">  <span class="keyword">let</span> jsonDic = [</span><br><span class="line">      <span class="string">"userId"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Jack"</span>,</span><br><span class="line">      <span class="string">"height"</span>: <span class="number">1.7</span>,</span><br><span class="line">      ] <span class="keyword">as</span> [<span class="type">String</span> : <span class="type">Any</span>]</span><br><span class="line">  <span class="keyword">guard</span> <span class="type">JSONSerialization</span>.isValidJSONObject(jsonDic) <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">_</span> = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.data(withJSONObject: jsonDic, options:[])</span><br></pre></td></tr></table></figure><h2 id="data-gt-Dictionary"><a href="#data-gt-Dictionary" class="headerlink" title="data -&gt; Dictionary"></a>data -&gt; Dictionary</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonDic = [</span><br><span class="line">    <span class="string">"userId"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Jack"</span>,</span><br><span class="line">    <span class="string">"height"</span>: <span class="number">1.7</span>,</span><br><span class="line">    ] <span class="keyword">as</span> [<span class="type">String</span> : <span class="type">Any</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// dict -&gt; data</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> data = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.data(withJSONObject: jsonDic, options:[]) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// data -&gt; dict</span></span><br><span class="line">  <span class="comment">// json 解析</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> dic = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data, options: []) &#123;</span><br><span class="line">        <span class="built_in">print</span>(dic)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Key替换"><a href="#Key替换" class="headerlink" title="Key替换"></a>Key替换</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">User</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> userId: <span class="type">Int</span>?</span><br><span class="line">        <span class="keyword">var</span> desc: <span class="type">String</span>?</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模型的 Key : 服务器返回 Key</span></span><br><span class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">            <span class="keyword">case</span> userId</span><br><span class="line">            <span class="keyword">case</span> desc = <span class="string">"description"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">let</span> jsonString =</span><br><span class="line">     <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">     &#123;</span></span><br><span class="line"><span class="string">       "</span>userId<span class="string">": 1,</span></span><br><span class="line"><span class="string">       "</span>description<span class="string">": "</span><span class="type">Jack</span><span class="string">",</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string">     "</span><span class="string">""</span></span><br><span class="line">  </span><br><span class="line">     <span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">let</span> data = jsonString.data(using: <span class="type">String</span>.<span class="type">Encoding</span>.utf8) &#123;</span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">let</span> user = <span class="keyword">try</span>? decoder.decode(<span class="type">User</span>.<span class="keyword">self</span>, from: data) &#123;</span><br><span class="line">            <span class="built_in">print</span>(user)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift学习笔记</title>
    <link href="http://liangdahong.com/2019/10/22/00-%E6%8A%80%E6%9C%AF-iOS/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liangdahong.com/2019/10/22/00-技术-iOS/Swift学习笔记/</id>
    <published>2019-10-22T08:54:21.000Z</published>
    <updated>2019-12-14T19:19:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// repeating 重复</span></span><br><span class="line"><span class="keyword">var</span> threeDoubles = <span class="type">Array</span>(repeating: <span class="number">0.0</span>, <span class="built_in">count</span>: <span class="number">3</span>)</span><br><span class="line"><span class="comment">// +=</span></span><br><span class="line">threeDoubles+=threeDoubles;</span><br><span class="line"></span><br><span class="line">threeDoubles.append(<span class="number">10.0</span>)</span><br><span class="line">threeDoubles.append(contentsOf: [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">threeDoubles.insert(<span class="number">1.0</span>, at: <span class="number">0</span>)</span><br><span class="line">threeDoubles.insert(contentsOf: [<span class="number">10.0</span>], at: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chars: [<span class="type">Character</span>] = [<span class="string">"a"</span>]</span><br><span class="line">chars.insert(contentsOf: <span class="string">"heii"</span>, at: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cc = <span class="string">""</span></span><br><span class="line">cc.insert(contentsOf: <span class="string">"cc"</span>, at: <span class="string">""</span>.startIndex)</span><br><span class="line">cc.insert(<span class="string">"c"</span>, at: <span class="string">""</span>.startIndex)</span><br><span class="line"><span class="keyword">let</span> c11: <span class="type">Character</span> = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="type">Array</span>(<span class="number">1</span>...<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr.remove(at: <span class="number">0</span>)</span><br><span class="line">arr.removeFirst()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从头开始删除xxx个obj</span></span><br><span class="line">arr.removeFirst(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 从尾开始删除xxx个obj</span></span><br><span class="line">arr.removeLast(<span class="number">1</span>)</span><br><span class="line">arr.removeSubrange(<span class="number">1</span>...<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 删除最后一个obj</span></span><br><span class="line">arr.popLast()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除obj  是否保留容量</span></span><br><span class="line">arr.removeAll(keepingCapacity: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊初始化</span></span><br><span class="line"><span class="keyword">var</span> numbers = <span class="type">Array</span>(<span class="number">1</span>..&lt;<span class="number">7</span>)</span><br><span class="line"><span class="keyword">var</span> numbers1 = [<span class="type">Int</span>](<span class="number">1</span>..&lt;<span class="number">7</span>)</span><br><span class="line">[<span class="type">Int</span>]([<span class="number">2222</span>:<span class="string">""</span>,<span class="number">222</span>:<span class="string">""</span>].keys)</span><br><span class="line">[<span class="type">Int</span>]([<span class="number">2222</span>:<span class="string">""</span>,<span class="number">222</span>:<span class="string">""</span>].keys)</span><br><span class="line"><span class="type">Array</span>([<span class="number">2222</span>:<span class="string">""</span>,<span class="number">222</span>:<span class="string">""</span>].keys)</span><br><span class="line"><span class="keyword">let</span> a = [<span class="type">Character</span>](<span class="string">"abccc"</span>)</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="type">Array</span>&lt;<span class="type">Character</span>&gt;(<span class="string">"abccc"</span>)</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="type">Array</span>(<span class="string">"abccc"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块替换</span></span><br><span class="line"><span class="comment">// 把 4 5 6 这部分换为 [100, 200] 会操作数组的个数</span></span><br><span class="line"><span class="comment">// [100,200,4,5,6,7,8]</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">arr1[<span class="number">0</span>...<span class="number">2</span>] = [<span class="number">100</span>, <span class="number">200</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// for-in</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> [<span class="string">"1"</span>, <span class="string">"2"</span>] &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="number">_</span>, <span class="number">_</span>) <span class="keyword">in</span> [<span class="string">"1"</span>, <span class="string">"2"</span>].enumerated() &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="number">2</span> &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>..&lt;<span class="number">2</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 倒序</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>].reversed() &#123;</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳动循环</span></span><br><span class="line"><span class="comment">// 2 4 6 8 10 12</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">2</span>, through: <span class="number">12</span>, by: <span class="number">2</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach 和 oc  enum差不多 不可以使用 break 和 comm来控制循环</span></span><br><span class="line"><span class="comment">// 原理和oc的enum遍历类似 return 只可以退出此次循环</span></span><br><span class="line">[<span class="string">""</span>].forEach &#123; (item) <span class="keyword">in</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// enumerated</span></span><br><span class="line"><span class="comment">// reversed 倒序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="number">_</span>, <span class="number">_</span>) <span class="keyword">in</span> [<span class="string">"1"</span>].enumerated().reversed() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="keyword">var</span> makeIterator = [<span class="type">Int</span>](<span class="number">2</span>...<span class="number">20</span>).makeIterator()</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">let</span> num = makeIterator.next() &#123;</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>].startIndex</span><br><span class="line">[<span class="number">1</span>].endIndex</span><br><span class="line">[<span class="number">1</span>].<span class="built_in">count</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// indices 来遍历 arr 的索引区间进行遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ([<span class="type">Character</span>](<span class="string">"abc"</span>)).<span class="built_in">indices</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> rang1 = ([<span class="type">Character</span>](<span class="string">"abc"</span>)).<span class="built_in">indices</span></span><br><span class="line"><span class="keyword">let</span> rang2 = (<span class="number">1</span>...<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr 是否包含 obj</span></span><br><span class="line"><span class="comment">// [1].contains(&lt;#T##element: Int##Int#&gt;)</span></span><br><span class="line"><span class="comment">// 遍历数组中是否包含指定obj 但具体是否包含是自己实现的</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = [<span class="number">1</span>,<span class="number">100</span>,<span class="number">200</span>].<span class="built_in">contains</span> &#123; (num) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"==<span class="subst">\(num)</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">111</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>,<span class="number">100</span>,<span class="number">200</span>].<span class="built_in">contains</span> &#123;</span><br><span class="line">    (num) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否全部obj 满足xx条件</span></span><br><span class="line">[<span class="number">1</span>].allSatisfy &#123; (num) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写 $0</span></span><br><span class="line">[<span class="number">1</span>].allSatisfy(&#123;$<span class="number">0</span> &gt; <span class="number">10</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一个obj</span></span><br><span class="line">[<span class="number">1</span>].first</span><br><span class="line"><span class="comment">// 获取第一个满足xxx条件的obj</span></span><br><span class="line">[<span class="number">1</span>].first &#123; (num) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在数组中第一个为aa 的元素的位置</span></span><br><span class="line">[<span class="string">""</span>].firstIndex(of: <span class="string">"aa"</span>)</span><br><span class="line"><span class="comment">// 获取第一个满足xxx条件的obj的index</span></span><br><span class="line">[<span class="number">1</span>].firstIndex &#123; (num) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同理</span></span><br><span class="line">[<span class="number">1</span>].last</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// min max</span></span><br><span class="line">[<span class="number">1</span>].<span class="built_in">min</span>()</span><br><span class="line">[<span class="number">1</span>].<span class="built_in">min</span> &#123; (num, num2) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">1</span>].<span class="built_in">min</span> &#123;$<span class="number">0</span> &gt; $<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>].<span class="built_in">max</span>()</span><br><span class="line">[<span class="number">1</span>].<span class="built_in">max</span> &#123; (n1, n2) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ArraySlice arr切片 和 Substring 类似，共享内存</span></span><br><span class="line"><span class="comment">// drop 踢出xxx 返回一个 new 的 ArraySlice</span></span><br><span class="line"><span class="keyword">let</span> arrs = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>][<span class="number">1</span>...<span class="number">2</span>]</span><br><span class="line"><span class="comment">// 踢出第一个 得到第1个到最后一个的 ArraySlice（切片Arr）</span></span><br><span class="line">[<span class="number">1</span>].<span class="built_in">dropFirst</span>()</span><br><span class="line"><span class="comment">// 踢最后一个 得到的arr</span></span><br><span class="line">[<span class="number">1</span>].<span class="built_in">dropLast</span>()</span><br><span class="line"><span class="comment">// 从后面开始踢几个 得到的arr</span></span><br><span class="line">[<span class="number">1</span>].<span class="built_in">dropLast</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 从前面开始踢几个 得到的arr</span></span><br><span class="line">[<span class="number">1</span>].<span class="built_in">dropFirst</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 踢出满足条件的obj 得到的arr</span></span><br><span class="line">[<span class="number">1</span>].drop &#123; (num) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组前面的obj xxx个</span></span><br><span class="line">[<span class="number">1</span>].<span class="keyword">prefix</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 获取数组前面的obj 到xxx位置 不包括xxx位置，1=表示到索引0 和prefix(1)结果一样</span></span><br><span class="line">[<span class="number">1</span>].<span class="keyword">prefix</span>(upTo: <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 获取数组前面的obj 到xxx位置 包括xxx位置，1=表示到索引1</span></span><br><span class="line">[<span class="number">1</span>].<span class="keyword">prefix</span>(through: <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 从前面开始获取满足条件的 obj  到y第一个不满足就停止</span></span><br><span class="line">[<span class="number">1</span>].<span class="keyword">prefix</span> &#123; (num) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取最后的固定长度</span></span><br><span class="line">[<span class="number">1</span>].suffix(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 从指定索引xxx到结束 （包含指定索引）</span></span><br><span class="line">[<span class="number">1</span>].suffix(from: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// rang</span></span><br><span class="line">[<span class="number">11</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>][<span class="number">1</span>...<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>][...]</span><br><span class="line">[<span class="number">11</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>][<span class="number">1</span>..&lt;<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a111 = <span class="type">Array</span>([<span class="number">1</span>][...])</span><br><span class="line"><span class="keyword">let</span> a112 = [<span class="number">1</span>][...]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重排操作</span></span><br><span class="line"><span class="comment">// 随机打乱 arr 顺序</span></span><br><span class="line"><span class="keyword">var</span> shuffleArr = [<span class="number">1</span>]</span><br><span class="line">shuffleArr.shuffle()</span><br><span class="line"><span class="comment">// 随机打乱数组顺序 同时返回 原arr不改变</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>].shuffled()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆序</span></span><br><span class="line"><span class="comment">// 把 arr 逆序 修改原arr</span></span><br><span class="line">shuffleArr.<span class="built_in">reverse</span>()</span><br><span class="line"><span class="comment">// 把 arr 逆序 不改原arr</span></span><br><span class="line">[<span class="number">1</span>].reversed()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分组 partition</span></span><br><span class="line"><span class="comment">// 把 arr 由xxx条件分组，系统会自动把满足条件的 放在前面，不满足的放在后面</span></span><br><span class="line"><span class="comment">// 返回分割点的 index</span></span><br><span class="line"><span class="comment">// 系统不保障obj之间的顺序 顺序快一点打乱 主要是把满足条件在z前面就行</span></span><br><span class="line">shuffleArr.<span class="built_in">partition</span> &#123; (num) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">shuffleArr.<span class="built_in">sort</span>()</span><br><span class="line">shuffleArr.sorted()</span><br><span class="line">shuffleArr.<span class="built_in">sort</span> &#123; (n1, n2) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">shuffleArr.sorted &#123; (n1, n2) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line">shuffleArr.swapAt(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串数组拼接</span></span><br><span class="line"><span class="comment">// 把字符串数组直接拼接起来</span></span><br><span class="line">[<span class="string">"zzz"</span>,<span class="string">"a"</span>].joined()</span><br><span class="line"><span class="comment">// 把字符串数组用 xxx 拼接起来</span></span><br><span class="line">[<span class="string">"zzz"</span>,<span class="string">"a"</span>].joined(separator: <span class="string">","</span>)</span><br><span class="line"><span class="comment">// Sequence 序列性质的数组也可以拼接</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">1</span>...<span class="number">2</span>, <span class="number">10</span>...<span class="number">20</span>].joined(separator: <span class="number">2</span>...<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 1 2 10 ... 20</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">222</span>,<span class="number">222222</span>]].joined(separator: [<span class="number">1</span>,<span class="number">2</span>]) &#123;</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr 的底层实现</span></span><br><span class="line"><span class="comment">//Sequence;</span></span><br><span class="line"><span class="comment">//Collection;</span></span><br><span class="line"><span class="comment">//RangeReplaceableCollection;</span></span><br><span class="line"><span class="comment">//Array;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 arr 实现 Stack</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> es = [<span class="type">T</span>]()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> es.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> es.isEmpty</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> es.last</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p><img src="https://liangdahong.com/images/0/20191024235512.png" alt=""><br><img src="https://liangdahong.com/images/0/20191024235513.png" alt=""><br><img src="https://liangdahong.com/images/0/20191024235940.png" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set 中的 obj 必须是可哈希的就和 dict的key一样必须可以哈希</span></span><br><span class="line"><span class="comment">// 可哈希才可以判断是否已经存在</span></span><br><span class="line"><span class="comment">// 默认系统值类型都是可以哈希的</span></span><br><span class="line"><span class="comment">// 自定义类型可以实现哈希即可</span></span><br><span class="line"><span class="keyword">let</span>  set1 = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"><span class="keyword">var</span>  set2: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"a"</span>]</span><br><span class="line">set2.insert(<span class="string">"cc"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> set2 &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> set2.sorted() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由set-&gt;arr</span></span><br><span class="line"><span class="comment">//set2.sorted(by: &lt;#T##(String, String) throws -&gt; Bool#&gt;)</span></span><br><span class="line"><span class="comment">//set2.sorted()</span></span><br><span class="line"><span class="comment">//set2.isEmpty</span></span><br><span class="line"><span class="comment">//set2.count</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="comment">//set2.insert(&lt;#T##newMember: Hashable##Hashable#&gt;)</span></span><br><span class="line"><span class="comment">// 更新obj 哈希一样时就更新 没有时就增加</span></span><br><span class="line"><span class="comment">//set2.update(with: "bb")</span></span><br><span class="line"><span class="built_in">print</span>(set2)</span><br><span class="line">set2.update(with: <span class="string">"aaaaaa"</span>)</span><br><span class="line"><span class="built_in">print</span>(set2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤</span></span><br><span class="line"><span class="comment">// 得到一个新的 set  是满足条件的 obj</span></span><br><span class="line">set2.<span class="built_in">filter</span> &#123; (num) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到一个新的 arr  是满足条件的 obj</span></span><br><span class="line">set2.<span class="built_in">filter</span> &#123; (num) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂未理解这个</span></span><br><span class="line"><span class="comment">//set2.remove(at: &lt;#T##Set&lt;String&gt;.Index#&gt;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法 获取 set 的所有子集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 底层实现</span></span><br></pre></td></tr></table></figure><h1 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Int</span>&gt;()</span><br><span class="line">[<span class="type">String</span>: <span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">let</span> dic: <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Int</span>&gt; = [:]</span><br><span class="line"><span class="keyword">var</span> dic1: [<span class="type">String</span>: <span class="type">Any</span>] = [<span class="string">"aaaaa"</span>: <span class="number">100</span>, <span class="string">"a"</span>: <span class="string">""</span>]</span><br><span class="line">[<span class="string">""</span>: <span class="number">1</span>].<span class="built_in">count</span></span><br><span class="line">[<span class="string">""</span>: <span class="number">1</span>].isEmpty</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (k, v) <span class="keyword">in</span> [<span class="string">""</span>: <span class="number">1</span>] &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> [<span class="string">""</span>: <span class="number">1</span>].keys &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> [<span class="string">""</span>: <span class="number">1</span>].values &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> [<span class="string">""</span>: <span class="number">1</span>].values.sorted() &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他和arr的操作类似</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dict1 = [<span class="type">String</span>: <span class="type">Int</span>?]()</span><br><span class="line"><span class="comment">// add obj</span></span><br><span class="line">dict1[<span class="string">"a"</span>] = <span class="number">100</span></span><br><span class="line"><span class="comment">// 移除obj</span></span><br><span class="line">dict1[<span class="string">"a"</span>] = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 更新或者添加obj</span></span><br><span class="line">dict1.updateValue(<span class="number">100</span>, forKey: <span class="string">"a"</span>)</span><br><span class="line">dic1.remove(at: dic1.startIndex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// merge 把一个dic合并到另一个dic中去</span></span><br><span class="line">    <span class="keyword">var</span> dict1 = [<span class="string">"a"</span>: <span class="number">10</span>]</span><br><span class="line">    <span class="comment">// dic 把后面的 dic合并到前一个dict中，同key时使用条件来控制</span></span><br><span class="line">    <span class="comment">// b1 是前一个dic</span></span><br><span class="line">    <span class="comment">// b1 是后一个dic</span></span><br><span class="line">    dict1.merge([<span class="string">"a"</span>: <span class="number">1</span>]) &#123; (b1, b2) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> b1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(dict1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// merging 把2个dic合并 得到一个新 dic</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> dict1 = [<span class="string">"a"</span>: <span class="number">10</span>]</span><br><span class="line">        <span class="keyword">let</span> dic = dict1.merging([<span class="string">"a"</span>: <span class="number">1</span>]) &#123; (b1, b2) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> b1</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(dic)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 字典位置暂时无考虑</span></span><br><span class="line">        <span class="comment">// firstIndex</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// KeyValuePairs</span></span><br><span class="line">    <span class="comment">// 一种特殊的dic，拥有顺序，理解为是有顺序的 dict</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> dic = <span class="type">KeyValuePairs</span>&lt;<span class="type">String</span>, <span class="type">Int</span>&gt;()</span><br><span class="line">        <span class="built_in">print</span>(dic)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> dic1: <span class="type">KeyValuePairs</span> = [<span class="string">"a"</span>: <span class="number">100</span>,<span class="string">"b"</span>: <span class="number">100</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"KeyValuePairs"</span>)</span><br><span class="line">        <span class="built_in">print</span>(dic1)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> dic1: <span class="type">Dictionary</span> = [<span class="string">"a"</span>: <span class="number">100</span>,<span class="string">"b"</span>: <span class="number">100</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Dictionary"</span>)</span><br><span class="line">            <span class="built_in">print</span>(dic1)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String-Substring-String-Index"><a href="#String-Substring-String-Index" class="headerlink" title="String Substring String.Index"></a>String Substring String.Index</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">            abcd</span></span><br><span class="line"><span class="string">            abcd</span></span><br><span class="line"><span class="string">            "</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">            abcd\</span></span><br><span class="line"><span class="string">              abcd</span></span><br><span class="line"><span class="string">            "</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">"a*a<span class="subst">\(<span class="number">77</span>*<span class="number">2</span>)</span>"</span></span><br><span class="line"></span><br><span class="line">str1+=<span class="string">""</span></span><br><span class="line">str1 = <span class="string">"1"</span>+<span class="string">"1"</span></span><br><span class="line">str1 == str2</span><br><span class="line"></span><br><span class="line"><span class="comment">// String.Index</span></span><br><span class="line"><span class="comment">// 取下标不可以用 endIndex</span></span><br><span class="line"><span class="string">"abc"</span>.startIndex</span><br><span class="line"><span class="string">"abc"</span>.endIndex</span><br><span class="line"><span class="string">"abc"</span>[<span class="string">"abc"</span>.startIndex]</span><br><span class="line"><span class="string">"abc"</span>[<span class="string">"abc"</span>.index(before: <span class="string">"abc"</span>.endIndex)]</span><br><span class="line"><span class="string">"abc"</span>[<span class="string">"abc"</span>.index(after: <span class="string">"abc"</span>.startIndex)]</span><br><span class="line"><span class="string">"abc"</span>.index(<span class="string">"abc"</span>.startIndex, offsetBy: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Substring</span></span><br><span class="line"><span class="string">"abc"</span>.startIndex..&lt;<span class="string">"abc"</span>.endIndex</span><br><span class="line"><span class="string">"abc"</span>[<span class="string">"abc"</span>.startIndex..&lt;<span class="string">"abc"</span>.startIndex]</span><br><span class="line"><span class="string">"abc"</span>[<span class="string">"abc"</span>.startIndex..&lt;<span class="string">"abc"</span>.endIndex]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从前面开始取2个长度</span></span><br><span class="line"><span class="string">"abc"</span>.<span class="keyword">prefix</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 从前面开始取到指定位置</span></span><br><span class="line"><span class="string">"abc"</span>.<span class="keyword">prefix</span>(upTo: <span class="string">"abc"</span>.index(after: <span class="string">"abc"</span>.startIndex))</span><br><span class="line"><span class="comment">// 是否为这个前缀</span></span><br><span class="line"><span class="string">"abc"</span>.hasPrefix(<span class="string">"abc"</span>)</span><br><span class="line"><span class="comment">// 取后面的x位</span></span><br><span class="line"><span class="string">"abc"</span>.suffix(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 从x位置开始取</span></span><br><span class="line"><span class="string">"abc"</span>.suffix(from: <span class="string">"abc"</span>.startIndex)</span><br><span class="line"><span class="string">"abc"</span>.hasSuffix(<span class="string">"abc"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串分割</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">"a b c"</span>.<span class="built_in">split</span>(separator: <span class="string">" "</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="type">String</span>(item)</span><br><span class="line">    <span class="built_in">print</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 String 增加功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取从开头开始到指定xxx位置的字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">subString</span><span class="params">(to index: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>[<span class="number">0</span>..&lt;index]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取从xxx位置开始到结束的字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">subString</span><span class="params">(from index: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>[index..&lt;<span class="keyword">self</span>.<span class="built_in">count</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取指定范围的字符串</span></span><br><span class="line">    <span class="keyword">subscript</span> (r: <span class="type">Range</span>&lt;<span class="type">Int</span>&gt;) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> start = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: r.lowerBound, limitedBy: <span class="keyword">self</span>.endIndex) ?? <span class="keyword">self</span>.endIndex</span><br><span class="line">        <span class="keyword">let</span> end = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: r.upperBound, limitedBy: <span class="keyword">self</span>.endIndex) ?? <span class="keyword">self</span>.endIndex</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(<span class="keyword">self</span>[start..&lt;end])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取指定位置的字符串</span></span><br><span class="line">    <span class="keyword">subscript</span> (n: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>[n..&lt;n+<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取指字符串在字符串中的范围</span></span><br><span class="line">    <span class="keyword">subscript</span> (str: <span class="type">String</span>) -&gt; <span class="type">Range</span>&lt;<span class="type">Index</span>&gt;? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.range(of: str)        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String 的一个扩展</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">subString</span><span class="params">(to index: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(<span class="keyword">self</span>[..&lt;<span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: index)])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">subString</span><span class="params">(from index: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(<span class="keyword">self</span>[<span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: index)...])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">subscript</span> (r: <span class="type">Range</span>&lt;<span class="type">Int</span>&gt;) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> start = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: r.lowerBound, limitedBy: <span class="keyword">self</span>.endIndex) ?? <span class="keyword">self</span>.endIndex</span><br><span class="line">        <span class="keyword">let</span> end = <span class="keyword">self</span>.index(<span class="keyword">self</span>.startIndex, offsetBy: r.upperBound, limitedBy: <span class="keyword">self</span>.endIndex) ?? <span class="keyword">self</span>.endIndex</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(<span class="keyword">self</span>[start..&lt;end])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">subscript</span> (n:<span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>[n..&lt;n+<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">subscript</span> (str:<span class="type">String</span>) -&gt; <span class="type">Range</span>&lt;<span class="type">Index</span>&gt;? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.range(of: str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运算符</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="literal">false</span></span><br><span class="line">!a</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line">-num</span><br><span class="line">+num</span><br><span class="line">num+=<span class="number">1</span></span><br><span class="line">num-=<span class="number">1</span></span><br><span class="line">num*=<span class="number">1</span></span><br><span class="line">num/=<span class="number">1</span></span><br><span class="line">num &gt; <span class="number">1</span> ? <span class="string">"num&gt;1"</span> : <span class="string">"num&lt;=1"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以溢出运算，循环运算</span></span><br><span class="line"><span class="comment">// &amp;+</span></span><br><span class="line"><span class="comment">// &amp;-</span></span><br><span class="line"><span class="comment">// &amp;*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="type">UInt8</span>.<span class="built_in">max</span>&amp;+<span class="number">1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="type">UInt8</span>.<span class="built_in">max</span>&amp;+<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 255</span></span><br><span class="line"><span class="type">UInt8</span>.<span class="built_in">min</span>&amp;-<span class="number">1</span></span><br><span class="line"><span class="comment">// 254</span></span><br><span class="line"><span class="type">UInt8</span>.<span class="built_in">min</span>&amp;-<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="type">UInt8</span>.<span class="built_in">min</span>&amp;*<span class="number">1</span></span><br><span class="line"><span class="type">UInt8</span>.<span class="built_in">min</span>&amp;*<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并空值运算符</span></span><br><span class="line"><span class="comment">// ?? 如果有值就使用它的值，不然就使用默认值</span></span><br><span class="line"><span class="keyword">var</span> num1: <span class="type">String</span>? = <span class="type">String</span>()</span><br><span class="line">num1 = <span class="literal">nil</span></span><br><span class="line">num1 ?? <span class="string">"abc"</span></span><br><span class="line">(num1 != <span class="literal">nil</span>) ? num1 : <span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNum</span><span class="params">(num1: Int?, num2: Int?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (num1 ?? <span class="number">0</span>) + (num2 ?? <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间运算符</span></span><br><span class="line"><span class="number">0</span>...<span class="number">10</span></span><br><span class="line"><span class="number">0</span>..&lt;<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>][..&lt;<span class="number">2</span>] &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>][...<span class="number">2</span>] &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>][<span class="number">0</span>...] &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rang = ...<span class="number">10</span></span><br><span class="line"><span class="comment">// 是否包含指定数字</span></span><br><span class="line">rang.<span class="built_in">contains</span>(<span class="number">10</span>)</span><br><span class="line">rang.<span class="built_in">contains</span>(<span class="number">11</span>)</span><br><span class="line">rang.<span class="built_in">contains</span>(-<span class="number">1</span>)</span><br><span class="line">rang.<span class="built_in">contains</span>(-<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>].reversed() &#123;</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> (<span class="number">1</span>..&lt;<span class="number">6</span>).reversed() &#123;</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">(<span class="string">"a"</span>...<span class="string">"z"</span>).<span class="built_in">contains</span>(<span class="string">"a"</span>)</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">(<span class="string">"a"</span>...<span class="string">"z"</span>).<span class="built_in">contains</span>(<span class="string">"-"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算</span></span><br><span class="line"><span class="comment">// ~ 取反运算符</span></span><br><span class="line"><span class="comment">// 把数据的二进制位全部取反 1-&gt;0  0-&gt;1</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="number">10</span></span><br><span class="line">~num5</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与运算符 对二进制操作 一假即假</span></span><br><span class="line"><span class="comment">// 1&amp;1 = 1</span></span><br><span class="line"><span class="comment">// 0&amp;1 = 0</span></span><br><span class="line"><span class="comment">// 1&amp;0 = 0</span></span><br><span class="line"><span class="comment">// 0&amp;0 = 0</span></span><br><span class="line"><span class="number">1</span>&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或运算符 对二进制操作 一真即真</span></span><br><span class="line"><span class="comment">// 1&amp;1 = 1</span></span><br><span class="line"><span class="comment">// 0&amp;1 = 1</span></span><br><span class="line"><span class="comment">// 1&amp;0 = 1</span></span><br><span class="line"><span class="comment">// 0&amp;0 = 0</span></span><br><span class="line"><span class="number">1</span>|<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位异或 互斥或 （对二进制操作 同假异真）</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="number">1</span>^<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无符号的左移 右移</span></span><br><span class="line"><span class="comment">// 左移 右移 运算符 &lt;&lt;  &gt;&gt;</span></span><br><span class="line"><span class="comment">// 全部二进制向左或者右移x位，超出的丢掉，空出来的补0</span></span><br><span class="line"><span class="comment">// 减半和加倍算法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有符号的左移 右移操作暂时未展开</span></span><br><span class="line"><span class="comment">// 寻找成对的无符号数丢失的数可以使用 ^ 来处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里可以对一些特殊的算法使用 ^ 来快捷处理。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运算符重载</span></span><br><span class="line"><span class="comment">// 类和结构体可以为现在的运算符提供其他的实现方式</span></span><br><span class="line"><span class="comment">// 如：向量的加法，我们可以使用自定义的结构体同时配合 + （加法）来处理</span></span><br><span class="line"><span class="comment">// 如：class d也可以定义一些特殊的类型来，做类似的  + （加法）运算</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vector2D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Vector2D</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 双目运算符</span></span><br><span class="line">    <span class="comment">// 给结构体处理了 + 运算 （双目运算符）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> +<span class="params">(<span class="keyword">right</span>: Vector2D, <span class="keyword">left</span>: Vector2D)</span></span> -&gt; <span class="type">Vector2D</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Vector2D</span>.<span class="keyword">init</span>(x: <span class="number">1</span>, y: <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// += 需要 inout 来处理可以修改</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> +=<span class="params">(<span class="keyword">right</span>: <span class="keyword">inout</span> Vector2D, <span class="keyword">left</span>: Vector2D)</span></span> -&gt; <span class="type">Vector2D</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Vector2D</span>.<span class="keyword">init</span>(x: <span class="number">1</span>, y: <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单目运算符</span></span><br><span class="line">    <span class="comment">// 单目运算符 prefix 或者 postfix 前缀来修饰</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> !<span class="params">(<span class="keyword">right</span>: Vector2D)</span></span> -&gt; <span class="type">Vector2D</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Vector2D</span>.<span class="keyword">init</span>(x: <span class="number">1</span>, y: <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">postfix</span> <span class="function"><span class="keyword">func</span> -<span class="params">(<span class="keyword">right</span>: Vector2D)</span></span> -&gt; <span class="type">Vector2D</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Vector2D</span>.<span class="keyword">init</span>(x: <span class="number">1</span>, y: <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v = <span class="type">Vector2D</span>.<span class="keyword">init</span>(x: <span class="number">1</span>, y: <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = v + v</span><br><span class="line">!v</span><br><span class="line">v+=v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价运算符 在类和结构体默认是不支持系统的等价运算符的  ==</span></span><br><span class="line"><span class="comment">// 所以必须要自己重载才可以使用</span></span><br><span class="line"><span class="comment">// 要配合 Equatable 来使用才可以</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Vector2D</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ==<span class="params">(<span class="keyword">right</span>: Vector2D, <span class="keyword">left</span>: Vector2D)</span></span> -&gt; <span class="type">Vector2D</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">v==v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Swift 为自定义的如下类型实现了 == 等价运算符</span></span><br><span class="line"><span class="comment">// 1.遵循了 Equatable 协议，而且只有存储属性结构体</span></span><br><span class="line"><span class="comment">// 1.1 自定义处理的方式</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vector2D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Vector2D</span> : <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(<span class="keyword">left</span>: Vector2D, <span class="keyword">right</span>: Vector2D)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Vector2D</span>() == <span class="type">Vector2D</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2 系统自动实现了 等价运算符</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vector3D</span> : <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span>, z = <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Vector3D</span>() == <span class="type">Vector3D</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.遵循了 Equatable 协议，关联类型的enum</span></span><br><span class="line"><span class="comment">// 3.没有关联类型的enum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义运算符</span></span><br><span class="line"><span class="comment">// 暂时未展开</span></span><br></pre></td></tr></table></figure><h1 id="循环控制-for-in-repeat-while"><a href="#循环控制-for-in-repeat-while" class="headerlink" title="循环控制 for-in repeat-while"></a>循环控制 for-in repeat-while</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 循环控制 for-in repeat-while</span></span><br><span class="line"><span class="comment">// 遍历序列</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>...<span class="number">10</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="string">"abc"</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历字典</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [<span class="number">1</span>:<span class="number">1</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(item.key)</span><br><span class="line">    <span class="built_in">print</span>(item.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key, v) <span class="keyword">in</span> [<span class="string">"a"</span> : <span class="number">1</span>] &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (idx, obj) <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>].enumerated() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">2</span>, through: <span class="number">12</span>, by: <span class="number">2</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">2</span>, to: <span class="number">12</span>, by: <span class="number">2</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">&#125;<span class="keyword">while</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">false</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// switch swift中switchs默认有 break 功能 而且必须写满全部条件</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">c</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"a"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"b"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"b"</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合匹配</span></span><br><span class="line"><span class="keyword">switch</span> <span class="string">"a"</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"a"</span>, <span class="string">"A"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a A"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间</span></span><br><span class="line"><span class="keyword">switch</span> <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>...<span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"0...3"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元祖处理  (_ 表示此项不比较)</span></span><br><span class="line"><span class="keyword">var</span> point = (<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>,<span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(0,0)"</span>)</span><br><span class="line"><span class="keyword">case</span>:(<span class="number">_</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(_,0)"</span>)</span><br><span class="line"><span class="keyword">case</span>:(<span class="number">0</span>,<span class="number">_</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(_,0)"</span>)</span><br><span class="line"><span class="keyword">case</span>:(<span class="number">0</span>...<span class="number">2</span>,<span class="number">0</span>..&lt;<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(_,0)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以临时变量</span></span><br><span class="line"><span class="keyword">var</span> point1 = (<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="keyword">switch</span> point1 &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>,<span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(0,0)"</span>)</span><br><span class="line"><span class="keyword">case</span>:(<span class="keyword">let</span> x,<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(_,0)"</span>)</span><br><span class="line"><span class="keyword">case</span>:(<span class="number">0</span>,<span class="keyword">let</span> y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(_,0)"</span>)</span><br><span class="line"><span class="keyword">case</span>:(<span class="number">0</span>...<span class="number">2</span>,<span class="number">0</span>..&lt;<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(_,0)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配合 where 来处理 特殊条件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> point3 = (<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="keyword">switch</span> point3 &#123;</span><br><span class="line"><span class="keyword">case</span> (x,y) <span class="keyword">where</span> x == y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x == y"</span>)</span><br><span class="line"><span class="keyword">case</span>:(<span class="keyword">let</span> x,<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(_,0)"</span>)</span><br><span class="line"><span class="keyword">case</span>:(<span class="number">0</span>,<span class="keyword">let</span> y)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(_,0)"</span>)</span><br><span class="line"><span class="keyword">case</span>:(<span class="number">0</span>...<span class="number">2</span>,<span class="number">0</span>..&lt;<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(_,0)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// continue 停止这次循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// break 结束 for-in while switch 等</span></span><br><span class="line"><span class="comment">//      break 在 Swift中是为了理解结束switch 在oc中是为了防止贯穿</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fallthrough 强制到下一个 case，同时下面是否继续贯穿要看下一个 case 是否有  fallthrough</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"1"</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"2"</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"other"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span></span><br><span class="line">wile : <span class="keyword">while</span> num &gt; <span class="number">9</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"===1"</span>)</span><br><span class="line">      <span class="comment">// break 强制处理指定标签 强制退出了 少使用为妙。</span></span><br><span class="line">        <span class="keyword">break</span> wile</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"other1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#if if-let guard-else guard-let-else </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.if</span></span><br><span class="line"><span class="comment">// 2.if-let         在 if 的基础上优化了</span></span><br><span class="line"><span class="comment">// 3.guard-else     不成立就进去，黄金大道。</span></span><br><span class="line"><span class="comment">// 4.guard-let-else 任何一个不成立就进去，黄金大道。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cc</span><span class="params">(<span class="number">_</span> flag: Bool, <span class="built_in">count</span>: Int?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> name: <span class="type">String</span>? = <span class="string">"老王"</span></span><br><span class="line">        <span class="keyword">let</span> age: <span class="type">Int</span>? = <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> name != <span class="literal">nil</span> &amp;&amp; age != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(name! + <span class="type">String</span>(age!))     <span class="comment">// 输出:老王10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> name: <span class="type">String</span>? = <span class="string">"老王"</span></span><br><span class="line">        <span class="keyword">let</span> age: <span class="type">Int</span>? = <span class="number">10</span></span><br><span class="line">        <span class="comment">// nameNew ageNew 一定是非 nil 的</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> nameNew = name,</span><br><span class="line">            <span class="keyword">let</span> ageNew = age &#123;</span><br><span class="line">            <span class="comment">// 进入分支后,nameNew 和 ageNew 一定有值</span></span><br><span class="line">            <span class="built_in">print</span>(nameNew + <span class="type">String</span>(ageNew)) <span class="comment">// 输出:老王10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 强制类型转换</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>? = <span class="string">""</span></span><br><span class="line">    name = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">var</span> name1: <span class="type">String</span>? = <span class="string">""</span></span><br><span class="line">    name1 = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> n = name, <span class="keyword">let</span> n2 = name1, <span class="literal">false</span> == <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(n.<span class="built_in">count</span> + n2.<span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> n = name1 <span class="keyword">as</span>? <span class="type">Array</span>&lt;<span class="type">Any</span>&gt; &#123;</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">guard</span> flag  <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"fa"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> name: <span class="type">String</span>? = <span class="string">"老王"</span></span><br><span class="line">        <span class="keyword">let</span> age: <span class="type">Int</span>? = <span class="number">10</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> nameNew = name,</span><br><span class="line">            <span class="keyword">let</span> ageNew = age <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"姓名 或 年龄 为nil"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(nameNew + <span class="type">String</span>(ageNew))     <span class="comment">// 输出:老王10</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = <span class="built_in">count</span>, <span class="built_in">count</span> ?? <span class="number">10</span>&gt;<span class="number">10</span>, flag == <span class="literal">false</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cc1</span><span class="params">(<span class="number">_</span> flag: Bool, <span class="built_in">count</span>: Int?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不成立就进去。</span></span><br><span class="line">    <span class="comment">// 任何一个不成立都进去，如果有nilj也是不成立。</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> a = <span class="built_in">count</span>, a &gt; <span class="number">10</span>, flag == <span class="literal">false</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"不成立"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cc1(<span class="literal">false</span>, <span class="built_in">count</span>: <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">// 在代码上来控制我们尽量使用黄金大道，不满足条件就尽快返回</span></span><br><span class="line"><span class="comment">// Apple 让我们的真正的代码尽量不要写在 if else 中</span></span><br></pre></td></tr></table></figure><h1 id="模式和模式匹配"><a href="#模式和模式匹配" class="headerlink" title="模式和模式匹配"></a>模式和模式匹配</h1><p><img src="https://liangdahong.com/images/0/20191024102628.png" style="zoom:50%;"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模式和模式匹配</span></span><br><span class="line"><span class="comment">// 模式: 是一个值和复合值的结构</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通配符模式</span></span><br><span class="line"><span class="comment">// _</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="number">100</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标识符模式</span></span><br><span class="line"><span class="keyword">let</span> <span class="type">A</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 值绑定模式</span></span><br><span class="line"><span class="keyword">let</span> po = (<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">switch</span> po &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x,y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x - y"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"default"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组模式</span></span><br><span class="line"><span class="keyword">let</span> pos = [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">0</span>)]</span><br><span class="line"><span class="comment">// 匹配到 y = 0  的元组</span></span><br><span class="line"><span class="keyword">for</span> (x,y) <span class="keyword">in</span> pos <span class="keyword">where</span> y == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"aaa"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// enum 模式 参考enum的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选值模式 31-xxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//let someNum: Int = 10</span></span><br><span class="line"><span class="comment">//if case let x? = someNum &#123;</span></span><br><span class="line"><span class="comment">//    print("ssss")</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换模式 31-xxx</span></span><br><span class="line"><span class="comment">// is Dog 遍历多中类型的数组 使用 swiftch 来匹配出具体的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式模式</span></span><br><span class="line"><span class="keyword">let</span> po1 = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">switch</span> po1 &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>,<span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">1</span>...<span class="number">2</span>,<span class="number">0</span>...<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以配合运算符重载来做一些特殊的匹配</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> salaey: <span class="type">Float</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运算符重载</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ~=<span class="params">(lhs: Range&lt;Float&gt;, rhs: Employee)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.<span class="built_in">contains</span>(rhs.salaey)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> e = <span class="type">Employee</span>.<span class="keyword">init</span>(salaey: <span class="number">100000</span>)</span><br><span class="line"><span class="keyword">switch</span> e &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>..&lt;<span class="number">1000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"收入在 0.0...1000"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"其他"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数-func"><a href="#函数-func" class="headerlink" title="函数  func"></a>函数  func</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(<span class="number">_</span> personName: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi <span class="subst">\(personName)</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">    greet(<span class="string">"li"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(personName: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi <span class="subst">\(personName)</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line">    greet(personName: <span class="string">"li"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐试返回值</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//        func fun1(name: String) -&gt; String &#123;</span></span><br><span class="line"><span class="comment">//            "a" + name</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认值</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">greet11</span><span class="params">(personName: String? = <span class="string">""</span>)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可变参数个数</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">greet2222</span><span class="params">(n: Int?...)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addTwoNum</span><span class="params">(<span class="number">_</span> n1: Int, <span class="number">_</span> n2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mathFunc: ((<span class="type">Int</span>, <span class="type">Int</span>)-&gt;<span class="type">Int</span>) = addTwoNum</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数做为参数来处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMath</span><span class="params">(<span class="number">_</span> funccc: <span class="params">(Int,Int)</span></span></span>-&gt;<span class="type">Int</span> ) &#123;</span><br><span class="line">    funccc(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">printMath(addTwoNum)</span><br><span class="line"></span><br><span class="line"><span class="comment">//内嵌函数</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printMath1</span><span class="params">(<span class="number">_</span> funccc: <span class="params">(Int,Int)</span></span></span>-&gt;<span class="type">Int</span> ) -&gt; ((<span class="type">Int</span>,<span class="type">Int</span>)-&gt;<span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">addTwoNum1111</span><span class="params">(<span class="number">_</span> n1: Int, <span class="number">_</span> n2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n1+n2</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addTwoNum1111</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">paix</span><span class="params">(n1: Int, n2: Int)</span></span> -&gt;<span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n1&gt;n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">222</span>,<span class="number">3</span>].sorted(by: paix)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包表达式</span></span><br><span class="line"><span class="comment">// &#123; (n1: Int, n2: Int) -&gt; Bool in</span></span><br><span class="line"><span class="comment">// return false</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">222</span>,<span class="number">3</span>].sorted (by: &#123; (n1: <span class="type">Int</span>, n2: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> n1&gt;n2</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">222</span>,<span class="number">3</span>].sorted &#123; (n1, n2) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    n1&gt;n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">222</span>,<span class="number">3</span>].sorted &#123; n1, n2 <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> n1&gt;n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单一个表达式 可以直接不加</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">222</span>,<span class="number">3</span>].sorted &#123; n1, n2 <span class="keyword">in</span></span><br><span class="line">    n1&gt;n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $0 第一个参数</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">222</span>,<span class="number">3</span>].sorted &#123;</span><br><span class="line">    $<span class="number">0</span> &gt; $<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接符号</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">222</span>,<span class="number">3</span>].sorted(by: &lt;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾随闭包: 如果最后阳光城参数是闭包时，我们可以直接把</span></span><br><span class="line"><span class="comment">// 尾随闭包 把 （） 已放弃掉叫尾随闭包</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">222</span>,<span class="number">3</span>].sorted&#123;$<span class="number">0</span>&gt;$<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sorted111</span><span class="params">(n: Int, by areInIncreasingOrder: <span class="params">(Int, Int)</span></span></span> -&gt; <span class="type">Bool</span>)  -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sorted111(n: <span class="number">10</span>) &#123; (n, n1) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sorted111(n: <span class="number">10</span>, by: &#123; (n, n1) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>].sorted(by: &#123;(n1,n2) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何捕获值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逃逸闭包: 传给函数的闭包 可能没有在函数中调用，而且其他地方调用，表示这个闭包逃逸了。</span></span><br><span class="line"><span class="comment">// 当func传入的闭包会在func返回后调用时</span></span><br><span class="line"><span class="comment">// 或者传进的闭包会存储到外面的arr中</span></span><br><span class="line"><span class="comment">// 网络请求：函数立即返回 但是 闭包等一下才会真正的调用</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">paix</span><span class="params">(n1: Int, n2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// @escaping</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(bl: @escaping <span class="params">(<span class="params">(Int, Int)</span></span></span></span>-&gt;<span class="type">Int</span>))  -&gt;  (<span class="type">Int</span>, <span class="type">Int</span>)-&gt;<span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bl</span><br><span class="line">    &#125;</span><br><span class="line">    test(bl: paix);</span><br><span class="line">    test(bl: paix)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逃逸闭包在获取属性的时候需使用 self</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMPerson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testclosure1</span><span class="params">(closure: @escaping <span class="params">(<span class="params">()</span></span></span></span>-&gt;())) -&gt; (()-&gt;()) &#123;</span><br><span class="line">        <span class="keyword">return</span> closure</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testclosure2</span><span class="params">(closure: <span class="params">(<span class="params">()</span></span></span></span>-&gt;())) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 逃逸</span></span><br><span class="line">        testclosure1 &#123;</span><br><span class="line">            <span class="keyword">self</span>.x = <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 非逃逸</span></span><br><span class="line">        testclosure2 &#123;</span><br><span class="line">            x = <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动闭包: 是一种不接受任何参数的闭包，同时他会自动打包表达式，同时返回表达式的值</span></span><br><span class="line"><span class="comment">// 自动闭包可以延时处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="comment">// 闭包表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = &#123;</span><br><span class="line">    arr.removeAll()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"=="</span>)</span><br><span class="line"><span class="built_in">c</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"--"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 闭包表达式</span></span><br><span class="line">    <span class="comment">// 定义一个闭包为 c1111</span></span><br><span class="line">    <span class="keyword">let</span> c1111 = &#123;</span><br><span class="line">        (a: <span class="type">Int</span>)  -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">\(a)</span> + aaaaa"</span>)</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(c1111(<span class="number">2222</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 闭包表达式</span></span><br><span class="line">        &#123;</span><br><span class="line">            (a: <span class="type">Int</span>)  -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"<span class="subst">\(a)</span> + aaaaa"</span>)</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        &#125;(<span class="number">9999</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">(closure1: @autoclosure <span class="params">()</span></span></span>-&gt;<span class="type">Bool</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    test1(closure1: <span class="number">1</span>&gt;<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样的函数的 closure1 满足自动闭包的条件我们尝试使用自动闭包来处理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">(closure1: <span class="params">()</span></span></span>-&gt;<span class="type">Bool</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">test1 &#123; () -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更加简洁</span></span><br><span class="line"><span class="comment">// 自动+逃逸</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">(closure1: @escaping @autoclosure <span class="params">()</span></span></span>-&gt;<span class="type">Bool</span>) -&gt; ()-&gt;<span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> closure1</span><br><span class="line">&#125;</span><br><span class="line">test2(closure1: arr.<span class="built_in">count</span> &gt; <span class="number">10</span>)()</span><br></pre></td></tr></table></figure><h1 id="Swift-高阶函数"><a href="#Swift-高阶函数" class="headerlink" title="Swift 高阶函数"></a>Swift 高阶函数</h1><h2 id="map-filter-reduce-flatMap-compactMap"><a href="#map-filter-reduce-flatMap-compactMap" class="headerlink" title="map filter reduce flatMap compactMap"></a>map filter reduce flatMap compactMap</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="comment">// 对于原始集合里的每一个元素，以一个变换后的元素替换之形成- -个新的集合</span></span><br><span class="line"><span class="built_in">print</span>([<span class="number">3</span>].<span class="built_in">map</span> &#123; (num) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> num*num</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ccc =  [<span class="number">2</span>].<span class="built_in">map</span> &#123; (num) -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"<span class="subst">\(num)</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// filter 条件处理</span></span><br><span class="line"><span class="comment">// 对于原始集合里的每一-个元素，通过判定来将其丢弃或者放进新集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Array</span>(<span class="number">1</span>...<span class="number">20</span>).<span class="built_in">filter</span> &#123; $<span class="number">0</span> &lt; <span class="number">10</span></span><br><span class="line">    <span class="comment">// 满足条件的放到新的set中</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce</span></span><br><span class="line"><span class="comment">// 对于原始集合里的每一个元素，作用于当前累积的结果上</span></span><br><span class="line"><span class="comment">// 累积 累加</span></span><br><span class="line"><span class="comment">// 原始值 count加得到的值 n取到的值</span></span><br><span class="line"><span class="comment">// Result 结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Array</span>(<span class="number">19</span>...<span class="number">20</span>).<span class="built_in">reduce</span>(<span class="number">10</span>) &#123; (<span class="built_in">count</span>, n) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">count</span>+n</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// flatMap</span></span><br><span class="line"><span class="comment">// 对于元素是集合的集合，可以得到单级的集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(arr.flatMap &#123; (nums) -&gt; [<span class="type">Int</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> nums.<span class="built_in">map</span>(&#123; (num) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> num*<span class="number">10</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 进一步简化</span></span><br><span class="line">    <span class="built_in">print</span>(arr.flatMap &#123;$<span class="number">0</span>.<span class="built_in">map</span>&#123;$<span class="number">0</span>*<span class="number">10</span>&#125;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// compactMap</span></span><br><span class="line"><span class="comment">// 过滤空值</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是非空就加进去</span></span><br><span class="line">    <span class="comment">// 这里返回的是 String？ 所以是一个 String 数组</span></span><br><span class="line">    <span class="built_in">print</span>([<span class="string">"a"</span>,<span class="literal">nil</span>,<span class="string">"aaa"</span>].compactMap &#123; (str) -&gt; <span class="type">String</span>? <span class="keyword">in</span></span><br><span class="line">        str</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果是非空就加进去</span></span><br><span class="line">    <span class="comment">// 这里返回的是 str?.count 所以是一个Int</span></span><br><span class="line">    <span class="built_in">print</span>([<span class="string">"a"</span>,<span class="literal">nil</span>,<span class="string">"aaa"</span>].compactMap &#123; (str) -&gt; <span class="type">Int</span>? <span class="keyword">in</span></span><br><span class="line">        str?.<span class="built_in">count</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">print</span>([<span class="string">"a"</span>,<span class="literal">nil</span>,<span class="string">"aaa"</span>].compactMap &#123; $<span class="number">0</span>?.<span class="built_in">count</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">具有普遍意义的基本构造单元</span><br><span class="line">●筛选(<span class="built_in">filter</span>)</span><br><span class="line">●映射(<span class="built_in">map</span>)</span><br><span class="line">●折叠/化约(foldL eft/<span class="built_in">reduce</span>等)</span><br></pre></td></tr></table></figure><h1 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ABC</span> : <span class="title">CaseIterable</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">A</span>,<span class="type">B</span>,<span class="type">C</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">ABC</span>.<span class="type">A</span></span><br><span class="line"><span class="keyword">switch</span> <span class="built_in">c</span> &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="type">A</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="type">B</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="type">C</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">ABC</span>.allCases &#123;</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关联值</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Barcode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> upc(<span class="type">Int</span>,<span class="type">Int</span>,<span class="type">Int</span>,<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> qrCode(<span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> code = <span class="type">Barcode</span>.qrCode(<span class="string">"ldh"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> code &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .upc(n1, <span class="number">_</span>,  <span class="number">_</span>,  <span class="number">_</span>):</span><br><span class="line">    <span class="built_in">print</span>(n1)</span><br><span class="line"><span class="keyword">case</span> .qrCode(<span class="keyword">let</span> str):</span><br><span class="line">    <span class="built_in">print</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ASci</span> : <span class="title">Character</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> tab1 = <span class="string">"a"</span></span><br><span class="line">        <span class="keyword">case</span> tab2 = <span class="string">"b"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> as1 = <span class="type">ASci</span>.<span class="keyword">init</span>(rawValue: <span class="string">"a"</span>)</span><br><span class="line">    <span class="built_in">print</span>(as1 ?? <span class="string">"aaa"</span>)</span><br><span class="line">    <span class="number">_</span> = <span class="type">ASci</span>.tab1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是 Int 或者字符串的时候系统自动设置</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Planet</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> a = <span class="number">1</span>,b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a = 1;</span></span><br><span class="line"><span class="comment">// b = 2;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认取名字为它的名字</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ConPassPoint</span> : <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 “aaaaaaa” 是无法初始化成功的 所以是 nil</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> aaa = <span class="type">ConPassPoint</span>.<span class="keyword">init</span>(rawValue: <span class="string">"aaaaaaa"</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(aaa)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"nilll"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归enum</span></span><br><span class="line"><span class="comment">// 递归枚举是拥有另一个枚举作为枚举成员关联值的枚举。当编译器操作递归枚举时必须插入间</span></span><br><span class="line"><span class="comment">// 接寻址层。你可以在声明枚举成员之前使用indirect关键字来明确它是递归的。</span></span><br><span class="line"><span class="comment">// 如说表达式(5+4)* 2在乘法右侧有一个数但有其他表达式在乘法的左侧。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//indirect enum Ari thmeticExpression [</span></span><br><span class="line"><span class="comment">//case</span></span><br><span class="line"><span class="comment">//number(Int)</span></span><br><span class="line"><span class="comment">//case</span></span><br><span class="line"><span class="comment">//addition ( ArithmeticExpression, Ari thmeticExpression)</span></span><br><span class="line"><span class="comment">//case multiplication (Ari thme ticExpression,</span></span><br><span class="line"><span class="comment">//Arithmeti cExpression)</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">//let five = ArithmeticExpression. number(5)</span></span><br><span class="line"><span class="comment">//let four = Arithmetic Expres sion. number(4)</span></span><br><span class="line"><span class="comment">//let sum = Ari thmeticExpression. addition(five, four)</span></span><br><span class="line"><span class="comment">//let product = ArithmeticExpression. multiplication(sum,</span></span><br><span class="line"><span class="comment">//Ari thmeticExpression. number(2))</span></span><br></pre></td></tr></table></figure><h1 id="class-结构体-enum-属性"><a href="#class-结构体-enum-属性" class="headerlink" title="class 结构体 enum 属性"></a>class 结构体 enum 属性</h1><h2 id="OOP-面向对象编程"><a href="#OOP-面向对象编程" class="headerlink" title="OOP 面向对象编程"></a>OOP 面向对象编程</h2><ul><li>继承</li><li>多态</li><li>封装</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line"><span class="comment">// 存储属性 lazy</span></span><br><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    var &lt;#variable name#&gt;: &lt;#type#&gt; &#123;</span></span><br><span class="line">    <span class="comment">//        get &#123;</span></span><br><span class="line">    <span class="comment">//            &lt;#statements#&gt;</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//        set &#123;</span></span><br><span class="line">    <span class="comment">//            &lt;#variable name#&gt; = newValue</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//    var &lt;#variable name#&gt;: &lt;#type#&gt; &#123;</span></span><br><span class="line">    <span class="comment">//        &lt;#statements#&gt;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//    var &lt;#name#&gt; = &lt;#value#&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//    lazy var &lt;#property name#&gt;: &lt;#type name#&gt; = &#123;</span></span><br><span class="line">    <span class="comment">//        &lt;#statements#&gt;</span></span><br><span class="line">    <span class="comment">//        return &lt;#value#&gt;</span></span><br><span class="line">    <span class="comment">//    &#125;()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//    lazy var &lt;#variable name#&gt; = &lt;#expression#&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型属性</span></span><br><span class="line"><span class="comment">// ●使用static关键字来定义类型属性。</span></span><br><span class="line"><span class="comment">// 对于类类型的计算类型属性，你可以使用class关键字来允许子类重写父类的实现。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BMPerson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> cla = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> cla1: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMPerson1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> cla = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">cla1</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="为-class-结构体-enum-添加方法"><a href="#为-class-结构体-enum-添加方法" class="headerlink" title="为 class 结构体 enum 添加方法"></a>为 class 结构体 enum 添加方法</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//// 实例方法</span></span><br><span class="line"><span class="comment">//// 1</span></span><br><span class="line"><span class="comment">//// 在实例方法中、默认可以不写 self</span></span><br><span class="line"><span class="comment">//// 在形参的名字和属性的名字相同的时候需要使用 self 来访问属性</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// 2</span></span><br><span class="line"><span class="comment">//// 在实例方法中想修改属性</span></span><br><span class="line"><span class="comment">//// 在值类型【enum 结构体】 属性不可以被自己的实例方法修改</span></span><br><span class="line"><span class="comment">//// 需在方法前面加 mutating mutating func mm()&#123;&#125;</span></span><br><span class="line"><span class="comment">//// mutating 里面可以强制修改 self 属性 self是一个属性 指自己</span></span><br><span class="line"><span class="comment">//// enum 中的 self 可以设置为其他的成员</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//enum BMType &#123;</span></span><br><span class="line"><span class="comment">//    case off,low,height</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    mutating func next() &#123;</span></span><br><span class="line"><span class="comment">//        switch self &#123;</span></span><br><span class="line"><span class="comment">//        case .height:</span></span><br><span class="line"><span class="comment">//            self = .off</span></span><br><span class="line"><span class="comment">//        case .low:</span></span><br><span class="line"><span class="comment">//            self = .height</span></span><br><span class="line"><span class="comment">//        case .off:</span></span><br><span class="line"><span class="comment">//            self = .low</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    // 如果是 class 的话 而且想在子类中重写这个方法可以把 static 换为 class。</span></span><br><span class="line"><span class="comment">//    static func aaa() &#123;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//let type1 = BMType.off</span></span><br><span class="line"><span class="comment">//type1.next()</span></span><br><span class="line"><span class="comment">//type1.next()</span></span><br><span class="line"><span class="comment">//BMType.aaa()</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// // 3 为 class 结构体 enum 提供下标访问 arr[0]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////type1["a"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BMTYpe1</span> </span>&#123;</span><br><span class="line"><span class="comment">//        subscript(idnex: Int) -&gt; Int &#123;</span></span><br><span class="line"><span class="comment">//            return 11122</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">subscript</span>(index: <span class="type">Int</span>, col: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(newValue)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Xcode 11</span></span><br><span class="line"><span class="comment">//        static subscript(index: Int) -&gt; (Void) &#123;</span></span><br><span class="line"><span class="comment">//            get &#123;</span></span><br><span class="line"><span class="comment">//                return</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            set&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    var type = BMTYpe1.init()</span></span><br><span class="line"><span class="comment">//    print(type[1])</span></span><br><span class="line"><span class="comment">//    type[1] = 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类-enum-结构体-的初始化和反初始化"><a href="#类-enum-结构体-的初始化和反初始化" class="headerlink" title="类 enum 结构体 的初始化和反初始化"></a>类 enum 结构体 的初始化和反初始化</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><h2 id="deinit"><a href="#deinit" class="headerlink" title="deinit"></a>deinit</h2><h1 id="class-继承"><a href="#class-继承" class="headerlink" title="class 继承"></a>class 继承</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 便捷初始化器</span></span><br><span class="line"><span class="keyword">convenience</span></span><br><span class="line"><span class="comment">// 必须要子类覆盖</span></span><br><span class="line"><span class="keyword">required</span></span><br><span class="line"><span class="comment">// 不可以子类覆盖</span></span><br><span class="line"><span class="keyword">final</span></span><br><span class="line"><span class="comment">// 此方法是由父类覆盖过来的</span></span><br><span class="line"><span class="keyword">override</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentSpeed = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">var</span> nnn = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> desc: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"run at speed <span class="subst">\(currentSpeed)</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(currentSpeed: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.currentSpeed = currentSpeed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gear: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    override var nnn: Int &#123;</span></span><br><span class="line"><span class="comment">//        get &#123;</span></span><br><span class="line"><span class="comment">//            return 1</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        set &#123;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> desc: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.desc + <span class="string">"<span class="subst">\(gear)</span>"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(gear: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.gear = gear</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(currentSpeed: <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(currentSpeed: <span class="type">Int</span>, gear: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.gear = gear</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(currentSpeed: currentSpeed)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(currentSpeed: <span class="number">10</span>, gear: <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">Car</span>()</span><br></pre></td></tr></table></figure><h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">VehicleProtocol</span> </span>&#123;</span><br><span class="line"><span class="comment">// 属性 可读或者写</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 协议组合，既然遵守协议1 已遵守协议2</span></span><br><span class="line"><span class="type">VehicleProtocol1</span> &amp; <span class="type">VehicleProtoco2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// where</span></span><br><span class="line"><span class="comment">// 给 Array 扩展，但前提条件是 Array 中的元素满足给定条件</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span>: <span class="title">VehicleProtocol</span> <span class="title">where</span> <span class="title">Element</span>: <span class="title">VehicleProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以给 Collection extension 方法 让所有遵守协议的类型都有了此方法，就可以直接调用了，默认  protocol 是没有方法实现的。</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 遵守Collection协议的类型一个扩展，但必须满足指定条件，里面的 Element  遵守 VehicleProtocol 协议添加方法</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Collection</span>  <span class="title">where</span> <span class="title">Iterator</span>.<span class="title">Element</span>: <span class="title">VehicleProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age111: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="type">Vehicle</span>()]</span><br><span class="line">arr.age111</span><br></pre></td></tr></table></figure><h1 id="try-throw-catch"><a href="#try-throw-catch" class="headerlink" title="try throw catch"></a>try throw catch</h1><ul><li><a href="https://www.jianshu.com/p/a227f97e6c2c" target="_blank" rel="noopener">https://www.jianshu.com/p/a227f97e6c2c</a></li></ul><blockquote><p>异常处理，比如你封装的一个函数，可能会有异常情况，需要通知外面的使用者，但又不想加参数等，就可以使用 错误处理来实现，当有异常时执行相关的操作。</p></blockquote><p>外面定义一个函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数的时候使用 throws 告诉编译器说这个函数可能会抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(a: Int)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &lt; -<span class="number">10</span> &#123;</span><br><span class="line">      <span class="comment">// 这里需要处理错误</span></span><br><span class="line">      <span class="comment">// 需要使用 throw 把错误抛出</span></span><br><span class="line">      <span class="comment">// 同时排除的必须是遵守 Error 协议的可以是 enum 结构体 class，通常是 enum 类型</span></span><br><span class="line">      <span class="comment">// 我们定义 enum 如下</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="type">BMError</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 定义一个枚举类型的错误类型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">BMError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用可能抛出异常的函数</span></span><br><span class="line"><span class="comment">// 强制认为不会抛出异常，如果抛出了会崩溃</span></span><br><span class="line"><span class="keyword">let</span> ccc = <span class="keyword">try</span>! foo(a: <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以抛出异常，但不处理它</span></span><br><span class="line"><span class="keyword">let</span> ccc = <span class="keyword">try</span>？ foo(a: <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理异常</span></span><br><span class="line"><span class="comment">// 实现执行 do 中的代码，如果 try (注意没有加？或！) 抛出了异常就跳转到 catch 中</span></span><br><span class="line"><span class="comment">// err 就是抛出的异常信息</span></span><br><span class="line"><span class="comment">// do 中的 try? 和 try！ 和外面的 do-catch 没关系</span></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ccc = <span class="keyword">try</span>? foo(a: -<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">let</span> ccc = <span class="keyword">try</span>? foo(a: -<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">let</span> ccc1 = <span class="keyword">try</span> foo(a: -<span class="number">100</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> <span class="keyword">let</span> err &#123;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="Type-、self-、Self、type-of"><a href="#Type-、self-、Self、type-of" class="headerlink" title=".Type 、self 、Self、type(of:)"></a>.Type 、self 、Self、type(of:)</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .Type 是类型的方法 [Int, NSObject], 返回的是此类型属于的类型，不是值。</span></span><br><span class="line"><span class="comment">// Int.Type: 表示 Int 所属的类型。</span></span><br><span class="line"><span class="comment">// NSObject.Type: 表示 NSObject 所属的类型，元类。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .self可以用在类型后面取得类型本身，也可以用在实例后面取得这个实例本身,返回的是值。</span></span><br><span class="line"><span class="comment">// 1.self   表示 1</span></span><br><span class="line"><span class="comment">// Int.self 表示 Int所属类型的值</span></span><br><span class="line"><span class="comment">// NSObject.self 表示 NSObject的元类的值</span></span><br><span class="line"><span class="comment">// ❌ types.append(Int.Type)</span></span><br><span class="line"><span class="comment">// ✅ types.append(Int.self)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Self 用在协议中</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MProtocolTest01</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 协议定一个方法，接受实现该协议的自身类型并返回一个同样的类型</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testMethod</span><span class="params">(<span class="built_in">c</span>: <span class="keyword">Self</span>)</span></span> -&gt; <span class="type">Self</span></span><br><span class="line">    <span class="comment">//不能在协议中定义 范型 进行限制</span></span><br><span class="line">    <span class="comment">//Self 不仅指代的是 实现该协议的类型本身，也包括了这个类型的子类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMPerson</span>: <span class="title">MProtocolTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">testMethod</span><span class="params">(<span class="built_in">c</span>: BMPerson)</span></span> -&gt; <span class="type">Self</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type(of:) vs .self</span></span><br><span class="line"><span class="comment">// 如果我们想获取一个实例的类型类似于 oc 的 class</span></span><br><span class="line"><span class="comment">// self 是返回他自己</span></span><br><span class="line"><span class="comment">// Type 又是类型的方法</span></span><br><span class="line"><span class="comment">// 可以使用 type(of: num) 来获取实例的具体类型</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> type1 = type(of: num)</span><br><span class="line"><span class="comment">// Int</span></span><br><span class="line"><span class="built_in">print</span>(type1)</span><br></pre></td></tr></table></figure><h1 id="Any-AnyObject-AnyClass"><a href="#Any-AnyObject-AnyClass" class="headerlink" title="Any AnyObject AnyClass"></a>Any AnyObject AnyClass</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Any       任意类型 enum 结构体 class 元类型都可以</span></span><br><span class="line"><span class="comment">// AnyObject 任意class对象实例 不包括元类型的实例</span></span><br><span class="line"><span class="comment">// AnyClass  任意class类型 不包括元类型</span></span><br></pre></td></tr></table></figure><h1 id="as-as-as"><a href="#as-as-as" class="headerlink" title="as as? as!"></a>as as? as!</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// as</span></span><br><span class="line"><span class="comment">// 子类 -&gt; 父类</span></span><br><span class="line"><span class="comment">//    let c2 = BMPPP1() as NSObject</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// switch 匹配</span></span><br><span class="line"><span class="comment">//    switch animal &#123;</span></span><br><span class="line"><span class="comment">//        case let cat as Cat:</span></span><br><span class="line"><span class="comment">//        print("如果是Cat类型对象，则做相应处理")</span></span><br><span class="line"><span class="comment">//        case let dog as Dog:</span></span><br><span class="line"><span class="comment">//        print("如果是Dog类型对象，则做相应处理")</span></span><br><span class="line"><span class="comment">//        default: break</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量转换</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="number">1</span> <span class="keyword">as</span> <span class="type">CGFloat</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// as? as!</span></span><br><span class="line"><span class="comment">// 不同的类型转换</span></span><br><span class="line"><span class="comment">// 如果失败的话为 nil ( as! 强制转换，失败就崩溃)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// is</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">is</span> <span class="type">Int</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="type">NSObject</span>() <span class="keyword">is</span> <span class="type">NSObject</span>)</span><br></pre></td></tr></table></figure><h1 id="关联类型"><a href="#关联类型" class="headerlink" title="关联类型"></a>关联类型</h1><ul><li>更多内容未记录</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关联类型</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">BMProtocol</span> </span>&#123;</span><br><span class="line"><span class="comment">//    associatedtype ItemTYpe where ItemTYpe : NSObject</span></span><br><span class="line">    associatedtype <span class="type">ItemTYpe</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: ItemTYpe)</span></span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">    <span class="keyword">subscript</span>(i: <span class="type">Int</span>) -&gt; <span class="type">ItemTYpe</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BBB</span>: <span class="title">BMProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: Int)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">subscript</span>(i: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">ItemTYpe</span> = <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">BMProtocol1</span> : <span class="title">BMProtocol</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 特殊约束</span></span><br><span class="line">    associatedtype suffItem: <span class="type">BMProtocol1</span> <span class="keyword">where</span> suffItem.<span class="type">ItemTYpe</span> == <span class="type">ItemTYpe</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//struct BBB1: BMProtocol1 &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h1 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h1><ul><li>更多内容待研究</li></ul><h1 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h1><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">20</span> &#123;</span><br><span class="line">            <span class="type">Thread</span>.detachNewThread &#123;</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> thread = <span class="type">Thread</span>.<span class="keyword">init</span>(target: <span class="keyword">self</span>, selector: #selector(ss), object: <span class="literal">nil</span>)</span><br><span class="line">        thread.start()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">ss</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"aa"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BlockOperation</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> op = <span class="type">BlockOperation</span>.<span class="keyword">init</span> &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>?.ss()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> qu = <span class="type">OperationQueue</span>.<span class="keyword">init</span>()</span><br><span class="line">        qu.addOperation(op)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">ss</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"aa"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义Operation</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> op = <span class="type">BMOperation</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">let</span> qu = <span class="type">OperationQueue</span>.<span class="keyword">init</span>()</span><br><span class="line">        qu.addOperation(op)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMOperation</span>: <span class="title">Operation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"aa"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h1><ul><li>和 oc 的 gcd 基本一致，只是改动了 api 的名字</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Array&quot;&gt;&lt;/a&gt;Array&lt;/h1&gt;
    
    </summary>
    
      <category term="00-技术-iOS" scheme="http://liangdahong.com/categories/00-%E6%8A%80%E6%9C%AF-iOS/"/>
    
    
      <category term="Swift" scheme="http://liangdahong.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>pthread、NSThread、GCD、NSOperation、NSOperationQueue</title>
    <link href="http://liangdahong.com/2019/10/12/00-%E6%8A%80%E6%9C%AF-iOS/pthread%E3%80%81NSThread%E3%80%81GCD%E3%80%81NSOperation%E3%80%81NSOperationQueue/"/>
    <id>http://liangdahong.com/2019/10/12/00-技术-iOS/pthread、NSThread、GCD、NSOperation、NSOperationQueue/</id>
    <published>2019-10-12T15:36:17.000Z</published>
    <updated>2019-10-18T23:11:33.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>各种 队列&amp;同步&amp;同步 组合 <a href="https://naotu.baidu.com/file/fcc0f114a0116d1e4679d9327b3b5714" target="_blank" rel="noopener">https://naotu.baidu.com/file/fcc0f114a0116d1e4679d9327b3b5714</a></p></li><li><p>GCD <a href="https://www.jianshu.com/p/2d57c72016c6" target="_blank" rel="noopener">https://www.jianshu.com/p/2d57c72016c6</a></p></li><li><p>NSOperation NSOperationQueue  <a href="https://www.jianshu.com/p/4b1d77054b35" target="_blank" rel="noopener">https://www.jianshu.com/p/4b1d77054b35</a></p></li><li><p>pthread、NSThread <a href="https://www.jianshu.com/p/cbaeea5368b1" target="_blank" rel="noopener">https://www.jianshu.com/p/cbaeea5368b1</a></p></li></ul><a id="more"></a><h1 id="pthread、NSThread"><a href="#pthread、NSThread" class="headerlink" title="pthread、NSThread"></a>pthread、NSThread</h1><ul><li><a href="https://www.jianshu.com/p/cbaeea5368b1" target="_blank" rel="noopener">https://www.jianshu.com/p/cbaeea5368b1</a></li></ul><h1 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 并发队列</span><br><span class="line">dispatch_queue_t queue_t = dispatch_queue_create(&quot;ccc&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">// 串行队列</span><br><span class="line">dispatch_queue_t queue_t1 = dispatch_queue_create(&quot;ccc&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">// 串行队列 (主队列)</span><br><span class="line">dispatch_get_main_queue();</span><br><span class="line">// 全局并发队列</span><br><span class="line">dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line"></span><br><span class="line">// 同步</span><br><span class="line">dispatch_sync</span><br><span class="line">// 异步</span><br><span class="line">dispatch_async</span><br></pre></td></tr></table></figure><h2 id="线程通讯"><a href="#线程通讯" class="headerlink" title="线程通讯"></a>线程通讯</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// gcd 线程通讯一般只有 子线程通讯到主线程，</span><br><span class="line">// 因为我们在处理gcd的时候没有操作具体的线程，</span><br><span class="line">// 全部是由系统来处理的</span><br><span class="line">dispatch_async(mainQueue, ^&#123;</span><br></pre></td></tr></table></figure><h2 id="延时操作"><a href="#延时操作" class="headerlink" title="延时操作"></a>延时操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 延时操作 这里只是延时把任务加到队列中,具体什么时候执行是未知的。</span><br><span class="line">// dispatch_after</span><br></pre></td></tr></table></figure><h2 id="只执行一次"><a href="#只执行一次" class="headerlink" title="只执行一次"></a>只执行一次</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 只执行一次</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br></pre></td></tr></table></figure><h2 id="快速迭代方法"><a href="#快速迭代方法" class="headerlink" title="快速迭代方法"></a>快速迭代方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 快速迭代方法,普通遍历数组的时候是一个一个取，</span><br><span class="line">// 如果用快速迭代的话就可以在多个线程中同时（异步）遍历。</span><br><span class="line">dispatch_apply(6, queue, ^(size_t index) &#123;</span><br></pre></td></tr></table></figure><h2 id="栅栏"><a href="#栅栏" class="headerlink" title="栅栏"></a>栅栏</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 栅栏 可以把任务栅起来特殊处理，指定哪些任务完成后在执行哪些任务</span><br><span class="line">// 1 2 完成了再继续这些 3 4 5任务</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br></pre></td></tr></table></figure><h2 id="队列组"><a href="#队列组" class="headerlink" title="队列组"></a>队列组</h2><p>###通知方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 1 2 完成才通知 3</span><br><span class="line">dispatch_group_async(grou</span><br><span class="line">dispatch_group_async(grou</span><br><span class="line">dispatch_group_notify(grou</span><br></pre></td></tr></table></figure><h3 id="堵塞"><a href="#堵塞" class="headerlink" title="堵塞"></a>堵塞</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 暂停方式 </span><br><span class="line">// 到3就暂停堵塞当前线程，当 1 2 完成后才解除暂停</span><br><span class="line">dispatch_group_async(grou</span><br><span class="line">dispatch_group_async(grou</span><br><span class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 标记的方式</span><br><span class="line"></span><br><span class="line">// 使用标记的方式</span><br><span class="line">// 标记开始一个，标记结束一个</span><br><span class="line">dispatch_group_enter(group);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">dispatch_group_leave(group);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_enter(group);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">dispatch_group_leave(group);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 信号量 Dispatch Semaphore 线程同步，将异步执行任务转换为同步执行任务。</span><br><span class="line"></span><br><span class="line">Dispatch Semaphore 提供了三个方法：</span><br><span class="line">dispatch_semaphore_create：创建一个 Semaphore 并初始化信号的总量</span><br><span class="line">dispatch_semaphore_signal：发送一个信号，让信号总量加 1</span><br><span class="line">dispatch_semaphore_wait：可以使总信号量减 1，信号总量小于 0 时就会一直等待（阻塞所在线程），否则就可以正常执行。</span><br><span class="line"></span><br><span class="line">// 全局并发队列</span><br><span class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">// maphore 初始创建时计数为 0。</span><br><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">// 发送一个信号，让信号总量加 1</span><br><span class="line">dispatch_semaphore_signal(semaphore);</span><br><span class="line">&#125;);</span><br><span class="line">// 到这里让信号量减 1 、是-1 小于0 就开始等待，当信号量是0 或者大于1 时就继续执行</span><br><span class="line">dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;任务完成了&quot;);</span><br></pre></td></tr></table></figure><h1 id="NSOperation、NSOperationQueue"><a href="#NSOperation、NSOperationQueue" class="headerlink" title="NSOperation、NSOperationQueue"></a>NSOperation、NSOperationQueue</h1><blockquote><p>NSOperation、NSOperationQueue 是苹果提供给我们的一套多线程解决方案。实际上 NSOperation、NSOperationQueue 是基于 GCD 更高一层的封装，完全面向对象。但是比 GCD 更简单易用、代码可读性也更高。</p></blockquote><h2 id="为什么要使用-NSOperation、NSOperationQueue？"><a href="#为什么要使用-NSOperation、NSOperationQueue？" class="headerlink" title="为什么要使用 NSOperation、NSOperationQueue？"></a>为什么要使用 NSOperation、NSOperationQueue？</h2><ul><li><p>可添加完成的代码块，在操作完成后执行。</p></li><li><p>设定操作执行的优先级。</p></li><li><p>可以很方便的取消一个操作的执行。</p></li><li><p>使用 KVO 观察对操作执行状态的更改：isExecuteing、isFinished、isCancelled。</p></li></ul><h2 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h2><h3 id="NSOperation-的创建"><a href="#NSOperation-的创建" class="headerlink" title="NSOperation 的创建"></a>NSOperation 的创建</h3><h4 id="NSInvocationOperation"><a href="#NSInvocationOperation" class="headerlink" title="NSInvocationOperation"></a>NSInvocationOperation</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在当前线程上执行</span></span><br><span class="line"><span class="comment">// 1.创建 NSInvocationOperation 对象</span></span><br><span class="line"><span class="built_in">NSInvocationOperation</span> *op = [[<span class="built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(task1) object:<span class="literal">nil</span>];</span><br><span class="line"><span class="comment">// 2.调用 start 方法开始执行操作</span></span><br><span class="line">[op start];</span><br></pre></td></tr></table></figure><h4 id="NSBlockOperation"><a href="#NSBlockOperation" class="headerlink" title="NSBlockOperation"></a>NSBlockOperation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 各种 Block 可以在多个线程上执行</span><br><span class="line">// 1.创建 NSBlockOperation 对象</span><br><span class="line">NSBlockOperation *op = [NSBlockOperation blockOperationWithBlock:</span><br><span class="line">// 2.添加额外的操作</span><br><span class="line">[op addExecutionBlock:</span><br><span class="line">[op addExecutionBlock:</span><br><span class="line">[op addExecutionBlock:</span><br><span class="line">[op addExecutionBlock:</span><br><span class="line">// 3.调用 start 方法开始执行操作</span><br><span class="line">[op start];</span><br></pre></td></tr></table></figure><h4 id="NSOperation-自定义"><a href="#NSOperation-自定义" class="headerlink" title="NSOperation 自定义"></a>NSOperation 自定义</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自定义 <span class="built_in">NSOperation</span> 的方式暂时不考虑</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YSCOperation</span> : <span class="title">NSOperation</span></span></span><br></pre></td></tr></table></figure><h3 id="NSOperationQueue-操作队列"><a href="#NSOperationQueue-操作队列" class="headerlink" title="NSOperationQueue 操作队列"></a>NSOperationQueue 操作队列</h3><h4 id="创建-Queue"><a href="#创建-Queue" class="headerlink" title="创建 Queue"></a>创建 Queue</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取主队列</span></span><br><span class="line">[<span class="built_in">NSOperationQueue</span> mainQueue];</span><br><span class="line"><span class="comment">// 获取当前队列</span></span><br><span class="line">[<span class="built_in">NSOperationQueue</span> currentQueue];</span><br><span class="line"><span class="comment">// 创建自定义队列 （可以通过其他属性来确定是串行或者并发 maxConcurrentOperationCount）</span></span><br><span class="line">[[<span class="built_in">NSOperationQueue</span> alloc] init];</span><br></pre></td></tr></table></figure><h4 id="向-NSOperationQueue-中添加操作"><a href="#向-NSOperationQueue-中添加操作" class="headerlink" title="向 NSOperationQueue 中添加操作"></a>向 NSOperationQueue 中添加操作</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Queue 直接添加操作  不需要调用 NSOperation 的 start 方法 </span></span><br><span class="line"><span class="comment">// 1.创建队列</span></span><br><span class="line"><span class="built_in">NSOperationQueue</span> *queue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建操作</span></span><br><span class="line"><span class="comment">// 使用 NSInvocationOperation 创建操作1</span></span><br><span class="line"><span class="built_in">NSInvocationOperation</span> *op1 = [[<span class="built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="keyword">self</span> </span><br><span class="line"><span class="built_in">NSInvocationOperation</span> *op2 = [[<span class="built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="keyword">self</span> </span><br><span class="line">                              </span><br><span class="line"><span class="built_in">NSBlockOperation</span> *op3 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">[op3 addExecutionBlock:</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3.使用 addOperation: 添加所有操作到队列中</span></span><br><span class="line">[queue addOperation:op1];</span><br><span class="line">[queue addOperation:op2];</span><br><span class="line">[queue addOperation:op3];</span><br></pre></td></tr></table></figure><h4 id="向-Queue-中直接加-Block-的方式"><a href="#向-Queue-中直接加-Block-的方式" class="headerlink" title="向 Queue 中直接加 Block 的方式"></a>向 Queue 中直接加 Block 的方式</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建队列</span></span><br><span class="line"><span class="built_in">NSOperationQueue</span> *queue = [[<span class="built_in">NSOperationQueue</span> alloc] init];</span><br><span class="line"><span class="comment">// 2.使用 addOperationWithBlock: 添加操作到队列中</span></span><br><span class="line">[queue addOperationWithBlock:</span><br><span class="line">[queue addOperationWithBlock:</span><br><span class="line">[queue addOperationWithBlock:</span><br></pre></td></tr></table></figure><h4 id="控制并发和串行-maxConcurrentOperationCount"><a href="#控制并发和串行-maxConcurrentOperationCount" class="headerlink" title="控制并发和串行 maxConcurrentOperationCount"></a>控制并发和串行 maxConcurrentOperationCount</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认 -1 不控制</span></span><br><span class="line"><span class="comment">// 1  串行</span></span><br><span class="line"><span class="comment">// n  并发，但不会超过系统限制</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSInteger</span> maxConcurrentOperationCount;</span><br></pre></td></tr></table></figure><h2 id="NSOperation-的依耐和优先级"><a href="#NSOperation-的依耐和优先级" class="headerlink" title="NSOperation 的依耐和优先级"></a>NSOperation 的依耐和优先级</h2><h3 id="依耐"><a href="#依耐" class="headerlink" title="依耐"></a>依耐</h3><blockquote><p>NSOperation 的一个特点就是可以添加各种操作依赖，同时还可以设置一下参数，取消，暂停，恢复等。</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依赖确定了谁在前执行和谁在后执行。(a的执行需要b执行完毕，a依耐b)</span></span><br><span class="line">- (<span class="keyword">void</span>)addDependency:(<span class="built_in">NSOperation</span> *)op;</span><br><span class="line">- (<span class="keyword">void</span>)removeDependency:(<span class="built_in">NSOperation</span> *)op;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSOperation</span> *&gt; *dependencies;</span><br></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都处于就绪的状态的任务（操作），谁先开始执行，谁先取到。</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSOperationQueuePriority</span> queuePriority;</span><br></pre></td></tr></table></figure><h2 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建队列</span></span><br><span class="line"><span class="built_in">NSOperationQueue</span> *queue = [[<span class="built_in">NSOperationQueue</span> alloc]init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.添加操作</span></span><br><span class="line">[queue addOperationWithBlock:^&#123;</span><br><span class="line">    <span class="comment">// 异步进行耗时操作</span></span><br><span class="line">    <span class="comment">// 回到主线程</span></span><br><span class="line">    [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line">    &#125;];</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure><h2 id="常用属性和方法归纳"><a href="#常用属性和方法归纳" class="headerlink" title="常用属性和方法归纳"></a>常用属性和方法归纳</h2><h3 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消操作方法</span></span><br><span class="line">- (<span class="keyword">void</span>)cancel; 可取消操作，实质是标记 isCancelled 状态。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断操作状态方法</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isFinished; 判断操作是否已经结束。</span><br><span class="line">- (<span class="built_in">BOOL</span>)isCancelled; 判断操作是否已经标记为取消。</span><br><span class="line">- (<span class="built_in">BOOL</span>)isExecuting; 判断操作是否正在在运行。</span><br><span class="line">- (<span class="built_in">BOOL</span>)isReady; 判断操作是否处于准备就绪状态，这个值和操作的依赖关系相关。</span><br><span class="line">操作同步</span><br><span class="line">- (<span class="keyword">void</span>)waitUntilFinished; 阻塞当前线程，直到该操作结束。可用于线程执行顺序的同步。</span><br><span class="line">- (<span class="keyword">void</span>)setCompletionBlock:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))block; completionBlock 会在当前操作执行完毕时执行 completionBlock。</span><br><span class="line">- (<span class="keyword">void</span>)addDependency:(<span class="built_in">NSOperation</span> *)op; 添加依赖，使当前操作依赖于操作 op 的完成。</span><br><span class="line">- (<span class="keyword">void</span>)removeDependency:(<span class="built_in">NSOperation</span> *)op; 移除依赖，取消当前操作对操作 op 的依赖。</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSOperation</span> *&gt; *dependencies; 在当前操作开始执行之前完成执行的所有操作对象数组。</span><br></pre></td></tr></table></figure><h3 id="NSOperationQueue"><a href="#NSOperationQueue" class="headerlink" title="NSOperationQueue"></a>NSOperationQueue</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">取消/暂停/恢复操作</span><br><span class="line">- (<span class="keyword">void</span>)cancelAllOperations; 可以取消队列的所有操作。</span><br><span class="line">- (<span class="built_in">BOOL</span>)isSuspended; 判断队列是否处于暂停状态。 <span class="literal">YES</span> 为暂停状态，<span class="literal">NO</span> 为恢复状态。</span><br><span class="line">- (<span class="keyword">void</span>)setSuspended:(<span class="built_in">BOOL</span>)b; 可设置操作的暂停和恢复，<span class="literal">YES</span> 代表暂停队列，<span class="literal">NO</span> 代表恢复队列。</span><br><span class="line">操作同步</span><br><span class="line">- (<span class="keyword">void</span>)waitUntilAllOperationsAreFinished; 阻塞当前线程，直到队列中的操作全部执行完毕。</span><br><span class="line">添加/获取操作`</span><br><span class="line">- (<span class="keyword">void</span>)addOperationWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))block; 向队列中添加一个 <span class="built_in">NSBlockOperation</span> 类型操作对象。</span><br><span class="line">- (<span class="keyword">void</span>)addOperations:(<span class="built_in">NSArray</span> *)ops waitUntilFinished:(<span class="built_in">BOOL</span>)wait; 向队列中添加操作数组，wait 标志是否阻塞当前线程直到所有操作结束</span><br><span class="line">- (<span class="built_in">NSArray</span> *)operations; 当前在队列中的操作数组（某个操作执行结束后会自动从这个数组清除）。</span><br><span class="line">- (<span class="built_in">NSUInteger</span>)operationCount; 当前队列中的操作数。</span><br><span class="line">获取队列</span><br><span class="line">+ (<span class="keyword">id</span>)currentQueue; 获取当前队列，如果当前线程不是在 <span class="built_in">NSOperationQueue</span> 上运行则返回 <span class="literal">nil</span>。</span><br><span class="line">+ (<span class="keyword">id</span>)mainQueue; 获取主队列。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;各种 队列&amp;amp;同步&amp;amp;同步 组合 &lt;a href=&quot;https://naotu.baidu.com/file/fcc0f114a0116d1e4679d9327b3b5714&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://naotu.baidu.com/file/fcc0f114a0116d1e4679d9327b3b5714&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GCD &lt;a href=&quot;https://www.jianshu.com/p/2d57c72016c6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/2d57c72016c6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NSOperation NSOperationQueue  &lt;a href=&quot;https://www.jianshu.com/p/4b1d77054b35&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/4b1d77054b35&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pthread、NSThread &lt;a href=&quot;https://www.jianshu.com/p/cbaeea5368b1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/cbaeea5368b1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="00-技术-iOS" scheme="http://liangdahong.com/categories/00-%E6%8A%80%E6%9C%AF-iOS/"/>
    
    
      <category term="GCD" scheme="http://liangdahong.com/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 相关</title>
    <link href="http://liangdahong.com/2019/10/11/00-%E6%8A%80%E6%9C%AF-iOS/Jenkins-%E7%9B%B8%E5%85%B3/"/>
    <id>http://liangdahong.com/2019/10/11/00-技术-iOS/Jenkins-相关/</id>
    <published>2019-10-11T14:17:13.000Z</published>
    <updated>2019-10-18T09:35:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-jdk"><a href="#Java-jdk" class="headerlink" title="Java jdk"></a>Java jdk</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以去下面的地址去下载 Java jdk 来手动安装</p><ul><li><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li></ul><a id="more"></a><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin </span><br><span class="line">sudo rm -fr /Library/PreferencesPanes/JavaControlPanel.prefpane</span><br><span class="line"></span><br><span class="line">查找当前版本 </span><br><span class="line">输入：ls /Library/Java/JavaVirtualMachines/ </span><br><span class="line">输出：jdk-9.0.1.jdk</span><br><span class="line"></span><br><span class="line">sudo rm -rf /Library/Java/JavaVirtualMachines/jdk-9.0.1.jdk</span><br></pre></td></tr></table></figure><h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><p>可以去下面的地区的下载安装包来安装</p><ul><li><a href="https://jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">https://jenkins.io/zh/doc/book/installing/</a></li></ul><p>或者去看下面的链接来处理 </p><ul><li><a href="https://jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">https://jenkins.io/zh/doc/book/installing/</a></li></ul><p>用 brew 来安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装最新版本</span><br><span class="line">brew install jenkins</span><br><span class="line"></span><br><span class="line">安装 LTS 版本</span><br><span class="line">brew install jenkins-lts</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装完成后安装的地址是 </span><br><span class="line">/Applications/Jenkins/jenkins.war</span><br></pre></td></tr></table></figure><ul><li><p>安装 java jdk 注意不要高版本 可以是jdk8</p></li><li><p>安装jenkins</p></li><li><p>安装好 jenkins 后面就可以使用浏览器打开 &lt;<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 了</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">解锁 Jenkins</span><br><span class="line">为了确保管理员安全地安装 Jenkins，密码已写入到日志中（不知道在哪里？）该文件在服务器上：</span><br><span class="line"></span><br><span class="line">/Users/Shared/Jenkins/Home/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line">请从本地复制密码并粘贴到下面。</span><br><span class="line"></span><br><span class="line">读取下面的这个文件中的密码 注意强制修改他的权限就可以打开了</span><br><span class="line">/Users/Shared/Jenkins/Home/secrets/initialAdminPassword </span><br><span class="line"></span><br><span class="line">我这里打开是 ：</span><br><span class="line"></span><br><span class="line">ebed5b8f51f84d50a9a04eb580cc1292</span><br><span class="line"></span><br><span class="line">然后可以选择安装插件</span><br><span class="line">1、自动安装推荐的插件</span><br><span class="line">2、自定义安装插件</span><br><span class="line"></span><br><span class="line">默认安装会有下面的这些插件</span><br><span class="line"></span><br><span class="line">Folders </span><br><span class="line">OWASP Markup Formatter</span><br><span class="line">Build Timeout </span><br><span class="line">Credentials Binding</span><br><span class="line">Timestamper</span><br><span class="line">Workspace Cleanup</span><br><span class="line">Ant</span><br><span class="line">Gradle </span><br><span class="line">Pipeline</span><br><span class="line">GitHub Branch Source </span><br><span class="line">Pipeline: GitHub Groovy Libraries</span><br><span class="line">Pipeline: Stage View </span><br><span class="line">Git </span><br><span class="line">Subversion </span><br><span class="line">SSH Slaves</span><br><span class="line">Matrix Authorization Strategy </span><br><span class="line">PAM Authentication </span><br><span class="line">LDAP </span><br><span class="line">Email Extension</span><br><span class="line">Mailer </span><br><span class="line">Localization: Chinese (Simplified)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果您不确定需要哪些插件，请选择 安装建议的插件 。 您可以通过Jenkins中的Manage Jenkins &gt; Manage Plugins 页面在稍后的时间点安装（或删除）其他Jenkins插件 。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装好了以后就你要设置用户名和密码了</span><br><span class="line"></span><br><span class="line">user: liangdahong</span><br><span class="line">pass: liangdahong</span><br></pre></td></tr></table></figure><p>jenkins 重新启动 - <a href="http://localhost:8080/reload" target="_blank" rel="noopener">http://localhost:8080/reload</a></p><p>参考 - <a href="https://www.cnblogs.com/dzblog/p/6962810.html" target="_blank" rel="noopener">https://www.cnblogs.com/dzblog/p/6962810.html</a></p><p>修改一些配置</p><p><a href="http://localhost:8080/pluginManager/advanced" target="_blank" rel="noopener">http://localhost:8080/pluginManager/advanced</a></p><ul><li>jenkins 插件下载 <a href="http://updates.jenkins-ci.org/download/plugins/ssh/" target="_blank" rel="noopener">http://updates.jenkins-ci.org/download/plugins/ssh/</a></li><li>可以在这里下载好了然后在 <a href="http://localhost:8080/pluginManager/advanced" target="_blank" rel="noopener">http://localhost:8080/pluginManager/advanced</a> 上传</li><li>就可以自己安装了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-jdk&quot;&gt;&lt;a href=&quot;#Java-jdk&quot; class=&quot;headerlink&quot; title=&quot;Java jdk&quot;&gt;&lt;/a&gt;Java jdk&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;可以去下面的地址去下载 Java jdk 来手动安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="00-技术-iOS" scheme="http://liangdahong.com/categories/00-%E6%8A%80%E6%9C%AF-iOS/"/>
    
    
      <category term="Jenkins" scheme="http://liangdahong.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>React Native 相关</title>
    <link href="http://liangdahong.com/2019/10/09/02-%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF/React-Native-%E7%9B%B8%E5%85%B3/"/>
    <id>http://liangdahong.com/2019/10/09/02-技术-前端/React-Native-相关/</id>
    <published>2019-10-09T06:57:25.000Z</published>
    <updated>2019-11-15T02:29:31.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">https://facebook.github.io/react-native/</a></li><li><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">https://github.com/facebook/react-native</a></li></ul><a id="more"></a><ul><li><p><a href="https://reactnative.cn/docs/getting-started/" target="_blank" rel="noopener">https://reactnative.cn/docs/getting-started/</a></p></li><li><p><a href="https://www.imooc.com/" target="_blank" rel="noopener">https://www.imooc.com/</a></p></li><li><p><a href="http://www.devio.org/" target="_blank" rel="noopener">http://www.devio.org/</a></p></li><li><p><a href="https://github.com/crazycodeboy/RNStudyNotes" target="_blank" rel="noopener">https://github.com/crazycodeboy/RNStudyNotes</a></p></li><li><p><a href="https://github.com/crazycodeboy/react-native-awesome" target="_blank" rel="noopener">https://github.com/crazycodeboy/react-native-awesome</a></p></li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li>环境搭建 <a href="https://reactnative.cn/docs/getting-started/" target="_blank" rel="noopener">https://reactnative.cn/docs/getting-started/</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//  初始化项目   xxx（项目名） </span><br><span class="line">react-native init xxx</span><br><span class="line"></span><br><span class="line">cd 到项目 root 目录</span><br><span class="line">// 运行 iOS</span><br><span class="line">react-native run-ios</span><br><span class="line">// 运行 Android</span><br><span class="line">react-native run-android</span><br><span class="line"></span><br><span class="line">// 安装库 </span><br><span class="line">cd 到项目 root 目录</span><br><span class="line">yarn add react-native-gesture-handler</span><br><span class="line">// 或者</span><br><span class="line">npm install —save react-native-gesture-handler</span><br><span class="line"></span><br><span class="line">// 把指定库和react-native链接起来</span><br><span class="line">// 一般不用</span><br><span class="line">react-native link react-native-gesture-handler</span><br></pre></td></tr></table></figure><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>模拟器上 Command + D  调出调试工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Reload 重新加载js</span><br><span class="line">Debug JS Remotely  Debug模式 会打开一个浏览器来调试</span><br><span class="line">Enable Live Reload 是否修改了实时加载（重新run 到首页去了）</span><br><span class="line">Start Systrace     </span><br><span class="line">Enable Hot Reloading  热加载当前的页面（只更新当前显示的页面，不会到 首页去）</span><br><span class="line">... 其他</span><br></pre></td></tr></table></figure><h3 id="vscode-的一些快捷键"><a href="#vscode-的一些快捷键" class="headerlink" title="vscode 的一些快捷键"></a>vscode 的一些快捷键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows Shift + Alt + F</span><br><span class="line">Ubuntu Ctrl + Shift + I</span><br><span class="line">Mac Shift + Option + F</span><br></pre></td></tr></table></figure><h3 id="真机调试"><a href="#真机调试" class="headerlink" title="真机调试"></a>真机调试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用 Xcode 打开项目，修改 RCTWebSocketExecutor.m 文件下的 @&quot;localhost&quot; 为IP地址，手机和电脑在同一个路由器下。</span><br><span class="line"></span><br><span class="line">- (void)setUp</span><br><span class="line">&#123;</span><br><span class="line">  if (!_url) &#123;</span><br><span class="line">    NSInteger port = [[[_bridge bundleURL] port] integerValue] ?: RCT_METRO_PORT;</span><br><span class="line">    NSString *host = [[_bridge bundleURL] host] ?: @&quot;10.1.160.82&quot;;</span><br></pre></td></tr></table></figure><h3 id="Chrome-调试工具"><a href="#Chrome-调试工具" class="headerlink" title="Chrome 调试工具"></a>Chrome 调试工具</h3><ul><li><a href="https://www.imooc.com/video/18591" target="_blank" rel="noopener">https://www.imooc.com/video/18591</a></li></ul><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><ul><li>应用启动是到 index.js 文件</li><li>在参考使用下面的代码到指定的界面</li></ul><h3 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入 React  React 当然是必须的</span><br><span class="line"> import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line"> </span><br><span class="line"> // 导入 AppRegistry  AppRegistry 里有 registerComponent 函数</span><br><span class="line"> import &#123;AppRegistry&#125; from &apos;react-native&apos;;</span><br><span class="line"> </span><br><span class="line"> // 这个是自己写的内容 setup 来自 ./js/main 路径 和小程序差不多</span><br><span class="line"> import setup from &apos;./js/main&apos;</span><br><span class="line"> </span><br><span class="line"> // 使用 AppRegistry 调用 registerComponent 函数 ，传的参数是 &apos;AwesomeProject1&apos; 和  setup</span><br><span class="line"> AppRegistry.registerComponent(&apos;AwesomeProject1&apos;, () =&gt; setup)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入 React</span><br><span class="line">import React, &#123;Fragment&#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">// 导入 SafeAreaView ...</span><br><span class="line">import &#123;</span><br><span class="line">  SafeAreaView,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  ScrollView,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  StatusBar,</span><br><span class="line">&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  Header,</span><br><span class="line">  LearnMoreLinks,</span><br><span class="line">  Colors,</span><br><span class="line">  DebugInstructions,</span><br><span class="line">  ReloadInstructions,</span><br><span class="line">&#125; from &apos;react-native/Libraries/NewAppScreen&apos;;</span><br><span class="line"></span><br><span class="line">// 这里是导入一个组件</span><br><span class="line">// import HelloComponent from &apos;./HelloComponent&apos;</span><br><span class="line"></span><br><span class="line">import &#123; Function &#125; from &apos;core-js&apos;;</span><br><span class="line"></span><br><span class="line">// 定义一个常量  这里是组件 html</span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;StatusBar barStyle=&quot;dark-content&quot; /&gt;</span><br><span class="line">      &lt;SafeAreaView&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;Text style=&#123;styles.HelloComponent1&#125; onPress=&#123;this.onPressButton&#125;&gt;aaaaaa&lt;/Text&gt;  </span><br><span class="line">         &lt;/View&gt;</span><br><span class="line">      &lt;/SafeAreaView&gt;</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 函数</span><br><span class="line">function onPressButton() &#123;</span><br><span class="line">  console.log(&quot;sssssss&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义一个常量 是 css 样式</span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">  HelloComponent1: &#123;</span><br><span class="line">    fontSize:60,</span><br><span class="line">     backgroundColor: &apos;red&apos;, </span><br><span class="line">     marginTop:100</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 导出的内容</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const App = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">// 这里定义一个函数</span><br><span class="line">  this.onPressButton0 = &#123;</span><br><span class="line">    onStartShouldSetResponder: () =&gt; true,</span><br><span class="line">    onMoveShouldSetResponder: () =&gt; true,</span><br><span class="line">    </span><br><span class="line">    // 这里是响应结束时 触发</span><br><span class="line">    onResponderEnd:() =&gt; &#123;</span><br><span class="line">      console.log(&apos;main.js Text tap&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;StatusBar barStyle=&quot;dark-content&quot; /&gt;</span><br><span class="line">      &lt;SafeAreaView&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;HelloComponent&gt;&lt;/HelloComponent&gt;</span><br><span class="line">          // 绑定一个事件</span><br><span class="line">          &lt;Text &#123;...this.onPressButton0&#125;&gt;text&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/SafeAreaView&gt;</span><br><span class="line">    &lt;/Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h3 id="组件内绑定事件"><a href="#组件内绑定事件" class="headerlink" title="组件内绑定事件"></a>组件内绑定事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export default class HelloComponent extends Component &#123;</span><br><span class="line">// 定义一个函数</span><br><span class="line">  onPressButton0 = &#123;</span><br><span class="line">    onStartShouldSetResponder: () =&gt; true,</span><br><span class="line">    onMoveShouldSetResponder: () =&gt; true,</span><br><span class="line">    // 响应结束</span><br><span class="line">    onResponderEnd:() =&gt; &#123;</span><br><span class="line">      console.log(&apos;HelloComponent1 组件内响应 onPressButton0&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">    render()&#123;</span><br><span class="line">        return  &lt;View&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.HelloComponent1&#125; &#123;...this.onPressButton0&#125; &gt;HelloComponent1 组件内响应 onPressButton0&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件数据绑定"><a href="#组件数据绑定" class="headerlink" title="组件数据绑定"></a>组件数据绑定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 全局的变量</span><br><span class="line">var cc = &apos;sss&apos;</span><br><span class="line"></span><br><span class="line">export default class OneComponent extends Component &#123;</span><br><span class="line"></span><br><span class="line">组件的属性变量</span><br><span class="line">    state = &#123;</span><br><span class="line">        name: &apos;梁大红&apos;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">组件的属性变量</span><br><span class="line">  onPressButton0 = &#123;</span><br><span class="line">    onStartShouldSetResponder: () =&gt; true,</span><br><span class="line">    onMoveShouldSetResponder: () =&gt; true,</span><br><span class="line">    onResponderEnd:() =&gt; &#123;</span><br><span class="line">      console.log(&apos;OneComponent 组件内响应 onPressButton0&apos;)</span><br><span class="line">      // 刷新界面</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">          name: this.state.name + &apos;1&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 修改全局值 来刷新界面</span><br><span class="line">      cc = cc + &apos;1&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return  &lt;View&gt;</span><br><span class="line">        // 取出值</span><br><span class="line">        &lt;Text style=&#123;styles.HelloComponent1&#125; &#123;...this.onPressButton0&#125; &gt;&#123;this.state.name&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;Text&gt;&#123;cc&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><ul><li><a href="http://www.devio.org/2016/08/10/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%AD" target="_blank" rel="noopener">React Native之React速学教程(中) - 组件的生命周期</a>/)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default class OneComponent extends Component &#123;</span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        console.log(&apos;在初始化渲染执行之后立刻调用一次，仅客户端有效（服务器端不会调用）。&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><ul><li><a href="https://reactnative.cn/docs/network/" target="_blank" rel="noopener">https://reactnative.cn/docs/network/</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">export default class OneComponent extends Component &#123;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line"></span><br><span class="line">        fetch(&apos;https://facebook.github.io/react-native/movies.json&apos;, </span><br><span class="line">        &#123;</span><br><span class="line">            method: &apos;GET&apos;,</span><br><span class="line"></span><br><span class="line">            headers: &#123;</span><br><span class="line">                Accept: &apos;application/json&apos;,</span><br><span class="line">                &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // body: JSON.stringify(&#123;</span><br><span class="line">            //     // firstParam: &apos;yourValue&apos;,</span><br><span class="line">            //     // secondParam: &apos;yourOtherValue&apos;,</span><br><span class="line">            // &#125;),</span><br><span class="line">        &#125;,)</span><br><span class="line">        </span><br><span class="line">        //  json 处理</span><br><span class="line">            .then((response) =&gt; response.json())</span><br><span class="line">            </span><br><span class="line">            // 成功了</span><br><span class="line">            .then((responseJson) =&gt; &#123;</span><br><span class="line">                console.log(&apos;成功了&apos; + responseJson);</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">            // 异常处理</span><br><span class="line">            .catch((error) =&gt; &#123;</span><br><span class="line">                console.log(&apos;失败了&apos; + error);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="界面中写各种判断和执行方法"><a href="#界面中写各种判断和执行方法" class="headerlink" title="界面中写各种判断和执行方法"></a>界面中写各种判断和执行方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;View&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="string">"1111"</span>].map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;Text&gt;&#123;item&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>View&gt;</span><br><span class="line"></span><br><span class="line">&lt;View</span><br><span class="line">&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;Text</span><br><span class="line"></span><br><span class="line">                    style=&#123;</span><br><span class="line">                        (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> (</span><br><span class="line">                                &#123;</span><br><span class="line">                                    color: <span class="string">"#333"</span>,</span><br><span class="line">                                    fontSize: <span class="number">10</span>,</span><br><span class="line">                                &#125;</span><br><span class="line">                            )</span><br><span class="line">                        &#125;)()</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &gt;aaaa&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;)()</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>View&gt;</span><br></pre></td></tr></table></figure><h1 id="RN-组件"><a href="#RN-组件" class="headerlink" title="RN 组件"></a>RN 组件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;FlatList</span><br><span class="line">    style=&#123;&#123; <span class="attr">marginBottom</span>: <span class="number">80</span> &#125;&#125;</span><br><span class="line">    data=&#123;<span class="keyword">this</span>.state.workplaceList&#125;</span><br><span class="line">    renderItem=&#123;(&#123; item &#125;) =&gt;</span><br><span class="line">        (</span><br><span class="line">            &lt;TouchableOpacity onPress=&#123;() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> &#123; navigation &#125; = <span class="keyword">this</span>.props</span><br><span class="line">                navigation.goBack()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> callback = <span class="keyword">this</span>.props.navigation.state.params.callback</span><br><span class="line">                <span class="keyword">if</span> (callback != <span class="literal">null</span>) &#123;</span><br><span class="line">                    callback(item)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;&#125;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;View style=&#123;&#123; ...styles.searchView &#125;&#125;&gt;</span><br><span class="line">                    &lt;Text style=&#123;&#123; <span class="attr">fontSize</span>: <span class="number">20</span>, <span class="attr">color</span>: <span class="string">"#333"</span> &#125;&#125;&gt;&#123;item.workplaceCode&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Text style=&#123;&#123; fontSize: 14, color: "#999", marginTop: 10 &#125;&#125;&gt;&#123;item.workplaceName&#125;&lt;/</span>Text&gt;</span><br><span class="line">                    &lt;Text style=&#123;&#123; <span class="attr">fontSize</span>: <span class="number">14</span>, <span class="attr">color</span>: <span class="string">"#999"</span>, <span class="attr">marginTop</span>: <span class="number">10</span> &#125;&#125;&gt;</span><br><span class="line">                        &#123;item.provinceName + item.cityName + item.countyName + item.address&#125;</span><br><span class="line">                    &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;View style=&#123;&#123; height: 0.5, backgroundColor: "#e5e5e5", width: this.state.screenWidth, marginTop: 10 &#125;&#125;&gt;&lt;/</span>View&gt;</span><br><span class="line">                &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &lt;/</span>TouchableOpacity&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="Lib"><a href="#Lib" class="headerlink" title="Lib"></a>Lib</h3><ul><li><a href="https://github.com/react-native-community/react-native-navbar" target="_blank" rel="noopener">https://github.com/react-native-community/react-native-navbar</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://facebook.github.io/react-native/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react-native&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/facebook/react-native&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="02-技术-前端" scheme="http://liangdahong.com/categories/02-%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React Native" scheme="http://liangdahong.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>(转)UIStackView的简单使用与理解</title>
    <link href="http://liangdahong.com/2019/06/04/00-%E6%8A%80%E6%9C%AF-iOS/%E8%BD%AC-UIStackView%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
    <id>http://liangdahong.com/2019/06/04/00-技术-iOS/转-UIStackView的简单使用与理解/</id>
    <published>2019-06-04T03:16:33.000Z</published>
    <updated>2019-10-18T23:11:33.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>转载自 <a href="https://lockxmonk.github.io/15391408783293.html" target="_blank" rel="noopener">https://lockxmonk.github.io/15391408783293.html</a></li></ul><blockquote><p>之前一直在吐槽iOS的布局方式（frame和autolayout）相比前端的flex布局方式很落后，也在想有没有其它的方式来改善。最近偶然发现UIStackView的存在（苹果爸爸原谅我😂），了解后发现其中的使用与布局方式类似于flex布局，感觉这就是苹果爸爸借鉴flex布局特点所构造的一种布局实现方式吧。</p></blockquote><a id="more"></a><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><blockquote><p>这里我们看一下如何简单的使用stackview来创造一个拥有众多子item的水平视图。代码如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line"></span><br><span class="line">    containerView = [[UIStackView alloc]initWithFrame:CGRectMake(0, 100, CGRectGetWidth(self.view.bounds), 200)];</span><br><span class="line">    //子视图布局方向：水平或垂直</span><br><span class="line">    containerView.axis = UILayoutConstraintAxisHorizontal;//水平布局</span><br><span class="line">    //子控件依据何种规矩布局</span><br><span class="line">    containerView.distribution = UIStackViewDistributionFillEqually;//子控件均分</span><br><span class="line">    //子控件之间的最小间距</span><br><span class="line">    containerView.spacing = 10;</span><br><span class="line">    //子控件的对齐方式</span><br><span class="line">    containerView.alignment = UIStackViewAlignmentFill;</span><br><span class="line">    NSArray *tempArray = @[@&quot;1&quot;,@&quot;2&quot;,@&quot;3&quot;,@&quot;4&quot;];</span><br><span class="line">    for (NSInteger i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">//        UIView *view = [[UIView alloc]init];</span><br><span class="line">        UILabel *label = [[UILabel alloc] init];</span><br><span class="line">        label.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">        label.backgroundColor = [UIColor colorWithRed:random()%256/255.0 green:random()%256/255.0 blue:random()%256/255.0 alpha:1];</span><br><span class="line">        label.numberOfLines = 0;</span><br><span class="line">        label.text = tempArray[i];</span><br><span class="line">        </span><br><span class="line">        [containerView addArrangedSubview:label];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    [self.view addSubview:containerView];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到 <code>stackView</code> 的使用和view没有大的区别，使用时根绝需要来设置 <code>stackView</code> 的 <code>axis</code>（布局方向）, <code>distribution</code>（子控件依据何种规矩布局）, <code>spacing</code>（子控件之间的最小间距）, <code>alignment</code>（子控件的对齐方式）等属性。</p></blockquote><hr><h2 id="属性及方法"><a href="#属性及方法" class="headerlink" title="属性及方法"></a>属性及方法</h2><blockquote><p>这里详细说明一下个属性的主要参数：</p></blockquote><h3 id="axis："><a href="#axis：" class="headerlink" title="axis："></a>axis：</h3><blockquote><p>子控件的布局方向，水平（ <code>UILayoutConstraintAxisHorizontal</code>）或垂直（<code>UILayoutConstraintAxisVertical</code>）， 这个不用过多解释了</p></blockquote><h3 id="UIStackViewDistribution"><a href="#UIStackViewDistribution" class="headerlink" title="UIStackViewDistribution"></a>UIStackViewDistribution</h3><blockquote><p><code>UIStackViewDistributionFill</code> ：它就是将 arrangedSubviews 填充满整个 StackView ，如果设置了spacing，那么这些 arrangedSubviews 之间的间距就是spacing。如果减去所有的spacing，所有的 arrangedSubview 的固有尺寸( intrinsicContentSize )不能填满或者超出 StackView 的尺寸，那就会按照 Hugging 或者 CompressionResistance 的优先级来拉伸或压缩一些 arrangedSubview 。如果出现优先级相同的情况，就按排列顺序来拉伸或压缩。</p></blockquote><blockquote><p><code>UIStackViewDistributionFillEqually</code> ：这种就是 StackView 的尺寸减去所有的spacing之后均分给 arrangedSubviews ，每个 arrangedSubview 的尺寸是相同的。</p></blockquote><blockquote><p><code>UIStackViewDistributionFillProportionally</code> ：这种跟FillEqually差不多，只不过这个不是讲尺寸均分给 arrangedSubviews ，而是根据 arrangedSubviews 的 intrinsicContentSize 按比例分配。</p></blockquote><blockquote><p><code>UIStackViewDistributionEqualSpacing</code> ：这种是使 arrangedSubview 之间的spacing相等，但是这个spacing是有可能大于 StackView 所设置的spacing，但是绝对不会小于。这个类型的布局可以这样理解，先按所有的 arrangedSubview 的 intrinsicContentSize 布局，然后余下的空间均分为spacing，如果大约 StackView 设置的spacing那这样就OK了，如果小于就按照 StackView 设置的spacing，然后按照 CompressionResistance 的优先级来压缩一个 arrangedSubview 。</p></blockquote><blockquote><p><code>UIStackViewDistributionEqualCentering</code> ：这种是使 arrangedSubview 的中心点之间的距离相等，这样没两个 arrangedSubview 之间的spacing就有可能不是相等的，但是这个spacing仍然是大于等于 StackView 设置的spacing的，不会是小于。这个类型布局仍然是如果 StackView 有多余的空间会均分给 arrangedSubviews 之间的spacing，如果空间不够那就按照 CompressionResistance 的优先级压缩 arrangedSubview 。</p></blockquote><h3 id="alignment"><a href="#alignment" class="headerlink" title="alignment"></a>alignment</h3><blockquote><p><code>UIStackViewAlignmentFill</code> = 默认方式， 如果子控件水平布局, 则指子控件的垂直方向填充满stackView. 反之亦然</p></blockquote><blockquote><p><code>UIStackViewAlignmentLeading</code> = 如果子控件竖直布局, 则指子控件左边对齐stackView左边. 反之亦然, 即 UIStackViewAlignmentTop = UIStackViewAlignmentLeading。</p></blockquote><blockquote><p><code>UIStackViewAlignmentTop</code> = UIStackViewAlignmentLeading,</p></blockquote><blockquote><p><code>UIStackViewAlignmentFirstBaseline</code> = 根据上方基线布局所有子视图的 y 值(适用于 Horizontal 模式)</p></blockquote><blockquote><p><code>UIStackViewAlignmentLastBaseline</code> = 根据下方基线布局所有子视图的 y 值(适用于 Horizontal 模式)</p></blockquote><blockquote><p><code>UIStackViewAlignmentCenter</code> = 中心对齐</p></blockquote><blockquote><p><code>UIStackViewAlignmentTrailing</code> = 如果子控件竖直布局, 则指子控件左边对齐stackView右边. 反之亦然, 即UIStackViewAlignmentBottom = UIStackViewAlignmentTrailing</p></blockquote><blockquote><p><code>UIStackViewAlignmentBottom</code> = UIStackViewAlignmentTrailing</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>这里还要说明几个方法：addArrangedSubview、removeArrangedSubview和insertArrangedSubview，日常view的添加和子视图从复视图删除使用的是addSubview和removeFromSuperview。</p></blockquote><blockquote><p>其中完整方法如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">初始化数组:</span><br><span class="line">- (instancetype)initWithArrangedSubviews:(NSArray *)views;</span><br><span class="line">添加子视图: </span><br><span class="line">- (void)addArrangedSubview:(UIView *)view;</span><br><span class="line">移除子视图:</span><br><span class="line">- (void)removeArrangedSubview:(UIView *)view;</span><br><span class="line">根据下标插入视图:</span><br><span class="line">- (void)insertArrangedSubview:(UIView *)viewatIndex:(NSUInteger)stackIndex;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>注意： addArrangedSubview 和 insertArrangedSubview， 会把子控件加到arrangedSubviews数组的同时添加到StackView的subView数组中，但是removeArrangedSubview， 只会把子控件从arrangedSubviews数组中移除，不会从subviews中移除，如果需要调用removeFromSuperview</p></blockquote><hr><blockquote><p>若我们需要删除stackView中subView数组的最后一个视图，可以用如下方式：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//removeArrangedSubview， 只会把子控件从arrangedSubviews数组中移除，</span><br><span class="line">//不会从subviews中移除，如果需要可调用removeFromSuperview</span><br><span class="line">UIView *view = [_containerView.subviews lastObject];</span><br><span class="line">[_containerView removeArrangedSubview:view];</span><br><span class="line">[view removeFromSuperview];</span><br></pre></td></tr></table></figure><blockquote><p>到此stackView的一个简单使用方式就知道了。</p></blockquote><ul><li>转载自 <a href="https://lockxmonk.github.io/15391408783293.html" target="_blank" rel="noopener">https://lockxmonk.github.io/15391408783293.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;转载自 &lt;a href=&quot;https://lockxmonk.github.io/15391408783293.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://lockxmonk.github.io/15391408783293.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;之前一直在吐槽iOS的布局方式（frame和autolayout）相比前端的flex布局方式很落后，也在想有没有其它的方式来改善。最近偶然发现UIStackView的存在（苹果爸爸原谅我😂），了解后发现其中的使用与布局方式类似于flex布局，感觉这就是苹果爸爸借鉴flex布局特点所构造的一种布局实现方式吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="00-技术-iOS" scheme="http://liangdahong.com/categories/00-%E6%8A%80%E6%9C%AF-iOS/"/>
    
    
      <category term="iOS" scheme="http://liangdahong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 运行时之消息转发机制</title>
    <link href="http://liangdahong.com/2018/12/28/00-%E6%8A%80%E6%9C%AF-iOS/iOS-%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B9%8B%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>http://liangdahong.com/2018/12/28/00-技术-iOS/iOS-运行时之消息转发机制/</id>
    <published>2018-12-28T02:00:53.000Z</published>
    <updated>2019-10-18T23:11:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Objective-C 下所有的方法调用都可以理解为，消息。一个对象接收到消息后，处理流程如下：</p></blockquote><a id="more"></a><ul><li>通过 NSObject 的 isa 指针找到对应的 Class</li><li>在方法缓存中查找 SEL</li><li>在 Class 的方法列表中找到对应的 SEL</li><li>如果没有继续往父类中找</li></ul><blockquote><p>在常规的操作中，如果我们调用一个没有实现的方法时，一直找到 root class  时都没找到方法实现时，崩溃。</p></blockquote><hr><blockquote><p>那么在没有查到实现的方法时系统是否做了其他的操作呢？或者我们有什么办法来防止程序崩溃吗 ？这就是本文的主题 <code>消息转发机制</code>.</p></blockquote><hr><blockquote><p>如下的流程图清晰的描述了具体过程。</p></blockquote><p><img src="http://www.enkichen.com/uploads/forwardflow.png" alt=""></p><ul><li>总结为 3 个阶段可以补救。</li></ul><h2 id="第-1-个阶段-动态方法解析"><a href="#第-1-个阶段-动态方法解析" class="headerlink" title="第 1 个阶段 - 动态方法解析"></a>第 1 个阶段 - 动态方法解析</h2><blockquote><p>在动态方法解析阶段，在该阶段中，我们可以动态的为类添加一个方法，从而让动态添加的方法来处理之前未能处理的消息，具体是在下面的方法中动态添加方法同上返回 YES，那么系统就会重给对象发送刚才的消息来执行执行。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line"> // 动态添加方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &lt;objc/runtime.h&gt;</span><br><span class="line"></span><br><span class="line">void test1test1(id self, SEL _cmd) &#123;</span><br><span class="line">    NSLog(@&quot;test1test1 %@ %@&quot;, NSStringFromSelector(_cmd) ,self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@interface BMPerson : NSObject</span><br><span class="line">- (void)test1;</span><br><span class="line">@end</span><br><span class="line">@implementation BMPerson</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, NSStringFromSelector(sel));</span><br><span class="line">    class_addMethod(BMPerson.class, NSSelectorFromString(@&quot;test1&quot;), (IMP) test1test1, NULL);</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    BMPerson *peron = BMPerson.new;</span><br><span class="line">    [peron test1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第-2-个阶段-转发"><a href="#第-2-个阶段-转发" class="headerlink" title="第 2 个阶段 - 转发"></a>第 2 个阶段 - 转发</h2><blockquote><p>在这个阶段系统是要求我们给他返回一个可以正常响应次消息的对象，系统就会把刚才的消息转发给开发者返回的对象，让新的对象去消息响应的消息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line"> // 然后可以响应消息的对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface BMGood : NSObject</span><br><span class="line">@end</span><br><span class="line">@implementation BMGood</span><br><span class="line">- (void)test1 &#123;</span><br><span class="line">    NSLog(@&quot;BMGood test1&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface BMPerson : NSObject</span><br><span class="line">- (void)test1;</span><br><span class="line">@end</span><br><span class="line">@implementation BMPerson</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    return BMGood.new;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    BMPerson *peron = BMPerson.new;</span><br><span class="line">    [peron test1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第-3-个阶段-自由派发"><a href="#第-3-个阶段-自由派发" class="headerlink" title="第 3 个阶段 - 自由派发"></a>第 3 个阶段 - 自由派发</h2><blockquote><p>在这个阶段是最后一次机会，也是最强大的一步，因为在这里我们可以任意的转发给其他对象，而且可以转发给多个其他对象，从而我们可以为 Objective-C 实现 <code>多重继承</code> 功能，如某一种动物继承了🐱和🐶，在这里就可以转发给🐱和🐶，同时拥有抓老鼠和看家的功能。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">// 返回 NSMethodSignature 对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface BMGood : NSObject</span><br><span class="line">@end</span><br><span class="line">@implementation BMGood</span><br><span class="line">- (void)test1BMGood &#123;</span><br><span class="line">    NSLog(@&quot;BMGood test1BMGood&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@interface BMPerson : NSObject</span><br><span class="line">- (void)test1;</span><br><span class="line">@end</span><br><span class="line">@implementation BMPerson</span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, NSStringFromSelector(aSelector));</span><br><span class="line">    SEL selector = @selector(test1BMGood);</span><br><span class="line">    // 创建NSMethodSignature</span><br><span class="line">    BMGood *target =  BMGood.new;</span><br><span class="line">    NSMethodSignature *signature = [target methodSignatureForSelector:selector];</span><br><span class="line">    // 创建NSInvocation</span><br><span class="line">    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];</span><br><span class="line">    // 设置target</span><br><span class="line">    invocation.target = target;</span><br><span class="line">    // 设置SEL</span><br><span class="line">    invocation.selector = selector;</span><br><span class="line">    // 开始调用</span><br><span class="line">    [invocation invoke];</span><br><span class="line">    return signature;</span><br><span class="line">&#125;</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, anInvocation);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    BMPerson *peron = BMPerson.new;</span><br><span class="line">    [peron test1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="崩溃阶段"><a href="#崩溃阶段" class="headerlink" title="崩溃阶段"></a>崩溃阶段</h2><blockquote><p>如果在上面的 3 步都没挽救，那么系统会调用 <code>doesNotRecognizeSelector</code> 方法来输出崩溃的日志信息.</p></blockquote><h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><blockquote><p>由上面的简单分析，我们在调用没有实现的方法到崩溃经过了 </p></blockquote><ul><li><code>方法查找</code> </li><li><code>动态方法解析</code> </li><li><code>转发</code> </li><li><code>自由派发</code> </li><li><code>崩溃</code> </li></ul><blockquote><p>5 个过程，我们可以在 2 3 4 中拦截这个崩溃的产生。</p></blockquote><ul><li><a href="https://github.com/liangdahong/resolve-Demo" target="_blank" rel="noopener">完整DEMO</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Objective-C 下所有的方法调用都可以理解为，消息。一个对象接收到消息后，处理流程如下：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="00-技术-iOS" scheme="http://liangdahong.com/categories/00-%E6%8A%80%E6%9C%AF-iOS/"/>
    
    
      <category term="iOS" scheme="http://liangdahong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>JSPatch简单分析1</title>
    <link href="http://liangdahong.com/2018/10/19/00-%E6%8A%80%E6%9C%AF-iOS/JSPatch%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%901/"/>
    <id>http://liangdahong.com/2018/10/19/00-技术-iOS/JSPatch简单分析1/</id>
    <published>2018-10-19T01:01:29.000Z</published>
    <updated>2019-10-18T23:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><ul><li><a href="https://github.com/bang590/JSPatch" target="_blank" rel="noopener">https://github.com/bang590/JSPatch</a></li></ul><blockquote><p>JSPatch 是一个基于 JavaScriptCore 的开源项目，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 实时修复线上 bug。</p></blockquote><a id="more"></a><h3 id="JavaScriptCore初探"><a href="#JavaScriptCore初探" class="headerlink" title="JavaScriptCore初探"></a>JavaScriptCore初探</h3><ul><li><a href="https://hjgitbook.gitbooks.io/ios/content/04-technical-research/04-javascriptcore-note.html" target="_blank" rel="noopener">本段参考来自</a></li></ul><blockquote><p>注：JavaScriptCore API也可以用Swift来调用，本文用Objective-C来介绍。</p></blockquote><ul><li><p>在iOS7之前，原生应用和Web应用之间很难通信。如果你想在iOS设备上渲染HTML或者运行JavaScript，你不得不使用UIWebView。iOS7引入了JavaScriptCore，功能更强大，使用更简单。</p></li><li><p>JavaScriptCore是封装了JavaScript和Objective-C桥接的Objective-C API，只要用很少的代码，就可以做到JavaScript调用Objective-C，或者Objective-C调用JavaScript。</p></li><li><p>在之前的iOS版本，你只能通过向UIWebView发送stringByEvaluatingJavaScriptFromString:消息来执行一段JavaScript脚本。并且如果想用JavaScript调用Objective-C，必须打开一个自定义的URL（例如：foo://），然后在UIWebView的delegate方法webView:shouldStartLoadWithRequest:navigationType中进行处理。</p></li><li><p>然而现在可以利用JavaScriptCore的先进功能了，它可以：</p></li><li><ul><li>运行JavaScript脚本而不需要依赖UIWebView</li></ul></li><li><ul><li>使用现代Objective-C的语法（例如Blocks和下标）</li></ul></li><li><ul><li>在Objective-C和JavaScript之间无缝的传递值或者对象</li></ul></li><li><ul><li>创建混合对象（原生对象可以将JavaScript值或函数作为一个属性）</li></ul></li></ul><h3 id="使用-JavaScriptCore-做-JavaScript-和-OC-之间的相互调用的2个小例子"><a href="#使用-JavaScriptCore-做-JavaScript-和-OC-之间的相互调用的2个小例子" class="headerlink" title="使用 JavaScriptCore 做 JavaScript 和 OC 之间的相互调用的2个小例子"></a>使用 JavaScriptCore 做 JavaScript 和 OC 之间的相互调用的2个小例子</h3><h4 id="Objective-C调用JavaScript"><a href="#Objective-C调用JavaScript" class="headerlink" title="Objective-C调用JavaScript"></a>Objective-C调用JavaScript</h4><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [[JSContext alloc] init];</span><br><span class="line">NSString *str = @<span class="string">"(1*(2-2)+1)*5*8-2+9"</span>;</span><br><span class="line">JSValue *value =  [context evaluateScript:str];</span><br><span class="line">NSLog(@<span class="string">"%@ = %@"</span>, str,value.toNumber);</span><br></pre></td></tr></table></figure><h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [[JSContext alloc] init];</span><br><span class="line">NSString *jsfunc = @<span class="string">"function fac(n)&#123; return (n * 2);&#125;"</span>;</span><br><span class="line">[context evaluateScript:jsfunc];</span><br><span class="line">JSValue *func = context[@<span class="string">"fac"</span>];</span><br><span class="line">JSValue *value1 = [func callWithArguments:@[@<span class="number">100</span>]];</span><br><span class="line">NSLog(@<span class="string">"%@"</span>,value1.toNumber);</span><br></pre></td></tr></table></figure><h4 id="JavaScript调用Objective-C"><a href="#JavaScript调用Objective-C" class="headerlink" title="JavaScript调用Objective-C"></a>JavaScript调用Objective-C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [[JSContext alloc] init];</span><br><span class="line">[context evaluateScript:@<span class="string">"function printHello() &#123;print(\"Hello, World! 我在 JS 中 来的\");&#125;"</span>];</span><br><span class="line">context[@<span class="string">"print"</span>] = ^(NSString *text) &#123;</span><br><span class="line">    NSLog(@<span class="string">"%@"</span>, text);</span><br><span class="line">&#125;;</span><br><span class="line">JSValue *function = context[@<span class="string">"printHello"</span>];</span><br><span class="line">[function callWithArguments:@[]];</span><br></pre></td></tr></table></figure><blockquote><p>知道了 JavaScriptCore 的强大之处，又由于 JavaScript 是脚本语言同时 OC 的动态语言，所以 JSPatch 就诞生了。</p></blockquote><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><ul><li><a href="https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3" target="_blank" rel="noopener">参考来自 JSPatch 实现原理详解</a></li></ul><ul><li>我们从 JSPatch 例子开始看，比如：我们使用了下面的 js 来动态创建一个view</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require('UIView')</span><br><span class="line">var view = UIView.alloc().init()</span><br><span class="line">view.setBackgroundColor(require('UIColor').grayColor())</span><br><span class="line">view.setAlpha(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><ul><li>当我们在 oc 中执行上面的 js 时，</li><li>require(‘UIView’) 是调用 js 中的一个方法 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var _require = function(clsName) &#123;</span><br><span class="line">  if (!global[clsName]) &#123;</span><br><span class="line">    global[clsName] = &#123;</span><br><span class="line">      __clsName: clsName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  return global[clsName]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>var view = UIView.alloc().init() 表示使用 UIView 调用  alloc init 方法，那么我们的 js 中其实是没有 这2 个方法的，但如果没有的话会报错，开发者开始想的办法动态给 js 添加，因为 js 可以随时随地增加方法，但比较痛苦。因为这些方法其实是来自于 oc 中  需要我们去遍历 oc 。由于 js 没有方法转发的功能，最后用了一个精巧的解决这个问题，在每一个 js 发放调用前先调一个 js 已经实现好的方法 __c（），其实现如下图。在这个js方法中做处理，同时想办法回调到 oc 中做应该做的事。使用上面的 js 就会最后回调到吗oc 中创建一个 view 设置颜色等。</li></ul><ul><li>动添加 __c 的调用如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *formatedScript = [NSString stringWithFormat:@<span class="string">";(function()&#123;try&#123;\n%@\n&#125;catch(e)&#123;_OC_catch(e.message, e.stack)&#125;&#125;)();"</span>,</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">;(function()&#123;<span class="keyword">try</span>&#123;</span><br><span class="line">defineClass('JPViewController', &#123;</span><br><span class="line">  handleBtn: function(sender) &#123;</span><br><span class="line">    var tableViewCtrl = JPTableViewController.__c(<span class="string">"alloc"</span>)().__c(<span class="string">"init"</span>)()</span><br><span class="line">    self.__c(<span class="string">"navigationController"</span>)().__c(<span class="string">"pushViewController_animated"</span>)(tableViewCtrl, YES)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineClass('JPTableViewController : UITableViewController &lt;UIAlertViewDelegate&gt;', ['data'], &#123;</span><br><span class="line">  dataSource: function() &#123;</span><br><span class="line">    var data = self.__c(<span class="string">"data"</span>)();</span><br><span class="line">    <span class="keyword">if</span> (data) <span class="keyword">return</span> data;</span><br><span class="line">    var data = [];</span><br><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i ++) &#123;</span><br><span class="line">      data.__c(<span class="string">"push"</span>)(<span class="string">"cell from js "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    self.__c(<span class="string">"setData"</span>)(data)</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;,</span><br><span class="line">  numberOfSectionsInTableView: function(tableView) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_numberOfRowsInSection: function(tableView, section) &#123;</span><br><span class="line">    <span class="keyword">return</span> self.__c(<span class="string">"dataSource"</span>)().length;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_cellForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    var cell = tableView.__c(<span class="string">"dequeueReusableCellWithIdentifier"</span>)(<span class="string">"cell"</span>) </span><br><span class="line">    <span class="keyword">if</span> (!cell) &#123;</span><br><span class="line">      cell = require('UITableViewCell').__c("alloc")().__c("initWithStyle_reuseIdentifier")(0, "cell")</span><br><span class="line">    &#125;</span><br><span class="line">    cell.__c(<span class="string">"textLabel"</span>)().__c(<span class="string">"setText"</span>)(self.__c(<span class="string">"dataSource"</span>)()[indexPath.__c(<span class="string">"row"</span>)()])</span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_heightForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">60</span></span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">     var alertView = require('UIAlertView').__c("alloc")().__c("initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles")("Alert",self.__c("dataSource")()[indexPath.__c("row")()], self, "OK",  null);</span><br><span class="line">     alertView.__c(<span class="string">"show"</span>)()</span><br><span class="line">  &#125;,</span><br><span class="line">  alertView_willDismissWithButtonIndex: function(alertView, idx) &#123;</span><br><span class="line">    console.__c("log")('click btn ' + alertView.__c("buttonTitleAtIndex")(idx).__c("toJS")())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;_OC_catch(e.message, e.<span class="built_in">stack</span>)&#125;&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var _customMethods = &#123;</span><br><span class="line">__c: function(methodName) &#123;</span><br><span class="line">  var slf = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (slf instanceof Boolean) &#123;</span><br><span class="line">    <span class="keyword">return</span> function() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (slf[methodName]) &#123;</span><br><span class="line">    <span class="keyword">return</span> slf[methodName].bind(slf);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!slf.__obj &amp;&amp; !slf.__clsName) &#123;</span><br><span class="line">    throw new Error(slf + '.' + methodName + ' is undefined')</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>JSPatch 的最基本的操作底层原理就是依靠 js 和 oc 的相互调用来实现的，同时 JavaScriptCore 可以做到 oc 对象 在 oc 和 js 组件无缝传递。</li></ul><ul><li>下面简单说下 JSPatch 是怎么样做到动态添加方法  和 交换方法的。我们使用 runtime 来添加方法 一般是提前已经有了  C函数的实现，我们在添加时，让 IMP 指向我们的 c函数指针即可，但是 JSPatch 是完全动态的添加任何类型的方法，怎么做到呢？？ 肯定不可能我们提前就实现好了  c函数，这里开发者是使用了一个通用的 c函数来实现这个问题，就是 所有添加的方法 其实都是执行到了写死的 c函数中，c函数如下，当然做了各种的坑处理，包括各种参数匹配，</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JPForwardInvocation</span><span class="params">(__unsafe_unretained id assignSlf, SEL selector, NSInvocation *invocation)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">    _JSLastCallStack = [NSThread callStackSymbols];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    BOOL deallocFlag = NO;</span><br><span class="line">    id slf = assignSlf;</span><br><span class="line">    BOOL isBlock = [[assignSlf class] isSubclassOfClass : NSClassFromString(@<span class="string">"NSBlock"</span>)];</span><br><span class="line">    </span><br><span class="line">    NSMethodSignature *methodSignature = [invocation methodSignature];</span><br><span class="line">    NSInteger numberOfArguments = [methodSignature numberOfArguments];</span><br><span class="line">    NSString *selectorName = isBlock ? @<span class="string">""</span> : NSStringFromSelector(invocation.selector);</span><br><span class="line">    NSString *JPSelectorName = [NSString stringWithFormat:@<span class="string">"_JP%@"</span>, selectorName];</span><br><span class="line">    JSValue *jsFunc = isBlock ? objc_getAssociatedObject(assignSlf, <span class="string">"_JSValue"</span>)[@<span class="string">"cb"</span>] : getJSFunctionInObjectHierachy(slf, JPSelectorName);</span><br><span class="line">    <span class="keyword">if</span> (!jsFunc) &#123;</span><br><span class="line">        JPExecuteORIGForwardInvocation(slf, selector, invocation);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *argList = [[NSMutableArray alloc] init];</span><br><span class="line">    <span class="keyword">if</span> (!isBlock) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([slf class] == slf) &#123;</span><br><span class="line">            [argList addObject:[JSValue valueWithObject:@&#123;@<span class="string">"__clsName"</span>: NSStringFromClass([slf class])&#125; inContext:_context]];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([selectorName isEqualToString:@<span class="string">"dealloc"</span>]) &#123;</span><br><span class="line">            [argList addObject:[JPBoxing boxAssignObj:slf]];</span><br><span class="line">            deallocFlag = YES;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [argList addObject:[JPBoxing boxWeakObj:slf]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (NSUInteger i = isBlock ? <span class="number">1</span> : <span class="number">2</span>; i &lt; numberOfArguments; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *argumentType = [methodSignature getArgumentTypeAtIndex:i];</span><br><span class="line">        <span class="keyword">switch</span>(argumentType[<span class="number">0</span>] == <span class="string">'r'</span> ? argumentType[<span class="number">1</span>] : argumentType[<span class="number">0</span>]) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_ARG_CASE(_typeChar, _type) \</span></span><br><span class="line">            <span class="keyword">case</span> _typeChar: &#123;   \</span><br><span class="line">                _type arg;  \</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];    \</span><br><span class="line">                [argList addObject:@(arg)]; \</span><br><span class="line">                <span class="keyword">break</span>;  \</span><br><span class="line">            &#125;</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'c'</span>, <span class="keyword">char</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'C'</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'s'</span>, <span class="keyword">short</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'S'</span>, <span class="keyword">unsigned</span> <span class="keyword">short</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'i'</span>, <span class="keyword">int</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'I'</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'l'</span>, <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'L'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'q'</span>, <span class="keyword">long</span> <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'Q'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'f'</span>, <span class="keyword">float</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'d'</span>, <span class="keyword">double</span>)</span><br><span class="line">            JP_FWD_ARG_CASE(<span class="string">'B'</span>, BOOL)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'@'</span>: &#123;</span><br><span class="line">                __unsafe_unretained id arg;</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];</span><br><span class="line">                <span class="keyword">if</span> ([arg isKindOfClass:NSClassFromString(@<span class="string">"NSBlock"</span>)]) &#123;</span><br><span class="line">                    [argList addObject:(arg ? [arg copy]: _nilObj)];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    [argList addObject:(arg ? arg: _nilObj)];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>: &#123;</span><br><span class="line">                NSString *typeString = extractStructName([NSString stringWithUTF8String:argumentType]);</span><br><span class="line">                <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_ARG_STRUCT(_type, _transFunc) \</span></span><br><span class="line">                <span class="keyword">if</span> ([typeString rangeOfString:@#_type].location != NSNotFound) &#123;    \</span><br><span class="line">                    _type arg; \</span><br><span class="line">                    [invocation getArgument:&amp;arg atIndex:i];    \</span><br><span class="line">                    [argList addObject:[JSValue _transFunc:arg inContext:_context]];  \</span><br><span class="line">                    <span class="keyword">break</span>; \</span><br><span class="line">                &#125;</span><br><span class="line">                JP_FWD_ARG_STRUCT(CGRect, valueWithRect)</span><br><span class="line">                JP_FWD_ARG_STRUCT(CGPoint, valueWithPoint)</span><br><span class="line">                JP_FWD_ARG_STRUCT(CGSize, valueWithSize)</span><br><span class="line">                JP_FWD_ARG_STRUCT(NSRange, valueWithRange)</span><br><span class="line">                </span><br><span class="line">                @synchronized (_context) &#123;</span><br><span class="line">                    NSDictionary *structDefine = _registeredStruct[typeString];</span><br><span class="line">                    <span class="keyword">if</span> (structDefine) &#123;</span><br><span class="line">                        <span class="keyword">size_t</span> size = sizeOfStructTypes(structDefine[@<span class="string">"types"</span>]);</span><br><span class="line">                        <span class="keyword">if</span> (size) &#123;</span><br><span class="line">                            <span class="keyword">void</span> *ret = <span class="built_in">malloc</span>(size);</span><br><span class="line">                            [invocation getArgument:ret atIndex:i];</span><br><span class="line">                            NSDictionary *dict = getDictOfStruct(ret, structDefine);</span><br><span class="line">                            [argList addObject:[JSValue valueWithObject:dict inContext:_context]];</span><br><span class="line">                            <span class="built_in">free</span>(ret);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">':'</span>: &#123;</span><br><span class="line">                SEL selector;</span><br><span class="line">                [invocation getArgument:&amp;selector atIndex:i];</span><br><span class="line">                NSString *selectorName = NSStringFromSelector(selector);</span><br><span class="line">                [argList addObject:(selectorName ? selectorName: _nilObj)];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'^'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>: &#123;</span><br><span class="line">                <span class="keyword">void</span> *arg;</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];</span><br><span class="line">                [argList addObject:[JPBoxing boxPointer:arg]];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'#'</span>: &#123;</span><br><span class="line">                Class arg;</span><br><span class="line">                [invocation getArgument:&amp;arg atIndex:i];</span><br><span class="line">                [argList addObject:[JPBoxing boxClass:arg]];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                NSLog(@<span class="string">"error type %s"</span>, argumentType);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_currInvokeSuperClsName[selectorName]) &#123;</span><br><span class="line">        Class cls = NSClassFromString(_currInvokeSuperClsName[selectorName]);</span><br><span class="line">        NSString *tmpSelectorName = [[selectorName stringByReplacingOccurrencesOfString:@<span class="string">"_JPSUPER_"</span> withString:@<span class="string">"_JP"</span>] stringByReplacingOccurrencesOfString:@<span class="string">"SUPER_"</span> withString:@<span class="string">"_JP"</span>];</span><br><span class="line">        <span class="keyword">if</span> (!_JSOverideMethods[cls][tmpSelectorName]) &#123;</span><br><span class="line">            NSString *ORIGSelectorName = [selectorName stringByReplacingOccurrencesOfString:@<span class="string">"SUPER_"</span> withString:@<span class="string">"ORIG"</span>];</span><br><span class="line">            [argList removeObjectAtIndex:<span class="number">0</span>];</span><br><span class="line">            id retObj = callSelector(_currInvokeSuperClsName[selectorName], ORIGSelectorName, [JSValue valueWithObject:argList inContext:_context], [JSValue valueWithObject:@&#123;@<span class="string">"__obj"</span>: slf, @<span class="string">"__realClsName"</span>: @<span class="string">""</span>&#125; inContext:_context], NO);</span><br><span class="line">            id __autoreleasing ret = formatJSToOC([JSValue valueWithObject:retObj inContext:_context]);</span><br><span class="line">            [invocation setReturnValue:&amp;ret];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSArray *params = _formatOCToJSList(argList);</span><br><span class="line">    <span class="keyword">char</span> returnType[<span class="number">255</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(returnType, [methodSignature methodReturnType]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Restore the return type</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(returnType, @encode(JPDouble)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(returnType, @encode(<span class="keyword">double</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(returnType, @encode(JPFloat)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(returnType, @encode(<span class="keyword">float</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (returnType[<span class="number">0</span>] == <span class="string">'r'</span> ? returnType[<span class="number">1</span>] : returnType[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CALL_JS \</span></span><br><span class="line">            JSValue *jsval; \</span><br><span class="line">            [_JSMethodForwardCallLock lock];   \</span><br><span class="line">            jsval = [jsFunc callWithArguments:params]; \</span><br><span class="line">            [_JSMethodForwardCallLock unlock]; \</span><br><span class="line">            <span class="keyword">while</span> (![jsval isNull] &amp;&amp; ![jsval isUndefined] &amp;&amp; [jsval hasProperty:@<span class="string">"__isPerformInOC"</span>]) &#123; \</span><br><span class="line">                NSArray *args = nil;  \</span><br><span class="line">                JSValue *cb = jsval[@<span class="string">"cb"</span>]; \</span><br><span class="line">                <span class="keyword">if</span> ([jsval hasProperty:@<span class="string">"sel"</span>]) &#123;   \</span><br><span class="line">                    id callRet = callSelector(![jsval[@<span class="string">"clsName"</span>] isUndefined] ? [jsval[@<span class="string">"clsName"</span>] toString] : nil, [jsval[@<span class="string">"sel"</span>] toString], jsval[@<span class="string">"args"</span>], ![jsval[@<span class="string">"obj"</span>] isUndefined] ? jsval[@<span class="string">"obj"</span>] : nil, NO);  \</span><br><span class="line">                    args = @[[_context[@<span class="string">"_formatOCToJS"</span>] callWithArguments:callRet ? @[callRet] : _formatOCToJSList(@[_nilObj])]];  \</span><br><span class="line">                &#125;   \</span><br><span class="line">                [_JSMethodForwardCallLock lock];    \</span><br><span class="line">                jsval = [cb callWithArguments:args];  \</span><br><span class="line">                [_JSMethodForwardCallLock unlock];  \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CASE_RET(_typeChar, _type, _retCode)   \</span></span><br><span class="line">            <span class="keyword">case</span> _typeChar : &#123; \</span><br><span class="line">                JP_FWD_RET_CALL_JS \</span><br><span class="line">                _retCode \</span><br><span class="line">                [invocation setReturnValue:&amp;ret];\</span><br><span class="line">                <span class="keyword">break</span>;  \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CASE(_typeChar, _type, _typeSelector)   \</span></span><br><span class="line">            JP_FWD_RET_CASE_RET(_typeChar, _type, _type ret = [[jsval toObject] _typeSelector];)   \</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_ID \</span></span><br><span class="line">            id __autoreleasing ret = formatJSToOC(jsval); \</span><br><span class="line">            <span class="keyword">if</span> (ret == _nilObj ||   \</span><br><span class="line">                ([ret isKindOfClass:[NSNumber class]] &amp;&amp; <span class="built_in">strcmp</span>([ret objCType], <span class="string">"c"</span>) == <span class="number">0</span> &amp;&amp; ![ret boolValue])) ret = nil;  \</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_POINTER    \</span></span><br><span class="line">            <span class="keyword">void</span> *ret; \</span><br><span class="line">            id obj = formatJSToOC(jsval); \</span><br><span class="line">            <span class="keyword">if</span> ([obj isKindOfClass:[JPBoxing class]]) &#123; \</span><br><span class="line">                ret = [((JPBoxing *)obj) unboxPointer]; \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_CLASS    \</span></span><br><span class="line">            Class ret;   \</span><br><span class="line">            ret = formatJSToOC(jsval);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_CODE_SEL    \</span></span><br><span class="line">            SEL ret;   \</span><br><span class="line">            id obj = formatJSToOC(jsval); \</span><br><span class="line">            <span class="keyword">if</span> ([obj isKindOfClass:[NSString class]]) &#123; \</span><br><span class="line">                ret = NSSelectorFromString(obj); \</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'@'</span>, id, JP_FWD_RET_CODE_ID)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'^'</span>, <span class="keyword">void</span>*, JP_FWD_RET_CODE_POINTER)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'*'</span>, <span class="keyword">void</span>*, JP_FWD_RET_CODE_POINTER)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">'#'</span>, Class, JP_FWD_RET_CODE_CLASS)</span><br><span class="line">        JP_FWD_RET_CASE_RET(<span class="string">':'</span>, SEL, JP_FWD_RET_CODE_SEL)</span><br><span class="line"></span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'c'</span>, <span class="keyword">char</span>, charValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'C'</span>, <span class="keyword">unsigned</span> <span class="keyword">char</span>, unsignedCharValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'s'</span>, <span class="keyword">short</span>, shortValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'S'</span>, <span class="keyword">unsigned</span> <span class="keyword">short</span>, unsignedShortValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'i'</span>, <span class="keyword">int</span>, intValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'I'</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>, unsignedIntValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'l'</span>, <span class="keyword">long</span>, longValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'L'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>, unsignedLongValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'q'</span>, <span class="keyword">long</span> <span class="keyword">long</span>, longLongValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'Q'</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>, unsignedLongLongValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'f'</span>, <span class="keyword">float</span>, floatValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'d'</span>, <span class="keyword">double</span>, doubleValue)</span><br><span class="line">        JP_FWD_RET_CASE(<span class="string">'B'</span>, BOOL, boolValue)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'v'</span>: &#123;</span><br><span class="line">            JP_FWD_RET_CALL_JS</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#123;'</span>: &#123;</span><br><span class="line">            NSString *typeString = extractStructName([NSString stringWithUTF8String:returnType]);</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">define</span> JP_FWD_RET_STRUCT(_type, _funcSuffix) \</span></span><br><span class="line">            <span class="keyword">if</span> ([typeString rangeOfString:@#_type].location != NSNotFound) &#123;    \</span><br><span class="line">                JP_FWD_RET_CALL_JS \</span><br><span class="line">                _type ret = [jsval _funcSuffix]; \</span><br><span class="line">                [invocation setReturnValue:&amp;ret];\</span><br><span class="line">                <span class="keyword">break</span>;  \</span><br><span class="line">            &#125;</span><br><span class="line">            JP_FWD_RET_STRUCT(CGRect, toRect)</span><br><span class="line">            JP_FWD_RET_STRUCT(CGPoint, toPoint)</span><br><span class="line">            JP_FWD_RET_STRUCT(CGSize, toSize)</span><br><span class="line">            JP_FWD_RET_STRUCT(NSRange, toRange)</span><br><span class="line">            </span><br><span class="line">            @synchronized (_context) &#123;</span><br><span class="line">                NSDictionary *structDefine = _registeredStruct[typeString];</span><br><span class="line">                <span class="keyword">if</span> (structDefine) &#123;</span><br><span class="line">                    <span class="keyword">size_t</span> size = sizeOfStructTypes(structDefine[@<span class="string">"types"</span>]);</span><br><span class="line">                    JP_FWD_RET_CALL_JS</span><br><span class="line">                    <span class="keyword">void</span> *ret = <span class="built_in">malloc</span>(size);</span><br><span class="line">                    NSDictionary *dict = formatJSToOC(jsval);</span><br><span class="line">                    getStructDataWithDict(ret, dict, structDefine);</span><br><span class="line">                    [invocation setReturnValue:ret];</span><br><span class="line">                    <span class="built_in">free</span>(ret);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_pointersToRelease) &#123;</span><br><span class="line">        <span class="keyword">for</span> (NSValue *val in _pointersToRelease) &#123;</span><br><span class="line">            <span class="keyword">void</span> *pointer = <span class="literal">NULL</span>;</span><br><span class="line">            [val getValue:&amp;pointer];</span><br><span class="line">            CFRelease(pointer);</span><br><span class="line">        &#125;</span><br><span class="line">        _pointersToRelease = nil;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (deallocFlag) &#123;</span><br><span class="line">        slf = nil;</span><br><span class="line">        Class instClass = object_getClass(assignSlf);</span><br><span class="line">        Method deallocMethod = class_getInstanceMethod(instClass, NSSelectorFromString(@<span class="string">"ORIGdealloc"</span>));</span><br><span class="line">        <span class="keyword">void</span> (*originalDealloc)(__unsafe_unretained id, SEL) = (__typeof__(originalDealloc))method_getImplementation(deallocMethod);</span><br><span class="line">        originalDealloc(assignSlf, NSSelectorFromString(@<span class="string">"dealloc"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平台使用"><a href="#平台使用" class="headerlink" title="平台使用"></a>平台使用</h2><ul><li><a href="https://github.com/bang590/JSPatch/wiki" target="_blank" rel="noopener">平台使用说明</a></li><li>如果使用其平台来做还是算简单的，基本不用做其他配置。</li></ul><h3 id="集成-SDK"><a href="#集成-SDK" class="headerlink" title="集成 SDK"></a>集成 SDK</h3><blockquote><p>一般情况的SDK的使用完全按照文档基本没有问题</p></blockquote><ul><li>在平台创建 APP</li><li>下载SDK集成到项目中</li><li>已经集成完毕</li><li>在需要修复 bug 时，先写好 js 脚本</li><li>本地测试</li><li>测试成功后，去平台下发即可。</li></ul><h3 id="平台-SDK-使用注意点："><a href="#平台-SDK-使用注意点：" class="headerlink" title="平台 SDK 使用注意点："></a>平台 SDK 使用注意点：</h3><ul><li>补丁累计不要超过 1 个</li><li>每一次 App 更新必须使用原生来处理掉所有的补丁，同时需要清除相应的补丁下载。</li><li>每一次下发补丁需提本地测试</li></ul><h2 id="自建平台"><a href="#自建平台" class="headerlink" title="自建平台"></a>自建平台</h2><ul><li><p><img src="http://www.10tiao.com/img.do?url=http%3A//mmbiz.qpic.cn/mmbiz_png/2iaHTl80iajP816eIm8wfzO5MeuIT0VlNtlJWH4Xy4Ioj7ib79tKzAiaDpqJkVM8kDn8nTjXpUUqRibRulJ9bic5DqXg/0%3Fwx_fmt%3Dpng" alt=""></p></li><li><p><a href="http://www.10tiao.com/html/655/201701/2650215152/1.html" target="_blank" rel="noopener">自建平台时需要处理的一些问题</a></p></li></ul><h2 id="拷贝下官方的一个-DEMO"><a href="#拷贝下官方的一个-DEMO" class="headerlink" title="拷贝下官方的一个 DEMO"></a>拷贝下官方的一个 DEMO</h2><ul><li>有一个最简单的控制器上有一个按钮，现在想加点功能，就是在点击这个按钮时跳转到一个新界面，新的界面上有一个 tableView，同时做相应的简单展示、</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;JPViewController.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation JPViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    UIButton *btn = [[UIButton alloc] initWithFrame:CGRectMake(0, 100, [UIScreen mainScreen].bounds.size.width, 50)];</span><br><span class="line">    [btn setTitle:@&quot;Push JPTableViewController&quot; forState:UIControlStateNormal];</span><br><span class="line">    [btn addTarget:self action:@selector(handleBtn:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [btn setBackgroundColor:[UIColor grayColor]];</span><br><span class="line">    [self.view addSubview:btn];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)handleBtn:(id)sender</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li>集成项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[JPEngine startEngine];</span><br><span class="line">NSString *sourcePath = [[NSBundle mainBundle] pathForResource:@&quot;demo&quot; ofType:@&quot;js&quot;];</span><br><span class="line">NSString *script = [NSString stringWithContentsOfFile:sourcePath encoding:NSUTF8StringEncoding error:nil];</span><br><span class="line">[JPEngine evaluateScript:script];</span><br></pre></td></tr></table></figure><ul><li>JS 脚本如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">defineClass(&apos;JPViewController&apos;, &#123;</span><br><span class="line">  handleBtn: function(sender) &#123;</span><br><span class="line">    var tableViewCtrl = JPTableViewController.alloc().init()</span><br><span class="line">    self.navigationController().pushViewController_animated(tableViewCtrl, YES)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">defineClass(&apos;JPTableViewController : UITableViewController &lt;UIAlertViewDelegate&gt;&apos;, [&apos;data&apos;], &#123;</span><br><span class="line">  dataSource: function() &#123;</span><br><span class="line">    var data = self.data();</span><br><span class="line">    if (data) return data;</span><br><span class="line">    var data = [];</span><br><span class="line">    for (var i = 0; i &lt; 20; i ++) &#123;</span><br><span class="line">      data.push(&quot;cell from js &quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">    self.setData(data)</span><br><span class="line">    return data;</span><br><span class="line">  &#125;,</span><br><span class="line">  numberOfSectionsInTableView: function(tableView) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_numberOfRowsInSection: function(tableView, section) &#123;</span><br><span class="line">    return self.dataSource().length;</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_cellForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    var cell = tableView.dequeueReusableCellWithIdentifier(&quot;cell&quot;) </span><br><span class="line">    if (!cell) &#123;</span><br><span class="line">      cell = require(&apos;UITableViewCell&apos;).alloc().initWithStyle_reuseIdentifier(0, &quot;cell&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    cell.textLabel().setText(self.dataSource()[indexPath.row()])</span><br><span class="line">    return cell</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_heightForRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">    return 60</span><br><span class="line">  &#125;,</span><br><span class="line">  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</span><br><span class="line">     var alertView = require(&apos;UIAlertView&apos;).alloc().initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles(&quot;Alert&quot;,self.dataSource()[indexPath.row()], self, &quot;OK&quot;,  null);</span><br><span class="line">     alertView.show()</span><br><span class="line">  &#125;,</span><br><span class="line">  alertView_willDismissWithButtonIndex: function(alertView, idx) &#123;</span><br><span class="line">    console.log(&apos;click btn &apos; + alertView.buttonTitleAtIndex(idx).toJS())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/2026898-1c826218dc28ab68.gif?imageMogr2/auto-orient/strip" alt="1111.gif"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bang590/JSPatch&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/bang590/JSPatch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JSPatch 是一个基于 JavaScriptCore 的开源项目，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 实时修复线上 bug。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="00-技术-iOS" scheme="http://liangdahong.com/categories/00-%E6%8A%80%E6%9C%AF-iOS/"/>
    
    
      <category term="iOS" scheme="http://liangdahong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>时光轴</title>
    <link href="http://liangdahong.com/2018/10/18/05-%E7%94%9F%E6%B4%BB-%E6%84%9F%E5%8F%B9/%E6%97%B6%E5%85%89%E8%BD%B4/"/>
    <id>http://liangdahong.com/2018/10/18/05-生活-感叹/时光轴/</id>
    <published>2018-10-18T09:03:26.000Z</published>
    <updated>2019-10-19T16:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h1><a id="more"></a><ul><li>领证了;</li><li>小朋友比以前听话多了;</li><li>赚了点外快把之前的所有外债还清了，无债一身轻，存了点粮食;</li><li>感谢苹果粑粑，虽然被虐千百遍，但还是有一些收获;</li><li>世界杯输了点，但还好，因祸得福;</li><li>技术方面就不谈了;</li><li>2019 加油。</li></ul><h1 id="2018年计划"><a href="#2018年计划" class="headerlink" title="2018年计划"></a>2018年计划</h1><ul><li>学习 Web前端 -&gt; 会实现基本的界面。</li><li>在 Web前端 的基础上学习微信小程序 -&gt; 会简单的业务功能开发。</li><li>深耕 iOS 技术，对性能优化，有一点的积累。</li><li>稍微复习下算法。</li><li>加强 Swift 的学习。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2018&quot;&gt;&lt;a href=&quot;#2018&quot; class=&quot;headerlink&quot; title=&quot;2018&quot;&gt;&lt;/a&gt;2018&lt;/h1&gt;
    
    </summary>
    
      <category term="05-生活-感叹" scheme="http://liangdahong.com/categories/05-%E7%94%9F%E6%B4%BB-%E6%84%9F%E5%8F%B9/"/>
    
    
      <category term="生活" scheme="http://liangdahong.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>正确高效使用 Google</title>
    <link href="http://liangdahong.com/2018/07/11/03-%E6%8A%80%E6%9C%AF-%E8%AE%A1%E7%AE%97%E6%9C%BA/%E6%AD%A3%E7%A1%AE%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8-Google/"/>
    <id>http://liangdahong.com/2018/07/11/03-技术-计算机/正确高效使用-Google/</id>
    <published>2018-07-11T03:30:49.000Z</published>
    <updated>2019-10-18T23:11:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><a id="more"></a><ul><li>文章来自 <strong>七年就是一辈子-李笑来</strong></li></ul><blockquote><p>研究这个词，在英文中是research，我把它理解为re-search，实际上各种语言是相通的，所谓re-search其实就是“反复搜索”，就是“上下求索”（路漫漫其修远兮，吾将上下而求索）。所以，如果你想学点什么，就要善于搜索。而在这个时代里，最好的搜索工具就是 Google。</p></blockquote><blockquote><p>搜索引擎之所以迷人，就是因为它就好像望远镜一样：</p></blockquote><blockquote><p>能让你看到你原本完全看不到的东西……</p></blockquote><blockquote><p>互联网就好像那浩瀚的宇宙，里面几乎什么都有，只要你肯用“望远镜”去看、用搜索引擎去搜……</p></blockquote><blockquote><p>搜索引擎是公开的，人人都可以用的，可偏偏大多数人不用、不会用，甚至错误地用…… 于是人与人之间的差异多了另外一个不断延展的维度。在这个维度上你不如人家你能怪谁？</p></blockquote><blockquote><p>最烂的提问是：“我连不上 Google 怎么办呀？” 答案是“自己想办法” —— 如果你在乎，你就肯花时间自己解决这个问题，如果你不在乎，就不用在乎了。</p></blockquote><h2 id="使用“本尊”"><a href="#使用“本尊”" class="headerlink" title="使用“本尊”"></a>使用“本尊”</h2><p>最好使用 <a href="http://www.google.com/ncr" target="_blank" rel="noopener">http://www.google.com/ncr</a> NCR: No Country Redirection，而不是<a href="http://www.google.com.hk；有时，直接输入http://www.google.com也会被自动转到“本地Google”，比如，我用日本的" target="_blank" rel="noopener">http://www.google.com.hk；有时，直接输入http://www.google.com也会被自动转到“本地Google”，比如，我用日本的</a> VPN，浏览器就会把我转到<a href="http://www.google.co.jp……" target="_blank" rel="noopener">http://www.google.co.jp……</a></p><h2 id="优先使用英文关键字搜索"><a href="#优先使用英文关键字搜索" class="headerlink" title="优先使用英文关键字搜索"></a>优先使用英文关键字搜索</h2><p>这是个好习惯。别说不会英文，不会就学，没那么难。</p><h2 id="基本技巧"><a href="#基本技巧" class="headerlink" title="基本技巧"></a>基本技巧</h2><p>Google 搜索引擎也许是世界上最简单的应用界面，只有一个输入框和一个按钮。然而，用好它还是需要花点时间去学习的。Google 有帮助文档，还专门设计了个学习网站 A Google A Day</p><h3 id="加号"><a href="#加号" class="headerlink" title="加号"></a>加号</h3><p>在 Google 的输入框里，所有的空格都被 Google 理解为加号+。如果你输入的是 purpose of education那么 Google 返回的文章里既有“purpose”存在，也有“education”存在，但不一定有“purpose of education”存在。另外，过分常用的、单独存在没有意义的词汇往往被忽略掉，比如冠词“a”、“the”；介词“of”、“in”、“on”、“at”、“to”；连词“and”、“or”、“but”；从属连词“that”、“which”、“when”；代词“my”、“his”、“them”等等。</p><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>如果你想要找含有“purpose of education”这个词组的文章，那么你必须输入”purpose of education”。现在的 Google 已经可以处理 utf-8 大字符集了，所以，即便你在输入的时候使用的是全角字符（不是半角字符的”而是“或者”）Google也照样能够正确处理。比较一下两种输入返回的结果：purpose of education vs.“purpose of education”。再试试 the most important benefit of education 和 “the most important benefit of education”。这就是引号（“……”）的作用——返回“完整匹配”的结果。</p><h3 id="减号"><a href="#减号" class="headerlink" title="减号"></a>减号</h3><p>为了进一步筛选搜索结果，还需要学会另外一个符号——减号-。比如，“the most important benefit of education” – “united states”要求Google返回含有“the most important benefit of education”但不存在“united states”的文章。</p><h3 id="星号"><a href="#星号" class="headerlink" title="星号"></a>星号</h3><p>另外一个威力无穷的符号是星号<em>。Google 支持通配符搜索，即搜索字符串中可以包含星号</em>，用来替代任意字符串。比如，“the most * examples of censorship”将会返回含有类似“the most outrageous examples of censorship”、“the most brazen examples of censorship”、“the most heinous examples of censorship”、“the most stupidest examples of censorship”、“the most dangerous examples of censorship”、“the most egregious examples of censorship”、“the most prolific examples of censorship”、“the most absurd examples of censorship”……</p><h3 id="波浪号"><a href="#波浪号" class="headerlink" title="波浪号"></a>波浪号</h3><p>还有一个运用相当灵活、经常带来意外收获的符号是波浪号~。把波浪号~加在某个单词前面，是在告诉 Google：除了给出的关键字之外，还要搜索与波浪号~后面的那个单词相关的词汇。比如，搜索the importance of ~censorship的结果中包含着“the importance of censorship”，也包含着与censorship相关的另外一个词汇“propaganda”——“the importance of propaganda”。</p><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>再学一个在指定网站中搜索的语法“site:”。比如，“the purpose of education” site:<a href="http://www.time.com/就是要求" target="_blank" rel="noopener">http://www.time.com/就是要求</a> Google 只返回 <a href="http://www.time.com" target="_blank" rel="noopener">http://www.time.com</a> 这个网站里的含有“the purpose of education”的文章。</p><h3 id="定制搜索"><a href="#定制搜索" class="headerlink" title="定制搜索"></a>定制搜索</h3><p>2006年，Google 推出了“co-op”服务（自定义搜索引擎）。其中最常用的功能之一就是可以指定 Google 搜索一个或者若干个指定的网站——相当于前面提到的 Google 语法“site:”的扩展。比如，我就曾经为我的学生定制了一个 Google cse（Custom Search Engine）——Search News Media。不妨看看在这个自定义搜索引擎上搜索censorship返回的结果（GRE/SAT 的作文考试中，都有很多关于“censorship”的作文题）。这个 cse 只搜索以下10个网站：</p><ul><li><a href="http://www.economist.com/" target="_blank" rel="noopener">http://www.economist.com/</a></li><li><a href="http://www.cnn.com/" target="_blank" rel="noopener">http://www.cnn.com/</a></li><li><a href="http://www.time.com/" target="_blank" rel="noopener">http://www.time.com/</a></li><li><a href="http://nytimes.com/" target="_blank" rel="noopener">http://nytimes.com/</a></li><li><a href="http://www.washingtonpost.com/" target="_blank" rel="noopener">http://www.washingtonpost.com/</a></li><li><a href="http://www.usnews.com/" target="_blank" rel="noopener">http://www.usnews.com/</a></li><li><a href="http://usatoday.com/" target="_blank" rel="noopener">http://usatoday.com/</a></li><li><a href="http://www.reuters.com/" target="_blank" rel="noopener">http://www.reuters.com/</a></li><li><a href="http://www.bbc.co.uk/" target="_blank" rel="noopener">http://www.bbc.co.uk/</a></li><li><a href="http://en.wikinews.org/" target="_blank" rel="noopener">http://en.wikinews.org/</a></li></ul><h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><ul><li>文章来自 <strong>七年就是一辈子-李笑来</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;
    
    </summary>
    
      <category term="03-技术-计算机" scheme="http://liangdahong.com/categories/03-%E6%8A%80%E6%9C%AF-%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="计算机" scheme="http://liangdahong.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>转 - 中国教育问题的根源在于大学而不在高中</title>
    <link href="http://liangdahong.com/2018/06/25/05-%E7%94%9F%E6%B4%BB-%E6%84%9F%E5%8F%B9/%E8%BD%AC-%E4%B8%AD%E5%9B%BD%E6%95%99%E8%82%B2%E9%97%AE%E9%A2%98%E7%9A%84%E6%A0%B9%E6%BA%90%E5%9C%A8%E4%BA%8E%E5%A4%A7%E5%AD%A6%E8%80%8C%E4%B8%8D%E5%9C%A8%E9%AB%98%E4%B8%AD/"/>
    <id>http://liangdahong.com/2018/06/25/05-生活-感叹/转-中国教育问题的根源在于大学而不在高中/</id>
    <published>2018-06-25T09:17:40.000Z</published>
    <updated>2019-10-18T23:04:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>文章转载自 <a href="https://mp.weixin.qq.com/s/PJc-EPoYWCiIK06zngWBCw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/PJc-EPoYWCiIK06zngWBCw</a>，特别推荐大家关注此公众号。</li></ul><a id="more"></a><p><img src="http://p9mracz1h.bkt.clouddn.com/zgdxgywt.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;文章转载自 &lt;a href=&quot;https://mp.weixin.qq.com/s/PJc-EPoYWCiIK06zngWBCw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/PJc-EPoYWCiIK06zngWBCw&lt;/a&gt;，特别推荐大家关注此公众号。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="05-生活-感叹" scheme="http://liangdahong.com/categories/05-%E7%94%9F%E6%B4%BB-%E6%84%9F%E5%8F%B9/"/>
    
    
      <category term="生活" scheme="http://liangdahong.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发相关</title>
    <link href="http://liangdahong.com/2018/06/13/01-%E6%8A%80%E6%9C%AF-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    <id>http://liangdahong.com/2018/06/13/01-技术-微信小程序/微信小程序开发相关/</id>
    <published>2018-06-13T09:08:17.000Z</published>
    <updated>2019-11-15T03:03:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li><p>微信小程序开发指南  <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/</a> </p></li><li><p>微信小程序官网  &lt;<a href="https://mp.weixin.qq.com/wxamp/" target="_blank" rel="noopener">https://mp.weixin.qq.com/wxamp/</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors</a></p></li><li><p><a href="https://www.w3school.com.cn/css/css_selector_child.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/css/css_selector_child.asp</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p></li></ul><a id="more"></a><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><blockquote><p>display: flex;</p></blockquote><ol><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮一峰 - Flex 布局教程：语法篇</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">阮一峰 - Flex 布局教程：实例篇</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="noopener">mozilla.org - 使用 CSS 弹性盒子</a></li></ol><h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><ul><li><p>flex-direction 主轴方向</p><p>row（默认值）：主轴为水平方向，起点在左端。<br>​    row-reverse：主轴为水平方向，起点在右端。<br>​    column：主轴为垂直方向，起点在上沿。<br>​    column-reverse：主轴为垂直方向，起点在下沿。</p></li></ul><ul><li><p>flex-wrap 换行样式</p><p>（1）nowrap（默认）：不换行。<br>​    （2）wrap：换行，第一行在上方。<br>​    （3）wrap-reverse：换行，第一行在下方。</p></li></ul><ul><li><p>flex-flow  <code>flex-direction</code>  和 <code>flex-wrap</code> 简写方式</p><p>默认值为row nowrap</p></li></ul><ul><li><p>justify-content 主轴对齐方式</p><p>flex-start（默认值）：左对齐<br>​    flex-end：右对齐<br>​    center： 居中<br>​    space-between：两端对齐 (边上的项目到边框的距离是 0 )，项目之间的间隔都相等。<br>​    space-around：每个项目两侧的间隔相等。所以，项目之间的间隔 是 项目与边框的间隔的 2 倍。</p></li></ul><ul><li><p>align-items     交叉轴/侧轴 对齐方式</p><p>flex-start：交叉轴的起点对齐。<br>​    flex-end：交叉轴的终点对齐。<br>​    center：交叉轴的中点对齐。<br>​    baseline: 项目的第一行文字的基线对齐。<br>​    stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p></li></ul><ul><li><p>align-content   <code>多轴线时,一般是多条交叉轴时，多行项目就有多条交叉轴线</code>相当于<code>交叉轴</code>的<code>对齐方式</code>  是对全部的项目的对齐方式。</p><p>​        flex-start：与交叉轴的起点对齐。<br>​    flex-end：与交叉轴的终点对齐。<br>​    center：与交叉轴的中点对齐。<br>​    space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>​    space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>​    stretch（默认值）：轴线占满整个交叉轴。<br>​    </p></li></ul><h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><ul><li><p>order</p><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0 。<br>​    </p></li><li><p>flex-grow属性</p><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br>​    如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。<br>​    如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p></li></ul><ul><li><p>flex-shrink属性</p><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<br>​    如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。<br>​    如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>​    负值对该属性无效。<br>​    </p></li><li><p>flex-basis属性 (待理解)<br>​    flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。<br>​    浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br>​    它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p></li></ul><ul><li><p>flex属性<br>​    flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</span><br><span class="line">&#125;</span><br><span class="line">该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</span><br><span class="line">建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</span><br></pre></td></tr></table></figure></li></ul><ul><li>align-self属性<br>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br>​<br>​    .item {<br>​      align-self: auto | flex-start | flex-end | center | baseline | stretch;<br>​    }<br>​    该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</li></ul><h2 id="position-定位"><a href="#position-定位" class="headerlink" title="position 定位"></a>position 定位</h2><p><a href="http://www.runoob.com/css/css-padding.html" target="_blank" rel="noopener">http://www.runoob.com/css/css-padding.html</a></p><blockquote><p>position 位置的意思，</p></blockquote><hr><ul><li>position: static   默认，   不会被定位，由上下文自动确定其位置</li><li>position: absolute 绝对定位，向上找到第一个 position 为 relative 的标签为参考，可以使用 top left right bottom 等属性</li><li>position: relative 相对定位，以自己为参考</li><li>position: fixed 固定定位</li></ul><h2 id="一些实例"><a href="#一些实例" class="headerlink" title="一些实例"></a>一些实例</h2><h3 id="单行文本框垂直居中"><a href="#单行文本框垂直居中" class="headerlink" title="单行文本框垂直居中"></a>单行文本框垂直居中</h3><ul><li>可以把其 [行高 line-height ] 设置为标签高度即可 <code>line-height: height;</code></li></ul><h3 id="多行文本框垂直居中"><a href="#多行文本框垂直居中" class="headerlink" title="多行文本框垂直居中"></a>多行文本框垂直居中</h3><ul><li>可以使用 table 和 table-cell </li><li>参考 <a href="https://www.cnblogs.com/xiaofeixiang/p/5005587.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">https://www.cnblogs.com/xiaofeixiang/p/5005587.html?utm_source=tuicool&amp;utm_medium=referral</a></li></ul><h2 id="CSS样式类型"><a href="#CSS样式类型" class="headerlink" title="CSS样式类型"></a>CSS样式类型</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 标签选择器 */</span><br><span class="line">/* &lt;view&gt;&lt;/view&gt; */</span><br><span class="line">view &#123;</span><br><span class="line">  background-color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 类选择器 */</span><br><span class="line">/* &lt;view class=&quot;con con&quot;&gt;&lt;/view&gt; */</span><br><span class="line">.con &#123;</span><br><span class="line">   background-color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* id选择器 */</span><br><span class="line">/* &lt;view id=&quot;con&quot;&gt;&lt;/view&gt; */</span><br><span class="line">#con &#123;</span><br><span class="line">  background-color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通配样式-暂时不考虑"><a href="#通配样式-暂时不考虑" class="headerlink" title="通配样式  暂时不考虑"></a>通配样式  暂时不考虑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* 通配样式  暂时不考虑*/</span><br></pre></td></tr></table></figure><h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 交集 */</span><br><span class="line">.con1.con2 &#123;</span><br><span class="line">  background-color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 并集 */</span><br><span class="line">.con1,.con2 &#123;</span><br><span class="line">  background-color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子代"><a href="#子代" class="headerlink" title="子代"></a>子代</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 子代 */</span><br><span class="line">.con1&gt;con2 &#123;</span><br><span class="line">  background-color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后代"><a href="#后代" class="headerlink" title="后代"></a>后代</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 后代 */</span><br><span class="line">.con1 .con2 &#123;</span><br><span class="line">  background-color: #333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><pre><code>WXS 语言目前共有以下几种数据类型：number ： 数值string ：字符串boolean：布尔值object：对象function：函数array : 数组date：日期regexp：正则</code></pre><ul><li><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxs/06datatype.html" target="_blank" rel="noopener">小程序官方文档</a></li></ul><h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 声明一个数组</span><br><span class="line">var arr = []</span><br><span class="line"></span><br><span class="line">// 添加一个对象,同时返回添加后的数组长度</span><br><span class="line">arr.push(&apos;&apos;)</span><br><span class="line"></span><br><span class="line">// 删除最后一个对象,同时返回这个数组</span><br><span class="line">arr.pop()</span><br><span class="line"></span><br><span class="line">// 从sidx位置开始删除len个对象</span><br><span class="line">arr.splice(sidx, len)</span><br></pre></td></tr></table></figure><p><code>JavaScript中对数组的一些操作函数，可参考</code></p><p><img src="http://files.jb51.net/file_images/article/201701/2017010515261024.jpg"></p><h3 id="String-和-Number-相互转换"><a href="#String-和-Number-相互转换" class="headerlink" title="String 和 Number 相互转换"></a>String 和 Number 相互转换</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 会自动忽略掉末尾的0 比如 【  1.00.toString() = '1'   】 【  parseFloat('1.00') = 1 】</span></span><br><span class="line">var n = <span class="number">10</span></span><br><span class="line">String(<span class="number">1</span>)</span><br><span class="line">n.toString()</span><br><span class="line">console.<span class="built_in">log</span>(parseInt(<span class="string">"1.001"</span>));</span><br><span class="line">console.log(parseFloat('1.00'));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 价格转换</span></span><br><span class="line">var price = <span class="number">100.99</span>; <span class="comment">// 元为单位</span></span><br><span class="line">price.toFixed(price);  <span class="comment">// '100.99'</span></span><br><span class="line">(<span class="number">100.00</span>).toFixed();  <span class="comment">// '100.00'</span></span><br><span class="line"></span><br><span class="line">var price = <span class="number">10009</span>; <span class="comment">// 分为单位</span></span><br><span class="line">(<span class="number">10009</span>/<span class="number">100.0</span>).toFixed(price);  <span class="comment">// '100.99'</span></span><br><span class="line">(<span class="number">10000</span>/<span class="number">100.0</span>).toFixed(<span class="number">100.00</span>);  <span class="comment">// '100.00'</span></span><br></pre></td></tr></table></figure><h2 id="JS文件中的各种写法"><a href="#JS文件中的各种写法" class="headerlink" title="JS文件中的各种写法"></a>JS文件中的各种写法</h2><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 使用 module.exports 输出对象</span><br><span class="line">module.exports = &#123;formatTime: formatTime&#125;</span><br><span class="line"></span><br><span class="line">// 引用</span><br><span class="line">const obj = require(&apos;./utils/util&apos;)  // 相对路径  . 表示当前路径  .. 表示当前路径的上一层路径</span><br><span class="line">const obj = require(&apos;/utils/util&apos;)   // 绝对路径</span><br><span class="line">const obj = require(&apos;../utils/util&apos;) // 相对路径</span><br><span class="line"></span><br><span class="line">// 定义一个变量</span><br><span class="line">var num1 = 10;</span><br><span class="line"></span><br><span class="line">// 定义一个常量</span><br><span class="line">const num2 = 10;</span><br><span class="line"></span><br><span class="line">// 定义一个函数</span><br><span class="line">var f2 = function(res) &#123;&#125;</span><br><span class="line">// 定义一个函数</span><br><span class="line">var f3 = (res) =&gt; &#123;&#125;</span><br><span class="line">// 定义一个函数</span><br><span class="line">var f4 = res =&gt; &#123;&#125;</span><br><span class="line">// 定义一个函数</span><br><span class="line">function get(res) &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 定义一个对象，在对象中定义函数和在外面基本一样</span><br><span class="line">var http = &#123;</span><br><span class="line">  a: () =&gt; &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  kk: 10,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 更简洁的方式</span><br><span class="line">fun(&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>//  module class  Promise  箭头函数 =&gt; </p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><blockquote><p>个人理解，Promise 是一个对象，他的目的是封装异步操作，让异步操作处理更简洁。</p></blockquote><h3 id="创建-promise"><a href="#创建-promise" class="headerlink" title="创建  promise"></a>创建  promise</h3><p>下面是创建  <code>promise</code>  的代码，需要过它传入的参数是一个函数  <code>()=&gt;()</code></p><p>resolve, reject 是函数的参数。同时他们也是一个函数，这里暂时不管它是干撒的，反正必须这写就好了。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>() )</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      resolve(<span class="string">'value'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject(<span class="string">'error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="创建一个支持-Promise-函数"><a href="#创建一个支持-Promise-函数" class="headerlink" title="创建一个支持 Promise 函数"></a>创建一个支持 Promise 函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">options = &#123;time: <span class="number">2000</span>&#125;</span>) =&gt;</span> (</span><br><span class="line">promise</span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 合并起来</span></span><br><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">options = &#123;time: <span class="number">2000</span>&#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 成功回调</span></span><br><span class="line">        resolve(<span class="string">'value'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 异常回调</span></span><br><span class="line">        reject(<span class="string">'error'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, options.time)</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="调用支持-Promise-的函数"><a href="#调用支持-Promise-的函数" class="headerlink" title="调用支持 Promise 的函数"></a>调用支持 Promise 的函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// then 的（）中的内容其实就是 上面的 resolve 是一个函数。</span></span><br><span class="line"> <span class="comment">// catch 的（）中的内容其实就是 上面的 reject 是一个函数。</span></span><br><span class="line">func().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"> &#125;).catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>上面介绍了最简单的 Promise 定义，其他各种功能可参考下面的内容。</p></blockquote><ul><li><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/promise</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544</a></li></ul><h3 id="Promise-的其他功能"><a href="#Promise-的其他功能" class="headerlink" title="Promise 的其他功能"></a>Promise 的其他功能</h3><ul><li>转载 <a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/promise</a></li></ul><p>Promise 实例具有<code>then</code>方法，也就是说，<code>then</code>方法是定义在原型对象<code>Promise.prototype</code>上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，<code>then</code>方法的第一个参数是<code>resolved</code>状态的回调函数，第二个参数（可选）是<code>rejected</code>状态的回调函数。</p><p><code>then</code>方法返回的是一个新的<code>Promise</code>实例（注意，不是原来那个<code>Promise</code>实例）。因此可以采用链式写法，即<code>then</code>方法后面再调用另一个<code>then</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> json.post;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码使用<code>then</code>方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p><p>采用链式的<code>then</code>，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个<code>Promise</code>对象（即有异步操作），这时后一个回调函数，就会等待该<code>Promise</code>对象的状态发生变化，才会被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">"/post/1.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON(post.commentURL);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">comments</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"resolved: "</span>, comments);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"rejected: "</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，第一个<code>then</code>方法指定的回调函数，返回的是另一个<code>Promise</code>对象。这时，第二个<code>then</code>方法指定的回调函数，就会等待这个新的<code>Promise</code>对象状态发生变化。如果变为<code>resolved</code>，就调用第一个回调函数，如果状态变为<code>rejected</code>，就调用第二个回调函数。</p><p>如果采用箭头函数，上面的代码可以写得更简洁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">"/post/1.json"</span>).then(</span><br><span class="line">  post =&gt; getJSON(post.commentURL)</span><br><span class="line">).then(</span><br><span class="line">  comments =&gt; <span class="built_in">console</span>.log(<span class="string">"resolved: "</span>, comments),</span><br><span class="line">  err =&gt; <span class="built_in">console</span>.log(<span class="string">"rejected: "</span>, err)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>多个 then 连起来写的时候，后面的 then 要等前面的 then 或者 catch 执行后才执行，同时前面的  then 或者 catch 的返回值会带到后面的 then 中。</p></blockquote><p> 如下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> func = <span class="function">(<span class="params">options = &#123;time: <span class="number">2000</span>&#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        resolve(<span class="string">'value'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'error'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, options.time)</span><br><span class="line">  &#125;)  </span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line">func(&#123;</span><br><span class="line">  time: <span class="number">2000</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  wx.showToast(&#123;</span><br><span class="line">    title: <span class="string">'then 1'</span> + res,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3000</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  wx.showToast(&#123;</span><br><span class="line">    title: <span class="string">'catch 1'</span> + res,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4000</span></span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'then2'</span> + post)</span><br><span class="line"></span><br><span class="line">  baseRequest.func(&#123;</span><br><span class="line">    time: post</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span></span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      title: <span class="string">'then 2'</span> + res,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">post</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    baseRequest.func(&#123;</span><br><span class="line">      time: post</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">res</span> =&gt;</span></span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'catch 2'</span> + res,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><ul><li>组件的定义，使用，传值、事件传递 响应标识</li><li>定义 Blocks 循环</li><li>界面跳转</li><li>css的各种布局</li><li>wxml 中各种条件判断</li><li>组件的导入，css的导入，js方法的导入和导出使用</li><li>定时器</li><li>微信提供的一些系统功能的使用</li><li>刷新组件</li></ul><h1 id="小程序源码破解"><a href="#小程序源码破解" class="headerlink" title="小程序源码破解"></a>小程序源码破解</h1><ul><li>查看 <code>ip</code> 地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 输出 行内有 inet 且没有 127.0.0.1 的内容</span><br><span class="line">ifconfig | grep &quot;inet &quot; | grep -v 127.0.0.1</span><br></pre></td></tr></table></figure><ul><li>微信小程序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 进入手机文件中</span><br><span class="line">ssh root@192.168.2.12</span><br><span class="line"></span><br><span class="line">// 搜索相关</span><br><span class="line">find / -name &quot;*.wxapkg&quot;</span><br><span class="line"></span><br><span class="line">// 删除相关</span><br><span class="line">rm -rf $(find / -name &quot;*.wxapkg&quot;)</span><br><span class="line"></span><br><span class="line">// 把文件拷贝到电脑</span><br><span class="line">scp root@192.168.2.12:/private/var/mobile/Containers/Data/Application/24B958CE-A2B6-4B8C-ABC6-90075E90F2A0/Library/WechatPrivate/5fbbe972df96a510dc8560269047c82a/WeApp/LocalCache/release/wxe7c3f366905ced15/1.wxapkg /Users/___liangdahong/Desktop/wx</span><br><span class="line"></span><br><span class="line">// 解包</span><br><span class="line">node ./wxappUnpacker-master/wuWxapkg.js 1.wxapkg</span><br><span class="line"></span><br><span class="line">335418265</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;微信小程序开发指南  &lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/framework/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developers.weixin.qq.com/miniprogram/dev/framework/&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;微信小程序官网  &amp;lt;&lt;a href=&quot;https://mp.weixin.qq.com/wxamp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/wxamp/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.w3school.com.cn/css/css_selector_child.asp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.w3school.com.cn/css/css_selector_child.asp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="01-技术-微信小程序" scheme="http://liangdahong.com/categories/01-%E6%8A%80%E6%9C%AF-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://liangdahong.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 iOS 事件的传递和响应过程</title>
    <link href="http://liangdahong.com/2018/06/08/00-%E6%8A%80%E6%9C%AF-iOS/%E6%B5%85%E8%B0%88-iOS-%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%BC%A0%E9%80%92%E5%92%8C%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B/"/>
    <id>http://liangdahong.com/2018/06/08/00-技术-iOS/浅谈-iOS-事件的传递和响应过程/</id>
    <published>2018-06-08T03:16:11.000Z</published>
    <updated>2019-10-18T23:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote></blockquote><ul><li><code>iOS</code> 中 <code>View</code> 的事件到底是怎么<code>传递</code>和<code>响应</code>的？</li><li>为什么 <code>父View</code> 关闭了事件响应时，<code>子View</code> 就无法响应事件？ 底层原理？</li><li>如何扩大 <code>Button</code> 的点击范围 ？</li><li>如何让 <code>父View</code> 和 <code>子View</code> 同时响应同一事件？默认情况下只会响应 <code>子View</code> 的事件回调。</li><li>为什么 <code>子View</code> 关闭了事件，但其 <code>父View</code> 开启事件的情况下，点击 <code>子View</code> 时，<code>父View</code> 可以正常响应事件？</li><li>为什么 子View 是 UIView时，如果没有添加手势，点击子 View时，会由其父View来响应，而 子View 是 UIControl 时，子View 没有添加手势，一样不会由 父View 来响应</li><li>…</li></ul><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><blockquote><p><code>iOS</code> 的事件可以分为三种</p></blockquote><ul><li><code>Touch Events(触摸事件)</code></li><li><code>Motion Events(运动事件，比如重力感应和摇一摇等)</code></li><li><code>Remote Events(远程事件，比如用耳机上得按键来控制手机)</code></li></ul><blockquote><p>下面主要讲解 <code>Touch Events(触摸事件)</code> <code>Touch Events</code>事件的整个过程可以分为 <code>传递</code>和<code>响应</code> 2 个阶段，</p><ul><li>传递： 是当我们触摸屏幕时，为我们找出最适合的 <code>View</code>，</li><li>响应： 当我们找出最适合的 <code>View</code> 后，此时只是找到了最合适的 <code>View</code>，但未必 此 <code>View</code> 可以响应此事件，所以需要继续找出能响应此事件的 <code>View</code>。</li></ul></blockquote><h3 id="传递过程"><a href="#传递过程" class="headerlink" title="传递过程"></a>传递过程</h3><blockquote><p>每当手指接触屏幕，操作系统会把事件传递给当前的 <code>App</code>， 在 <code>UIApplication</code>接收到手指的事件之后，就会去调用`UIWindow的hitTest:withEvent:，看看当前点击的点是不是在window内，如果是则继续依次调用其 subView的hitTest:withEvent:方法，直到找到最后需要的view。调用结束并且hit-test view确定之后，便可以确定最合适的 View。</p></blockquote><ul><li>引用几张图来说明</li></ul><p><img src="https://zhoon.github.io/img/artical/ios_event/iosevent_3.png" alt=""></p><p><img src="https://zhoon.github.io/img/artical/ios_event/iosevent_4.png" alt=""></p><p><img src="https://zhoon.github.io/img/artical/ios_event/iosevent_5.png" alt=""></p><ul><li>图片表示的内容可用下面的话描述<a href="https://zhoon.github.io/ios/2015/04/12/ios-event.html" target="_blank" rel="noopener">来自这里</a></li></ul><blockquote><p>递归是向界面的根节点UIWindow发送hitTest:withEvent:消息开始的，从这个消息返回的是一个UIView，也就是手指当前位置最前面的那个 hittest view。 当向UIWindow发送hitTest:withEvent:消息时，hitTest:withEvent:里面所做的事，就是判断当前的点击位置是否在window里面，如果在则遍历window的subview然后依次对subview发送hitTest:withEvent:消息(注意这里给subview发送消息是根据当前subview的index顺序，index越大就越先被访问)。如果当前的point没有在view上面，那么这个view的subview也就不会被遍历了。当事件遍历到了view B.1，发现point在view B.1里面，并且view B.1没有subview，那么他就是我们要找的hittest view了，找到之后就会一路返回直到根节点，而view B之后的view A也不会被遍历了。</p></blockquote><ul><li>下面是 <code>- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event</code> 方法的内部实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> - (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event</span><br><span class="line">&#123;</span><br><span class="line">    if (self.hidden || !self.userInteractionEnabled || self.alpha &lt; 0.01 || ![self pointInside:point withEvent:event] || ![self _isAnimatedUserInteractionEnabled]) &#123;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (UIView *subview in [self.subviews reverseObjectEnumerator]) &#123;</span><br><span class="line">            UIView *hitView = [subview hitTest:[subview convertPoint:point fromView:self] withEvent:event];</span><br><span class="line">            if (hitView) &#123;</span><br><span class="line">                return hitView;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return self;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/BigZaphod/Chameleon/blob/master/UIKit/Classes/UIView.m" target="_blank" rel="noopener">上面的代码来自这里</a></p></blockquote><h3 id="响应过程"><a href="#响应过程" class="headerlink" title="响应过程"></a>响应过程</h3><ul><li>个人对响应过程的理解如下： </li></ul><blockquote><p>当我们知道最合适的 View 后，事件会 由上向下【子view -&gt; 父view，控制器view -&gt; 控制器】来找出合适响应事件的 View，来响应相关的事件。如果当前的 View 有添加手势，那么直接响应相应的事件，不会继续向下寻找了，如果没有手势事件，那么会看其是否实现了如下的方法：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;</span><br><span class="line">- (<span class="keyword">void</span>)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;</span><br><span class="line">- (<span class="keyword">void</span>)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;</span><br><span class="line">- (<span class="keyword">void</span>)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;</span><br></pre></td></tr></table></figure><hr><p>如果有实现那么就由此 View 响应，如果没有实现，那么就会传递给他的下一个响应者【子view -&gt; 父view，控制器view -&gt; 控制器】， 这里我们可以做一个简单的验证，在默认情况下 UIView 是不响应事件的，UIControl 就算没有添加手势一样的会由他来响应， 这里可以使用 runtime查看 UIView 和 UIControl 的方法列表， 或 查看 <a href="https://github.com/BigZaphod/Chameleon/blob/master/UIKit/Classes/UIView.m" target="_blank" rel="noopener">UIKit 源码</a> 可知， UIView 没有实现如上的 <code>touchesBegan</code>方法，而 <code>UIControl</code> 是实现了如上的相关方法，所以验证了刚才的 UIView 不响应，和 UIControl 的响应。一旦找到最合适响应的View就结束, 在执行响应的绑定的事件，如果没有就抛弃此事件。</p><p>我的验证</p><ul><li>首先处理添加了手势时，其便可以处理事件。</li><li>我们创建一个view A 在 A 中添加一个 view B, 如果我们给 A 加了手势，B没有加手势，</li><li>我们在点击 B 时，会响应 A 的事件，非常正常的情况，那么它是怎么判断 B 是否可以处理的呢？</li><li>我们现在给 B 加一个手势，那么同样的操作时会触发 B 的手势，现在我们 给 B 增加一个方法，</li></ul><pre><code class="c">@implementation BMSonView- (NSArray&lt;UIGestureRecognizer *&gt; *)gestureRecognizers {    NSLog(@<span class="string">"%@"</span>, self);    <span class="keyword">return</span> @[];}</code></pre><blockquote><p>手势返回 @[]，此时点击 B 只会触发 A 的事件，由此可以说明在判断 view 是否可以处理事件实现是判断  gestureRecognizers  即是否添加了手势，上面提到了还有判断如下的方法是否实现了,默认情况下 UIView 是没有实现如下的方法的，使用在没有添加手势时他不响应事件。</p></blockquote><pre><code class="c">- (<span class="keyword">void</span>)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;- (<span class="keyword">void</span>)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;- (<span class="keyword">void</span>)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;- (<span class="keyword">void</span>)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;</code></pre><p>如果我们手动实现了如上的方法时，就算没有给  B 添加手势，点击 B 时， 事件不会响应 A 的方法，会到上面的方法中。从 UIControl 的源码便可清除看到。</p><p>所以个人理解：</p><ul><li>事件在传递时和上面的 hit 方法有关，一层层向上传递，【窗口—&gt; view】由其相应的 view 中具体的实现来确定谁才是是最合适响应的view</li><li>在响应时，又上向下找出第一个能处理的view来处理事件，[view —&gt; 窗口]，在寻找刚过程中 会判断是否增加了手势 和是否实现了如上的 触摸方法。</li><li>至于 UIControl Button 的特殊事件相应，个人认为是在其m文件中实现了上面的4个方法，在这4个方法中做了相关的处理，这里可以从 UIControl 代码中在知道一些内容。</li><li>所以如果想自己实现 UIControl Button ，首先要想办法处理好上面的4个方法。</li></ul><ul><li>图如下<br><img src="https://zhoon.github.io/img/artical/ios_event/iosevent_2.png" alt=""></li></ul><h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><ul><li><p>iOS 中 View 的事件到底是怎么传递和响应的？</p><blockquote><p>如上所描。</p></blockquote></li><li><p>为什么 父View 关闭了事件响应时，子View 就无法响应事件？</p><blockquote><p>因为在事件传递的时，先到父view，当父view无法响应事，直接就跳过了遍历其子view，故只要父类关闭了事件，子 view 就已经没有机会响应事件了。</p></blockquote></li></ul><ul><li><p>如何扩大 Button 的点击范围？</p><blockquote><p>扩大点击范围，无非就是想本来没有点击 btn 但想让 btn 响应事件，那么可以在 hitTest 方法中做适当的操作，当满足xxx条件时，强行返回 btn 来达到最佳点击范围的效果，相关的实现可以自行 Google ，有一些较优雅而简洁的方式。</p></blockquote></li><li><p>如何让 父View 和 子View 同时响应同一事件？</p><blockquote><p>父View 和 子View同时响应同一事件，默认当点击子view时，如果ziview可以处理事件，那么其他父view 是不会响应的，但是在 父view 传到 子view 时我们在 hitTest 方法中是清楚知道的，使用可以在这里做相关的操作便实现了子view 和父view 同时响应事件的效果。</p></blockquote></li><li><p>为什么子View 关闭了事件，但其 父View 开启事件的情况下，点击 子View 时，父View 可以响应事件？</p><blockquote><p>子view关闭了事件，事件的传递是 父view 到子view，在 父view时，父view可以响应，那么会继续访问其 子view是否可以响应，如果此时子view不可以响应，那么他会直接返回 父view，所以 子View 关闭了事件 父View  正常执行事件是必然的。</p></blockquote></li></ul><ul><li><p>为什么 子View 是 UIView时，如果没有添加手势，点击子 View时，会由其父View来响应，而 子View 是 UIControl 时，子View 没有添加手势，一样不会由 父View 来响应</p><blockquote><p>这个问题可以见上面的寻找可以响应的 view 来解决，UIControl 实现了如上的 4 大方法，而 UIView 没有实现。</p></blockquote></li><li><p>这里其实还有许多内容待挖掘，比如：scrollview 的事件响应等。</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://smnh.me/hit-testing-in-ios/" target="_blank" rel="noopener">http://smnh.me/hit-testing-in-ios/</a></li><li><a href="https://zhoon.github.io/ios/2015/04/12/ios-event.html" target="_blank" rel="noopener">https://zhoon.github.io/ios/2015/04/12/ios-event.html</a></li><li><a href="http://southpeak.github.io/blog/2015/03/07/uiresponder/" target="_blank" rel="noopener">http://southpeak.github.io/blog/2015/03/07/uiresponder/</a></li><li><a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIScrollView_Class/index.html#//apple_ref/doc/uid/TP40006922" target="_blank" rel="noopener">https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIScrollView_Class/index.html#//apple_ref/doc/uid/TP40006922</a></li><li><a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html" target="_blank" rel="noopener">https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html</a></li><li><a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/GestureRecognizer_basics/GestureRecognizer_basics.html#//apple_ref/doc/uid/TP40009541-CH2-SW2" target="_blank" rel="noopener">https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/GestureRecognizer_basics/GestureRecognizer_basics.html#//apple_ref/doc/uid/TP40009541-CH2-SW2</a></li><li><a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/GestureRecognizer_basics/GestureRecognizer_basics.html#//apple_ref/doc/uid/TP40009541-CH2-SW2" target="_blank" rel="noopener">https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/GestureRecognizer_basics/GestureRecognizer_basics.html#//apple_ref/doc/uid/TP40009541-CH2-SW2</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iOS&lt;/code&gt; 中 &lt;code&gt;View&lt;/code&gt; 的事件到底是怎么&lt;code&gt;传递&lt;/code&gt;和&lt;code&gt;响应&lt;/code&gt;的？&lt;/li&gt;
&lt;li&gt;为什么 &lt;code&gt;父View&lt;/code&gt; 关闭了事件响应时，&lt;code&gt;子View&lt;/code&gt; 就无法响应事件？ 底层原理？&lt;/li&gt;
&lt;li&gt;如何扩大 &lt;code&gt;Button&lt;/code&gt; 的点击范围 ？&lt;/li&gt;
&lt;li&gt;如何让 &lt;code&gt;父View&lt;/code&gt; 和 &lt;code&gt;子View&lt;/code&gt; 同时响应同一事件？默认情况下只会响应 &lt;code&gt;子View&lt;/code&gt; 的事件回调。&lt;/li&gt;
&lt;li&gt;为什么 &lt;code&gt;子View&lt;/code&gt; 关闭了事件，但其 &lt;code&gt;父View&lt;/code&gt; 开启事件的情况下，点击 &lt;code&gt;子View&lt;/code&gt; 时，&lt;code&gt;父View&lt;/code&gt; 可以正常响应事件？&lt;/li&gt;
&lt;li&gt;为什么 子View 是 UIView时，如果没有添加手势，点击子 View时，会由其父View来响应，而 子View 是 UIControl 时，子View 没有添加手势，一样不会由 父View 来响应&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="00-技术-iOS" scheme="http://liangdahong.com/categories/00-%E6%8A%80%E6%9C%AF-iOS/"/>
    
    
      <category term="iOS" scheme="http://liangdahong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>转 - 优化 iOS 程序性能的 24 个方法</title>
    <link href="http://liangdahong.com/2018/05/23/00-%E6%8A%80%E6%9C%AF-iOS/%E8%BD%AC-%E4%BC%98%E5%8C%96-iOS-%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E7%9A%84-24-%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    <id>http://liangdahong.com/2018/05/23/00-技术-iOS/转-优化-iOS-程序性能的-24-个方法/</id>
    <published>2018-05-22T16:33:30.000Z</published>
    <updated>2019-10-18T23:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用ARC管理内存"><a href="#用ARC管理内存" class="headerlink" title="用ARC管理内存"></a>用ARC管理内存</h2><ul><li><a href="http://www.codeceo.com/article/optimize-ios-program-performance.html" target="_blank" rel="noopener">转自 http://www.codeceo.com/article/optimize-ios-program-performance.html</a></li></ul><a id="more"></a><blockquote><p>ARC(Automatic ReferenceCounting, 自动引用计数)和iOS5一起发布，它避免了最常见的也就是经常是由于我们忘记释放内存所造成的内存泄露。它自动为你管理retain和release的过程，所以你就不必去手动干预了。忘掉代码段结尾的release简直像记得吃饭一样简单。而ARC会自动在底层为你做这些工作。除了帮你避免内存泄露，ARC还可以帮你提高性能，它能保证释放掉不再需要的对象的内存。</p></blockquote><blockquote><p>现在所有的iOS程序都用ARC了，这条可以忽略。</p></blockquote><h2 id="在正确的地方使用-reuseIdentifier"><a href="#在正确的地方使用-reuseIdentifier" class="headerlink" title="在正确的地方使用 reuseIdentifier"></a>在正确的地方使用 reuseIdentifier</h2><blockquote><p>一个开发中常见的错误就是没有给UITableViewCells， UICollectionViewCells，甚至是UITableViewHeaderFooterViews设置正确的reuseIdentifier。</p></blockquote><blockquote><p>为了性能最优化，table view用tableView:cellForRowAtIndexPath:为rows分配cells的时候，它的数据应该重用自UITableViewCell。一个table view维持一个队列的数据可重用的UITableViewCell对象。</p></blockquote><blockquote><p>不使用reuseIdentifier的话，每显示一行table view就不得不设置全新的cell。这对性能的影响可是相当大的，尤其会使app的滚动体验大打折扣。</p></blockquote><blockquote><p>自iOS6起，除了UICollectionView的cells和补充views，你也应该在header和footer views中使用reuseIdentifiers。</p></blockquote><blockquote><p>想要使用reuseIdentifiers的话，在一个table view中添加一个新的cell时在data source object中添加这个方法：</p></blockquote><pre><code>staticNSString *CellIdentifier = @&quot;Cell&quot;;  UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath];</code></pre><blockquote><p>这个方法把那些已经存在的cell从队列中排除，或者在必要时使用先前注册的nib或者class创造新的cell。如果没有可重用的cell，你也没有注册一个class或者nib的话，这个方法返回nil。</p></blockquote><h2 id="尽量把views设置为透明"><a href="#尽量把views设置为透明" class="headerlink" title="尽量把views设置为透明"></a>尽量把views设置为透明</h2><blockquote><p>如果你有透明的Views你应该设置它们的opaque属性为YES。</p></blockquote><blockquote><p>原因是这会使系统用一个最优的方式渲染这些views。这个简单的属性在IB或者代码里都可以设定。</p></blockquote><blockquote><p>Apple的文档对于为图片设置透明属性的描述是：</p></blockquote><blockquote><p>(opaque)这个属性给渲染系统提供了一个如何处理这个view的提示。如果设为YES，渲染系统就认为这个view是完全不透明的，这使得渲染系统优化一些渲染过程和提高性能。如果设置为NO，渲染系统正常地和其它内容组成这个View。默认值是YES。</p></blockquote><blockquote><p>在相对比较静止的画面中，设置这个属性不会有太大影响。然而当这个view嵌在scroll view里边，或者是一个复杂动画的一部分，不设置这个属性的话会在很大程度上影响app的性能。</p></blockquote><blockquote><p>你可以在模拟器中用Debug\Color Blended Layers选项来发现哪些view没有被设置为opaque。目标就是，能设为opaque的就全设为opaque!</p></blockquote><blockquote><p>这里有一点需要注意，只要是有中文字符的Label，哪怕你设置成不透明，模拟器中这个Label依然会变红，这个猜测是字符绘制的时候出的问题，这个目前没找到好的解决方法。</p></blockquote><h2 id="避免过于庞大的XIB"><a href="#避免过于庞大的XIB" class="headerlink" title="避免过于庞大的XIB"></a>避免过于庞大的XIB</h2><blockquote><p>iOS5中加入的Storyboards(分镜)正在快速取代XIB。然而XIB在一些场景中仍然很有用。比如你的app需要适应iOS5之前的设备，或者你有一个自定义的可重用的view,你就不可避免地要用到他们。</p></blockquote><blockquote><p>如果你不得不XIB的话，使他们尽量简单。尝试为每个Controller配置一个单独的XIB，尽可能把一个View Controller的view层次结构分散到单独的XIB中去。</p></blockquote><blockquote><p>需要注意的是，当你加载一个XIB的时候所有内容都被放在了内存里，包括任何图片。如果有一个不会即刻用到的view，你这就是在浪费宝贵的内存资源了。Storyboards就是另一码事儿了，storyboard仅在需要时实例化一个view controller.</p></blockquote><blockquote><p>当家在XIB是，所有图片都被chache，如果你在做OS X开发的话，声音文件也是。Apple在相关文档中的记述是：</p></blockquote><blockquote><p>当你加载一个引用了图片或者声音资源的nib时，nib加载代码会把图片和声音文件写进内存。在OS X中，图片和声音资源被缓存在named cache中以便将来用到时获取。在iOS中，仅图片资源会被存进named caches。取决于你所在的平台，使用NSImage 或UIImage的imageNamed:方法来获取图片资源。</p></blockquote><blockquote><p>这个问题我深有体会，用xib写的界面加载速度比直接用代码写的要慢好多。</p></blockquote><h2 id="不要阻塞主线程"><a href="#不要阻塞主线程" class="headerlink" title="不要阻塞主线程"></a>不要阻塞主线程</h2><blockquote><p>永远不要使主线程承担过多。因为UIKit在主线程上做所有工作，渲染，管理触摸反应，回应输入等都需要在它上面完成。</p></blockquote><blockquote><p>一直使用主线程的风险就是如果你的代码真的block了主线程，你的app会失去反应。</p></blockquote><blockquote><p>大部分阻碍主进程的情形是你的app在做一些牵涉到读写外部资源的I/O操作，比如存储或者网络。</p></blockquote><blockquote><p>你可以使用NSURLConnection异步地做网络操作:</p></blockquote><pre><code>+ (void)sendAsynchronousRequest:(NSURLRequest *)request queue:(NSOperationQueue*)queue completionHandler:(void (^)(NSURLResponse*, NSData*, NSError*))handler</code></pre><blockquote><p>或者使用像AFNetworking这样的框架来异步地做这些操作。</p></blockquote><blockquote><p>如果你需要做其它类型的需要耗费巨大资源的操作(比如时间敏感的计算或者存储读写)那就用 Grand Central Dispatch，或者&gt;NSOperation和 NSOperationQueues.</p></blockquote><blockquote><p>下面代码是使用GCD的模板</p></blockquote><pre><code>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{      // switch to a background thread and perform your expensive operation      dispatch_async(dispatch_get_main_queue(), ^{          // switch back to the main thread to update your UI      });  });</code></pre><blockquote><p>发现代码中有一个嵌套的dispatch_async吗？这是因为任何UIKit相关的代码需要在主线程上进行。</p></blockquote><h2 id="在Image-Views中调整图片大小"><a href="#在Image-Views中调整图片大小" class="headerlink" title="在Image Views中调整图片大小"></a>在Image Views中调整图片大小</h2><blockquote><p>如果要在UIImageView中显示一个来自bundle的图片，你应保证图片的大小和UIImageView的大小相同。在运行中缩放图片是很耗费资源的，特别是UIImageView嵌套在UIScrollView中的情况下。</p></blockquote><blockquote><p>如果图片是从远端服务加载的你不能控制图片大小，比如在下载前调整到合适大小的话，你可以在下载完成后，最好是用background &gt;thread，缩放一次，然后在UIImageView中使用缩放后的图片。</p></blockquote><h2 id="选择正确的Collection"><a href="#选择正确的Collection" class="headerlink" title="选择正确的Collection"></a>选择正确的Collection</h2><blockquote><p>学会选择对业务场景最合适的类或者对象是写出能效高的代码的基础。当处理collections时这句话尤其正确。</p></blockquote><blockquote><p>一些常见collection的总结：</p></blockquote><blockquote><p>Arrays: 有序的一组值。使用index来lookup很快，使用value lookup很慢，插入/删除很慢。<br>Dictionaries: 存储键值对。用键来查找比较快。<br>Sets: 无序的一组值。用值来查找很快，插入/删除很快。因为Set用到了哈希，所以插入删除查找速度比Array快很多</p></blockquote><h2 id="打开gzip压缩"><a href="#打开gzip压缩" class="headerlink" title="打开gzip压缩"></a>打开gzip压缩</h2><blockquote><p>大量app依赖于远端资源和第三方API，你可能会开发一个需要从远端下载XML, JSON, HTML或者其它格式的app。</p></blockquote><blockquote><p>问题是我们的目标是移动设备，因此你就不能指望网络状况有多好。一个用户现在还在edge网络，下一分钟可能就切换到了3G。不论什么场景，你肯定不想让你的用户等太长时间。</p></blockquote><blockquote><p>减小文档的一个方式就是在服务端和你的app中打开gzip。这对于文字这种能有更高压缩率的数据来说会有更显著的效用。</p></blockquote><blockquote><p>好消息是，iOS已经在NSURLConnection中默认支持了gzip压缩，当然AFNetworking这些基于它的框架亦然。像Google App Engine这些云服务提供者也已经支持了压缩输出。</p></blockquote><h2 id="重用和延迟加载-lazy-load-Views"><a href="#重用和延迟加载-lazy-load-Views" class="headerlink" title="重用和延迟加载(lazy load) Views"></a>重用和延迟加载(lazy load) Views</h2><blockquote><p>更多的view意味着更多的渲染，也就是更多的CPU和内存消耗，对于那种嵌套了很多view在UIScrollView里边的app更是如此。</p></blockquote><blockquote><p>这里我们用到的技巧就是模仿UITableView和UICollectionView的操作:不要一次创建所有的subview，而是当需要时才创建，当它们完成了使命，把他们放进一个可重用的队列中。</p></blockquote><blockquote><p>这样的话你就只需要在滚动发生时创建你的views，避免了不划算的内存分配。</p></blockquote><blockquote><p>创建views的能效问题也适用于你app的其它方面。想象一下一个用户点击一个按钮的时候需要呈现一个view的场景。有两种实现方法：</p></blockquote><ol><li><p>创建并隐藏这个view当这个screen加载的时候，当需要时显示它；</p></li><li><p>当需要时才创建并展示。</p></li></ol><blockquote><p>每个方案都有其优缺点。用第一种方案的话因为你需要一开始就创建一个view并保持它直到不再使用，这就会更加消耗内存。然而这也会使你的app操作更敏感因为当用户点击按钮的时候它只需要改变一下这个view的可见性。</p></blockquote><blockquote><p>第二种方案则相反-消耗更少内存，但是会在点击按钮的时候比第一种稍显卡顿。</p></blockquote><h2 id="Cache-Cache-还是Cache-注意你的缓存"><a href="#Cache-Cache-还是Cache-注意你的缓存" class="headerlink" title="Cache, Cache, 还是Cache!注意你的缓存"></a>Cache, Cache, 还是Cache!注意你的缓存</h2><blockquote><p>一个极好的原则就是，缓存所需要的，也就是那些不大可能改变但是需要经常读取的东西。</p></blockquote><blockquote><p>我们能缓存些什么呢？一些选项是，远端服务器的响应，图片，甚至计算结果，比如UITableView的行高。</p></blockquote><blockquote><p>NSURLConnection默认会缓存资源在内存或者存储中根据它所加载的HTTP Headers。你甚至可以手动创建一个NSURLRequest然后使它只加载缓存的值。</p></blockquote><blockquote><p>下面是一个可用的代码段，你可以可以用它去为一个基本不会改变的图片创建一个NSURLRequest并缓存它：</p></blockquote><pre><code>+ (NSMutableURLRequest *)imageRequestWithURL:(NSURL *)url {      NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];      request.cachePolicy = NSURLRequestReturnCacheDataElseLoad;// this will make sure the request always returns the cached image      request.HTTPShouldHandleCookies = NO;      request.HTTPShouldUsePipelining = YES;      [request addValue:@&quot;image/*&quot;forHTTPHeaderField:@&quot;Accept&quot;];      return request;  }</code></pre><blockquote><p>注意你可以通过 NSURLConnection 获取一个URL request， AFNetworking也一样的。这样你就不必为采用这条tip而改变所有的networking代码了。</p></blockquote><blockquote><p>如果你需要缓存其它不是HTTP Request的东西，你可以用NSCache。</p></blockquote><blockquote><p>NSCache和NSDictionary类似，不同的是系统回收内存的时候它会自动删掉它的内容。</p></blockquote><h2 id="权衡渲染方法"><a href="#权衡渲染方法" class="headerlink" title="权衡渲染方法"></a>权衡渲染方法</h2><blockquote><p>在iOS中可以有很多方法做出漂亮的按钮。你可以用整幅的图片，可调大小的图片，或者可以用CALayer， CoreGraphics甚至OpenGL来画它们。当然每个不同的解决方法都有不同的复杂程度和相应的性能。</p></blockquote><blockquote><p>简单来说，就是用事先渲染好的图片更快一些，因为如此一来iOS就免去了创建一个图片再画东西上去然后显示在屏幕上的程序。问题是你需要把所有你需要用到的图片放到app的bundle里面，这样就增加了体积–这就是使用可变大小的图片更好的地方了:你可以省去一些不必要的空间，也不需要再为不同的元素(比如按钮)来做不同的图。</p></blockquote><blockquote><p>然而，使用图片也意味着你失去了使用代码调整图片的机动性，你需要一遍又一遍不断地重做他们，这样就很浪费时间了，而且你如果要做一个动画效果，虽然每幅图只是一些细节的变化你就需要很多的图片造成bundle大小的不断增大。</p></blockquote><blockquote><p>总得来说，你需要权衡一下利弊，到底是要性能能还是要bundle保持合适的大小。</p></blockquote><h2 id="处理内存警告"><a href="#处理内存警告" class="headerlink" title="处理内存警告"></a>处理内存警告</h2><blockquote><p>一旦系统内存过低，iOS会通知所有运行中app。在官方文档中是这样记述:</p></blockquote><blockquote><p>如果你的app收到了内存警告，它就需要尽可能释放更多的内存。最佳方式是移除对缓存，图片object和其他一些可以重创建的objects的strong references.</p></blockquote><blockquote><p>幸运的是，UIKit提供了几种收集低内存警告的方法:</p></blockquote><blockquote><p>在app delegate中使用applicationDidReceiveMemoryWarning:的方法<br>在你的自定义UIViewController的子类(subclass)中覆盖didReceiveMemoryWarning<br>注册并接收 UIApplicationDidReceiveMemoryWarningNotification的通知<br>一旦收到这类通知，你就需要释放任何不必要的内存使用。</p></blockquote><blockquote><p>例如，UIViewController的默认行为是移除一些不可见的view，它的一些子类则可以补充这个方法，删掉一些额外的数据结构。一个有图片缓存的app可以移除不在屏幕上显示的图片。</p></blockquote><blockquote><p>这样对内存警报的处理是很必要的，若不重视，你的app就可能被系统杀掉。</p></blockquote><blockquote><p>然而，当你一定要确认你所选择的object是可以被重现创建的来释放内存。一定要在开发中用模拟器中的内存提醒模拟去测试一下。</p></blockquote><blockquote><p>当然，现在iOS设备运行内存越来越大，这一点很难出现了。</p></blockquote><h2 id="重用大开销对象"><a href="#重用大开销对象" class="headerlink" title="重用大开销对象"></a>重用大开销对象</h2><blockquote><p>一些objects的初始化很慢，比如NSDateFormatter和NSCalendar。然而，你又不可避免地需要使用它们，比如从JSON或者XML中解析数据。</p></blockquote><blockquote><p>想要避免使用这个对象的瓶颈你就需要重用他们，可以通过添加属性到你的class里或者创建静态变量来实现。</p></blockquote><blockquote><p>注意如果你要选择第二种方法，对象会在你的app运行时一直存在于内存中，和单例(singleton)很相似。</p></blockquote><blockquote><p>下面的代码说明了使用一个属性来延迟加载一个date formatter. 第一次调用时它会创建一个新的实例，以后的调用则将返回已经创建的实例：</p></blockquote><pre><code>// in your .h or inside a class extension  @property (nonatomic, strong) NSDateFormatter *formatter;  // inside the implementation (.m)  // When you need, just use self.formatter  - (NSDateFormatter *)formatter {      if(!_formatter) {          _formatter = [[NSDateFormatter alloc] init];          _formatter.dateFormat = @&quot;EEE MMM dd HH:mm:ss Z yyyy&quot;;// twitter date format      }      return _formatter;  }</code></pre><blockquote><p>还需要注意的是，其实设置一个NSDateFormatter的速度差不多是和创建新的一样慢的！所以如果你的app需要经常进行日期格式处理的话，你会从这个方法中得到不小的性能提升。</p></blockquote><h2 id="使用Sprite-Sheets"><a href="#使用Sprite-Sheets" class="headerlink" title="使用Sprite Sheets"></a>使用Sprite Sheets</h2><blockquote><p>Sprite sheet可以让渲染速度加快，甚至比标准的屏幕渲染方法节省内存。</p></blockquote><h2 id="避免反复处理数据"><a href="#避免反复处理数据" class="headerlink" title="避免反复处理数据"></a>避免反复处理数据</h2><blockquote><p>许多应用需要从服务器加载功能所需的常为JSON或者XML格式的数据。在服务器端和客户端使用相同的数据结构很重要。在内存中操作数据使它们满足你的数据结构是开销很大的。</p></blockquote><blockquote><p>比如你需要数据来展示一个table view,最好直接从服务器取array结构的数据以避免额外的中间数据结构改变。</p></blockquote><blockquote><p>类似的，如果需要从特定key中取数据，那么就使用键值对的dictionary。</p></blockquote><blockquote><p>这一点在处理大量数据的时候极为重要，用空间换时间的方法也许是极好的。</p></blockquote><h2 id="选择正确的数据格式"><a href="#选择正确的数据格式" class="headerlink" title="选择正确的数据格式"></a>选择正确的数据格式</h2><blockquote><p>从app和网络服务间传输数据有很多方案，最常见的就是JSON和XML。你需要选择对你的app来说最合适的一个。</p></blockquote><blockquote><p>解析JSON会比XML更快一些，JSON也通常更小更便于传输。从iOS5起有了官方内建的JSON deserialization就更加方便使用了。</p></blockquote><blockquote><p>但是XML也有XML的好处，比如使用SAX来解析XML就像解析本地文件一样，你不需像解析json一样等到整个文档下载完成才开始解析。当&gt;你处理很大的数据的时候就会极大地减低内存消耗和增加性能。</p></blockquote><blockquote><p>现在基本上都是JSON了。</p></blockquote><h2 id="正确设定背景图片"><a href="#正确设定背景图片" class="headerlink" title="正确设定背景图片"></a>正确设定背景图片</h2><blockquote><p>在View里放背景图片就像很多其它iOS编程一样有很多方法:</p></blockquote><blockquote><p>使用UIColor的 colorWithPatternImage来设置背景色；</p></blockquote><blockquote><p>在view中添加一个UIImageView作为一个子View。</p></blockquote><blockquote><p>如果你使用全画幅的背景图，你就必须使用UIImageView因为UIColor的colorWithPatternImage是用来创建小的重复的图片作为背&gt;景的。这种情形下使用UIImageView可以节约不少的内存：</p></blockquote><pre><code>// You could also achieve the same result in Interface BuilderUIImageView *backgroundView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@&quot;background&quot;]];[self.view addSubview:backgroundView];</code></pre><blockquote><p>如果你用小图平铺来创建背景，你就需要用UIColor的colorWithPatternImage来做了，它会更快地渲染也不会花费很多内存：</p></blockquote><pre><code>self.view.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@&quot;background&quot;]];</code></pre><h2 id="减少使用Web特性"><a href="#减少使用Web特性" class="headerlink" title="减少使用Web特性"></a>减少使用Web特性</h2><blockquote><p>UIWebView很有用，用它来展示网页内容或者创建UIKit很难做到的动画效果是很简单的一件事。</p></blockquote><blockquote><p>但是你可能有注意到UIWebView并不像驱动Safari的那么快。这是由于以JIT compilation为特色的Webkit的Nitro Engine的限制。</p></blockquote><blockquote><p>所以想要更高的性能你就要调整下你的HTML了。第一件要做的事就是尽可能移除不必要的JavaScript，避免使用过大的框架。能只用原生js就更好了。</p></blockquote><blockquote><p>另外，尽可能异步加载例如用户行为统计script这种不影响页面表达的javascript。</p></blockquote><blockquote><p>最后，永远要注意你使用的图片，保证图片的符合你使用的大小。使用Sprite sheet提高加载速度和节约内存。</p></blockquote><h2 id="设定Shadow-Path"><a href="#设定Shadow-Path" class="headerlink" title="设定Shadow Path"></a>设定Shadow Path</h2><blockquote><p>如何在一个View或者一个layer上加一个shadow呢，QuartzCore框架是很多开发者的选择：</p></blockquote><pre><code>UIView *view = [[UIView alloc] init];  view.layer.shadowOffset = CGSizeMake(-1.0f, 1.0f);  view.layer.shadowRadius = 5.0f;  view.layer.shadowOpacity = 0.6;</code></pre><blockquote><p>看起来很简单，对吧。可是，坏消息是使用这个方法也有它的问题… Core Animation不得不先在后台得出你的图形并加好阴影然后才渲染，这开销是很大的。</p></blockquote><blockquote><p>使用shadowPath的话就避免了这个问题：</p></blockquote><blockquote><p>view.layer.shadowPath = [[UIBezierPath bezierPathWithRect:view.bounds] CGPath];<br>使用shadow path的话iOS就不必每次都计算如何渲染，它使用一个预先计算好的路径。但问题是自己计算path的话可能在某些View中比较困难，且每当view的frame变化的时候你都需要去update shadow path.</p></blockquote><blockquote><p>我更喜欢用CALayer自己画一个阴影出来，这样可以设置阴影光栅化，节省大量CPU的运算，坏处就是比较消耗内存。因为如果给view的&gt;layer设置光栅化的话整个View都会变得模糊。</p></blockquote><h2 id="优化Table-View"><a href="#优化Table-View" class="headerlink" title="优化Table View"></a>优化Table View</h2><blockquote><p>Table view需要有很好的滚动性能，不然用户会在滚动过程中发现动画的瑕疵。</p></blockquote><blockquote><p>为了保证table view平滑滚动，确保你采取了以下的措施:</p></blockquote><blockquote><p>正确使用reuseIdentifier来重用cells<br>    尽量使所有的view opaque，包括cell自身<br>    避免渐变，图片缩放，后台选人<br>    缓存行高<br>    如果cell内现实的内容来自web，使用异步加载，缓存请求结果<br>    使用shadowPath来画阴影<br>    减少subviews的数量<br>    尽量不使用cellForRowAtIndexPath:，如果你需要用到它，只用一次然后缓存结果<br>    使用正确的数据结构来存储数据<br>    使用rowHeight, sectionFooterHeight和 sectionHeaderHeight来设定固定的高，不要请求delegate</p></blockquote><h2 id="选择正确的数据存储选项"><a href="#选择正确的数据存储选项" class="headerlink" title="选择正确的数据存储选项"></a>选择正确的数据存储选项</h2><pre><code>当存储大块数据时你会怎么做？你有很多选择，比如：使用NSUerDefaults使用XML, JSON, 或者 plist使用NSCoding存档使用类似SQLite的本地SQL数据库使用 Core DataNSUserDefaults的问题是什么？虽然它很nice也很便捷，但是它只适用于小数据，比如一些简单的布尔型的设置选项，再大点你就要考虑其它方式了XML这种结构化档案呢？总体来说，你需要读取整个文件到内存里去解析，这样是很不经济的。使用SAX又是一个很麻烦的事情。NSCoding？不幸的是，它也需要读写文件，所以也有以上问题。在这种应用场景下，使用SQLite 或者 Core Data比较好。使用这些技术你用特定的查询语句就能只加载你需要的对象。在性能层面来讲，SQLite和Core Data是很相似的。他们的不同在于具体使用方法。Core Data代表一个对象的graph model，但SQLite就是一个DBMS。Apple在一般情况下建议使用Core Data，但是如果你有理由不使用它，那么就去使用更加底层的SQLite吧。如果你使用SQLite，你可以用FMDB(https://GitHub.com/ccgus/fmdb)这个库来简化SQLite的操作，这样你就不用花很多经历了解SQLite的C API了。</code></pre><h2 id="使用Autorelease-Pool"><a href="#使用Autorelease-Pool" class="headerlink" title="使用Autorelease Pool"></a>使用Autorelease Pool</h2><blockquote><p>NSAutoreleasePool负责释放block中的autoreleased objects。一般情况下它会自动被UIKit调用。但是有些状况下你也需要手动去创建它。</p></blockquote><blockquote><p>假如你创建很多临时对象，你会发现内存一直在减少直到这些对象被release的时候。这是因为只有当UIKit用光了autorelease pool的时候memory才会被释放。好消息是你可以在你自己的@autoreleasepool里创建临时的对象来避免这个行为：</p></blockquote><pre><code>NSArray *urls = &lt;# An array of file URLs #&gt;;     for(NSURL *url in urls) {      @autoreleasepool {         NSError *error;         NSString *fileContents = [NSString stringWithContentsOfURL:url encoding:NSUTF8StringEncoding error:&amp;error];         /* Process the string, creating and autoreleasing more objects. */       }     }</code></pre><blockquote><p>这段代码在每次遍历后释放所有autorelease对象</p></blockquote><h2 id="选择是否缓存图片"><a href="#选择是否缓存图片" class="headerlink" title="选择是否缓存图片"></a>选择是否缓存图片</h2><blockquote><p>常见的从bundle中加载图片的方式有两种，一个是用imageNamed，二是用imageWithContentsOfFile，第一种比较常见一点。</p></blockquote><blockquote><p>既然有两种类似的方法来实现相同的目的，那么他们之间的差别是什么呢？</p></blockquote><blockquote><p>imageNamed的优点是当加载时会缓存图片。imageNamed的文档中这么说:这个方法用一个指定的名字在系统缓存中查找并返回一个图片对象如果它存在的话。如果缓存中没有找到相应的图片，这个方法从指定的文档中加载然后缓存并返回这个对象。</p></blockquote><blockquote><p>相反的，imageWithContentsOfFile仅加载图片。</p><p>下面的代码说明了这两种方法的用法:</p></blockquote><pre><code>UIImage *img = [UIImage imageNamed:@&quot;myImage&quot;];// caching// orUIImage *img = [UIImage imageWithContentsOfFile:@&quot;myImage&quot;];// no caching</code></pre><blockquote><p>那么我们应该如何选择呢？</p></blockquote><blockquote><p>如果你要加载一个大图片而且是一次性使用，那么就没必要缓存这个图片，用imageWithContentsOfFile足矣，这样不会浪费内存来缓存它。</p></blockquote><blockquote><p>然而，在图片反复重用的情况下imageNamed是一个好得多的选择。</p></blockquote><h2 id="避免日期格式转换"><a href="#避免日期格式转换" class="headerlink" title="避免日期格式转换"></a>避免日期格式转换</h2><blockquote><p>如果你要用NSDateFormatter来处理很多日期格式，应该小心以待。就像先前提到的，任何时候重用NSDateFormatters都是一个好的实践。</p></blockquote><blockquote><p>然而，如果你需要更多速度，那么直接用C是一个好的方案。Sam Soffes有一个不错的帖子(<a href="http://soff.es/how-to-drastically-improve-your-app-with-an-afternoon-and-instruments)里面有一些可以用来解析ISO-8601日期字符串的代码，简单重写一下就可以拿来用了。" target="_blank" rel="noopener">http://soff.es/how-to-drastically-improve-your-app-with-an-afternoon-and-instruments)里面有一些可以用来解析ISO-8601日期字符串的代码，简单重写一下就可以拿来用了。</a></p></blockquote><blockquote><p>嗯，直接用C来搞，看起来不错了，但是你相信吗，我们还有更好的方案！</p></blockquote><blockquote><p>如果你可以控制你所处理的日期格式，尽量选择Unix时间戳。你可以方便地从时间戳转换到NSDate:</p></blockquote><pre><code>- (NSDate*)dateFromUnixTimestamp:(NSTimeInterval)timestamp {    return[NSDate dateWithTimeIntervalSince1970:timestamp];}</code></pre><blockquote><p>这样会比用C来解析日期字符串还快！需要注意的是，许多web API会以微秒的形式返回时间戳，因为这种格式在javascript中更方便使用。记住用dateFromUnixTimestamp之前除以1000就好了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用ARC管理内存&quot;&gt;&lt;a href=&quot;#用ARC管理内存&quot; class=&quot;headerlink&quot; title=&quot;用ARC管理内存&quot;&gt;&lt;/a&gt;用ARC管理内存&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codeceo.com/article/optimize-ios-program-performance.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;转自 http://www.codeceo.com/article/optimize-ios-program-performance.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="00-技术-iOS" scheme="http://liangdahong.com/categories/00-%E6%8A%80%E6%9C%AF-iOS/"/>
    
    
      <category term="iOS" scheme="http://liangdahong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>转 - 面试中的 10 大排序算法总结</title>
    <link href="http://liangdahong.com/2018/05/22/03-%E6%8A%80%E6%9C%AF-%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%BD%AC-%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84-10-%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://liangdahong.com/2018/05/22/03-技术-计算机/转-面试中的-10-大排序算法总结/</id>
    <published>2018-05-22T15:42:55.000Z</published>
    <updated>2019-10-18T23:11:33.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://www.codeceo.com/article/10-sort-algorithm-interview.html#0-tsina-1-10490-397232819ff9a47a7b7e80a40613cfe1" target="_blank" rel="noopener">本文转载自码农网</a></li><li><a href="https://github.com/francistao/LearningNotes" target="_blank" rel="noopener">https://github.com/francistao/LearningNotes</a></li></ul><a id="more"></a><p></p><p>查找和排序算法是算法的入门知识，其经典思想可以用于很多算法当中。因为其实现代码较短，应用较常见。所以在面试中经常会问到排序算法及其相关的问题。但万变不离其宗，只要熟悉了思想，灵活运用也不是难事。一般在面试中最常考的是快速排序和归并排序，并且经常有面试官要求现场写出这两种排序的代码。对这两种排序的代码一定要信手拈来才行。还有插入排序、冒泡排序、堆排序、基数排序、桶排序等。面试官对于这些排序可能会要求比较各自的优劣、各种算法的思想及其使用场景。还有要会分析算法的时间和空间复杂度。通常查找和排序算法的考察是面试的开始，如果这些问题回答不好，估计面试官都没有继续面试下去的兴趣都没了。所以想开个好头就要把常见的排序算法思想及其特点要熟练掌握，有必要时要熟练写出代码。</p><p></p><p></p><p>接下来我们就分析一下常见的排序算法及其使用场景。限于篇幅，某些算法的详细演示和图示请自行寻找详细的参考。</p><p></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p></p><p>冒泡排序是最简单的排序之一了，其大体思想就是通过与相邻元素的比较和交换来把小的数交换到最前面。这个过程类似于水泡向上升一样，因此而得名。举个栗子，对5,3,8,6,4这个无序序列进行冒泡排序。首先从后向前冒泡，4和6比较，把4交换到前面，序列变成5,3,8,4,6。同理4和8交换，变成5,3,4,8,6,3和4无需交换。5和3交换，变成3,5,4,8,6,3.这样一次冒泡就完了，把最小的数3排到最前面了。对剩下的序列依次冒泡就会得到一个有序序列。冒泡排序的时间复杂度为O(n^2)。</p><p></p><p></p><p>实现代码：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;冒泡排序算法实现&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-3 下午8:54:27<br> */<br>public class BubbleSort {</pre></p><pre><code>public static void bubbleSort(int[] arr) {    if(arr == null || arr.length == 0)        return ;    for(int i=0; i&amp;lt;arr.length-1; i++) {        for(int j=arr.length-1; j&amp;gt;i; j--) {            if(arr[j] &amp;lt; arr[j-1]) {                swap(arr, j-1, j);            }        }    }}public static void swap(int[] arr, int i, int j) {    int temp = arr[i];    arr[i] = arr[j];    arr[j] = temp;}</code></pre><p>}<br></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p></p><p>选择排序的思想其实和冒泡排序有点类似，都是在一次排序后把最小的元素放到最前面。但是过程不同，冒泡排序是通过相邻的比较和交换。而选择排序是通过对整体的选择。举个栗子，对5,3,8,6,4这个无序序列进行简单选择排序，首先要选择5以外的最小数来和5交换，也就是选择3和5交换，一次排序后就变成了3,5,8,6,4.对剩下的序列一次进行选择和交换，最终就会得到一个有序序列。其实选择排序可以看成冒泡排序的优化，因为其目的相同，只是选择排序只有在确定了最小数的前提下才进行交换，大大减少了交换的次数。选择排序的时间复杂度为O(n^2)</p><p></p><p></p><p>实现代码：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;简单选择排序算法的实现&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-3 下午9:13:35<br> */<br>public class SelectSort {</pre></p><pre><code>public static void selectSort(int[] arr) {    if(arr == null || arr.length == 0)        return ;    int minIndex = 0;    for(int i=0; i&amp;lt;arr.length-1; i++) { //只需要比较n-1次        minIndex = i;        for(int j=i+1; j&amp;lt;arr.length; j++) { //从i+1开始比较，因为minIndex默认为i了，i就没必要比了。            if(arr[j] &amp;lt; arr[minIndex]) {                minIndex = j;            }        }        if(minIndex != i) { //如果minIndex不为i，说明找到了更小的值，交换之。            swap(arr, i, minIndex);        }    }}public static void swap(int[] arr, int i, int j) {    int temp = arr[i];    arr[i] = arr[j];    arr[j] = temp;}</code></pre><p>}<br></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p></p><p>插入排序不是通过交换位置而是通过比较找到合适的位置插入元素来达到排序的目的的。相信大家都有过打扑克牌的经历，特别是牌数较大的。在分牌时可能要整理自己的牌，牌多的时候怎么整理呢？就是拿到一张牌，找到一个合适的位置插入。这个原理其实和插入排序是一样的。举个栗子，对5,3,8,6,4这个无序序列进行简单插入排序，首先假设第一个数的位置时正确的，想一下在拿到第一张牌的时候，没必要整理。然后3要插到5前面，把5后移一位，变成3,5,8,6,4.想一下整理牌的时候应该也是这样吧。然后8不用动，6插在8前面，8后移一位，4插在5前面，从5开始都向后移一位。注意在插入一个数的时候要保证这个数前面的数已经有序。简单插入排序的时间复杂度也是O(n^2)。</p><p></p><p></p><p>实现代码：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;简单插入排序算法实现&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-3 下午9:38:55<br> */<br>public class InsertSort {</pre></p><pre><code>public static void insertSort(int[] arr) {    if(arr == null || arr.length == 0)        return ;    for(int i=1; i&amp;lt;arr.length; i++) { //假设第一个数位置时正确的；要往后移，必须要假设第一个。        int j = i;        int target = arr[i]; //待插入的        //后移        while(j &amp;gt; 0 &amp;amp;&amp;amp; target &amp;lt; arr[j-1]) {            arr[j] = arr[j-1];            j --;        }        //插入         arr[j] = target;    }}</code></pre><p>}<br></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p></p><p>快速排序一听名字就觉得很高端，在实际应用当中快速排序确实也是表现最好的排序算法。冒泡排序虽然高端，但其实其思想是来自冒泡排序，冒泡排序是通过相邻元素的比较和交换把最小的冒泡到最顶端，而快速排序是比较和交换小数和大数，这样一来不仅把小数冒泡到上面同时也把大数沉到下面。</p><p></p><p></p><p>举个栗子：对5,3,8,6,4这个无序序列进行快速排序，思路是右指针找比基准数小的，左指针找比基准数大的，交换之。</p><p></p><p></p><p>5,3,8,6,4 用5作为比较的基准，最终会把5小的移动到5的左边，比5大的移动到5的右边。</p><p></p><p></p><p>5,3,8,6,4 首先设置i,j两个指针分别指向两端，j指针先扫描（思考一下为什么？）4比5小停止。然后i扫描，8比5大停止。交换i,j位置。</p><p></p><p></p><p>5,3,4,6,8 然后j指针再扫描，这时j扫描4时两指针相遇。停止。然后交换4和基准数。</p><p></p><p></p><p>4,3,5,6,8 一次划分后达到了左边比5小，右边比5大的目的。之后对左右子序列递归排序，最终得到有序序列。</p><p></p><p></p><p>上面留下来了一个问题为什么一定要j指针先动呢？首先这也不是绝对的，这取决于基准数的位置，因为在最后两个指针相遇的时候，要交换基准数到相遇的位置。一般选取第一个数作为基准数，那么就是在左边，所以最后相遇的数要和基准数交换，那么相遇的数一定要比基准数小。所以j指针先移动才能先找到比基准数小的数。</p><p></p><p></p><p>快速排序是不稳定的，其时间平均时间复杂度是O(nlgn)。</p><p></p><p></p><p>实现代码：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;实现快速排序算法&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-3 下午5:07:29<br> */<br>public class QuickSort {<br>    //一次划分<br>    public static int partition(int[] arr, int left, int right) {<br>        int pivotKey = arr[left];<br>        int pivotPointer = left;</pre></p><pre><code>    while(left &amp;lt; right) {        while(left &amp;lt; right &amp;amp;&amp;amp; arr[right] &amp;gt;= pivotKey)            right --;        while(left &amp;lt; right &amp;amp;&amp;amp; arr[left] &amp;lt;= pivotKey)            left ++;        swap(arr, left, right); //把大的交换到右边，把小的交换到左边。    }    swap(arr, pivotPointer, left); //最后把pivot交换到中间    return left;}public static void quickSort(int[] arr, int left, int right) {    if(left &amp;gt;= right)        return ;    int pivotPos = partition(arr, left, right);    quickSort(arr, left, pivotPos-1);    quickSort(arr, pivotPos+1, right);}public static void sort(int[] arr) {    if(arr == null || arr.length == 0)        return ;    quickSort(arr, 0, arr.length-1);}public static void swap(int[] arr, int left, int right) {    int temp = arr[left];    arr[left] = arr[right];    arr[right] = temp;}</code></pre><p>}<br></p><p></p><p>其实上面的代码还可以再优化，上面代码中基准数已经在pivotKey中保存了，所以不需要每次交换都设置一个temp变量，在交换左右指针的时候只需要先后覆盖就可以了。这样既能减少空间的使用还能降低赋值运算的次数。优化代码如下：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;实现快速排序算法&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-3 下午5:07:29<br> */<br>public class QuickSort {</pre></p><pre><code>/** * 划分 * @param arr * @param left * @param right * @return */public static int partition(int[] arr, int left, int right) {    int pivotKey = arr[left];    while(left &amp;lt; right) {        while(left &amp;lt; right &amp;amp;&amp;amp; arr[right] &amp;gt;= pivotKey)            right --;        arr[left] = arr[right]; //把小的移动到左边        while(left &amp;lt; right &amp;amp;&amp;amp; arr[left] &amp;lt;= pivotKey)            left ++;        arr[right] = arr[left]; //把大的移动到右边    }    arr[left] = pivotKey; //最后把pivot赋值到中间    return left;}/** * 递归划分子序列 * @param arr * @param left * @param right */public static void quickSort(int[] arr, int left, int right) {    if(left &amp;gt;= right)        return ;    int pivotPos = partition(arr, left, right);    quickSort(arr, left, pivotPos-1);    quickSort(arr, pivotPos+1, right);}public static void sort(int[] arr) {    if(arr == null || arr.length == 0)        return ;    quickSort(arr, 0, arr.length-1);}</code></pre><p>}<br></p><p></p><p>总结快速排序的思想：冒泡+二分+递归分治，慢慢体会。。。</p><p></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p></p><p>堆排序是借助堆来实现的选择排序，思想同简单的选择排序，以下以大顶堆为例。注意：如果想升序排序就使用大顶堆，反之使用小顶堆。原因是堆顶元素需要交换到序列尾部。</p><p></p><p></p><p>首先，实现堆排序需要解决两个问题：</p><p></p><p></p><p>1. 如何由一个无序序列键成一个堆？</p><p></p><p></p><p>2. 如何在输出堆顶元素之后，调整剩余元素成为一个新的堆？</p><p></p><p></p><p>第一个问题，可以直接使用线性数组来表示一个堆，由初始的无序序列建成一个堆就需要自底向上从第一个非叶元素开始挨个调整成一个堆。</p><p></p><p></p><p>第二个问题，怎么调整成堆？首先是将堆顶元素和最后一个元素交换。然后比较当前堆顶元素的左右孩子节点，因为除了当前的堆顶元素，左右孩子堆均满足条件，这时需要选择当前堆顶元素与左右孩子节点的较大者（大顶堆）交换，直至叶子节点。我们称这个自堆顶自叶子的调整成为筛选。</p><p></p><p></p><p>从一个无序序列建堆的过程就是一个反复筛选的过程。若将此序列看成是一个完全二叉树，则最后一个非终端节点是n/2取底个元素，由此筛选即可。举个栗子：</p><p></p><p></p><p>49,38,65,97,76,13,27,49序列的堆排序建初始堆和调整的过程如下：</p><p></p><p></p><p><img src="http://static.codeceo.com/images/2016/03/2614bce119263edcf9d18b6365b39197.png" alt=""></p><p></p><p></p><p><img src="http://static.codeceo.com/images/2016/03/ad373a589182dd1b7e443915c8775fcd.png" alt=""></p><p></p><p></p><p>实现代码：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;堆排序算法的实现，以大顶堆为例。&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-4 上午9:26:02<br> */<br>public class HeapSort {</pre></p><pre><code>/** * 堆筛选，除了start之外，start~end均满足大顶堆的定义。 * 调整之后start~end称为一个大顶堆。 * @param arr 待调整数组 * @param start 起始指针 * @param end 结束指针 */public static void heapAdjust(int[] arr, int start, int end) {    int temp = arr[start];    for(int i=2*start+1; i&amp;lt;=end; i*=2) {        //左右孩子的节点分别为2*i+1,2*i+2        //选择出左右孩子较小的下标        if(i &amp;lt; end &amp;amp;&amp;amp; arr[i] &amp;lt; arr[i+1]) {            i ++;         }        if(temp &amp;gt;= arr[i]) {            break; //已经为大顶堆，=保持稳定性。        }        arr[start] = arr[i]; //将子节点上移        start = i; //下一轮筛选    }    arr[start] = temp; //插入正确的位置}public static void heapSort(int[] arr) {    if(arr == null || arr.length == 0)        return ;    //建立大顶堆    for(int i=arr.length/2; i&amp;gt;=0; i--) {        heapAdjust(arr, i, arr.length-1);    }    for(int i=arr.length-1; i&amp;gt;=0; i--) {        swap(arr, 0, i);        heapAdjust(arr, 0, i-1);    }}public static void swap(int[] arr, int i, int j) {    int temp = arr[i];    arr[i] = arr[j];    arr[j] = temp;}</code></pre><p>}<br></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p></p><p>希尔排序是插入排序的一种高效率的实现，也叫缩小增量排序。简单的插入排序中，如果待排序列是正序时，时间复杂度是O(n)，如果序列是基本有序的，使用直接插入排序效率就非常高。希尔排序就利用了这个特点。基本思想是：先将整个待排记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录基本有序时再对全体记录进行一次直接插入排序。</p><p></p><p></p><p>举个栗子：</p><p></p><p></p><p><img src="http://static.codeceo.com/images/2016/03/aef03b0d2339be34627bcd81a3809e62.png" alt=""></p><p></p><p></p><p>从上述排序过程可见，希尔排序的特点是，子序列的构成不是简单的逐段分割，而是将某个相隔某个增量的记录组成一个子序列。如上面的例子，第一堂排序时的增量为5，第二趟排序的增量为3。由于前两趟的插入排序中记录的关键字是和同一子序列中的前一个记录的关键字进行比较，因此关键字较小的记录就不是一步一步地向前挪动，而是跳跃式地往前移，从而使得进行最后一趟排序时，整个序列已经做到基本有序，只要作记录的少量比较和移动即可。因此希尔排序的效率要比直接插入排序高。</p><p></p><p></p><p>希尔排序的分析是复杂的，时间复杂度是所取增量的函数，这涉及一些数学上的难题。但是在大量实验的基础上推出当n在某个范围内时，时间复杂度可以达到O(n^1.3)。</p><p></p><p></p><p>实现代码：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;希尔排序算法实现&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-3 下午10:53:55<br> */<br>public class ShellSort {</pre></p><pre><code>/** * 希尔排序的一趟插入 * @param arr 待排数组 * @param d 增量 */public static void shellInsert(int[] arr, int d) {    for(int i=d; i&amp;lt;arr.length; i++) {        int j = i - d;        int temp = arr[i];    //记录要插入的数据          while (j&amp;gt;=0 &amp;amp;&amp;amp; arr[j]&amp;gt;temp) {  //从后向前，找到比其小的数的位置               arr[j+d] = arr[j];    //向后挪动              j -= d;          }          if (j != i - d)    //存在比其小的数             arr[j+d] = temp;    }}public static void shellSort(int[] arr) {    if(arr == null || arr.length == 0)        return ;    int d = arr.length / 2;    while(d &amp;gt;= 1) {        shellInsert(arr, d);        d /= 2;    }}</code></pre><p>}<br></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p></p><p>归并排序是另一种不同的排序方法，因为归并排序使用了递归分治的思想，所以理解起来比较容易。其基本思想是，先递归划分子问题，然后合并结果。把待排序列看成由两个有序的子序列，然后合并两个子序列，然后把子序列看成由两个有序序列。。。。。倒着来看，其实就是先两两合并，然后四四合并。。。最终形成有序序列。空间复杂度为O(n)，时间复杂度为O(nlogn)。</p><p></p><p></p><p>举个栗子：</p><p></p><p></p><p><img src="http://static.codeceo.com/images/2016/03/df8478362d9b42913e022eff94d43eb4.png" alt=""></p><p></p><p></p><p>实现代码：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;归并排序算法的实现&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-4 上午8:14:20<br> */<br>public class MergeSort {</pre></p><pre><code>public static void mergeSort(int[] arr) {    mSort(arr, 0, arr.length-1);}/** * 递归分治 * @param arr 待排数组 * @param left 左指针 * @param right 右指针 */public static void mSort(int[] arr, int left, int right) {    if(left &amp;gt;= right)        return ;    int mid = (left + right) / 2;    mSort(arr, left, mid); //递归排序左边    mSort(arr, mid+1, right); //递归排序右边    merge(arr, left, mid, right); //合并}/** * 合并两个有序数组 * @param arr 待合并数组 * @param left 左指针 * @param mid 中间指针 * @param right 右指针 */public static void merge(int[] arr, int left, int mid, int right) {    //[left, mid] [mid+1, right]    int[] temp = new int[right - left + 1]; //中间数组    int i = left;    int j = mid + 1;    int k = 0;    while(i &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;= right) {        if(arr[i] &amp;lt;= arr[j]) {            temp[k++] = arr[i++];        }        else {            temp[k++] = arr[j++];        }    }    while(i &amp;lt;= mid) {        temp[k++] = arr[i++];    }    while(j &amp;lt;= right) {        temp[k++] = arr[j++];    }    for(int p=0; p&amp;lt;temp.length; p++) {        arr[left + p] = temp[p];    }}</code></pre><p>}<br></p><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p></p><p>如果在面试中有面试官要求你写一个O(n)时间复杂度的排序算法，你千万不要立刻说：这不可能！虽然前面基于比较的排序的下限是O(nlogn)。但是确实也有线性时间复杂度的排序，只不过有前提条件，就是待排序的数要满足一定的范围的整数，而且计数排序需要比较多的辅助空间。其基本思想是，用待排序的数作为计数数组的下标，统计每个数字的个数。然后依次输出即可得到有序序列。</p><p></p><p></p><p>实现代码：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;计数排序算法实现&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-4 下午4:52:02<br> */<br>public class CountSort {</pre></p><pre><code>public static void countSort(int[] arr) {    if(arr == null || arr.length == 0)        return ;    int max = max(arr);    int[] count = new int[max+1];    Arrays.fill(count, 0);    for(int i=0; i&amp;lt;arr.length; i++) {        count[arr[i]] ++;    }    int k = 0;    for(int i=0; i&amp;lt;=max; i++) {        for(int j=0; j&amp;lt;count[i]; j++) {            arr[k++] = i;        }    }}public static int max(int[] arr) {    int max = Integer.MIN_VALUE;    for(int ele : arr) {        if(ele &amp;gt; max)            max = ele;    }    return max;}</code></pre><p>}<br></p><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p></p><p>桶排序算是计数排序的一种改进和推广，但是网上有许多资料把计数排序和桶排序混为一谈。其实桶排序要比计数排序复杂许多。</p><p></p><p></p><p>对桶排序的分析和解释借鉴这位兄弟的文章（有改动）：<a href="http://hxraid.iteye.com/blog/647759" target="_blank" rel="noopener">http://hxraid.iteye.com/blog/647759</a></p><p></p><p></p><p>桶排序的基本思想：</p><p></p><p></p><p>假设有一组长度为N的待排关键字序列K[1….n]。首先将这个序列划分成M个的子区间(桶) 。然后基于某种映射函数 ，将待排序列的关键字k映射到第i个桶中(即桶数组B的下标 i) ，那么该关键字k就作为B[i]中的元素(每个桶B[i]都是一组大小为N/M的序列)。接着对每个桶B[i]中的所有元素进行比较排序(可以使用快排)。然后依次枚举输出B[0]&#8230;.B[M]中的全部内容即是一个有序序列。bindex=f(key)   其中，bindex 为桶数组B的下标(即第bindex个桶), k为待排序列的关键字。桶排序之所以能够高效，其关键在于这个映射函数，它必须做到：如果关键字k1&lt;k2，那么f(k1)&lt;=f(k2)。也就是说B(i)中的最小数据都要大于B(i-1)中最大数据。很显然，映射函数的确定与数据本身的特点有很大的关系。</p><p></p><p></p><p>举个栗子：</p><p></p><p></p><p><img src="http://static.codeceo.com/images/2016/03/47bcf435950f64c848ce43d5ae5142aa.gif" alt=""></p><p></p><p></p><p>假如待排序列K= {49、 38 、 35、 97 、 76、 73 、 27、 49 }。这些数据全部在1—100之间。因此我们定制10个桶，然后确定映射函数f(k)=k/10。则第一个关键字49将定位到第4个桶中(49/10=4)。依次将所有关键字全部堆入桶中，并在每个非空的桶中进行快速排序后得到如图所示。只要顺序输出每个B[i]中的数据就可以得到有序序列了。</p><p></p><p></p><p>桶排序分析：</p><p></p><p></p><p>桶排序利用函数的映射关系，减少了几乎所有的比较工作。实际上，桶排序的f(k)值的计算，其作用就相当于快排中划分，希尔排序中的子序列，归并排序中的子问题，已经把大量数据分割成了基本有序的数据块(桶)。然后只需要对桶中的少量数据做先进的比较排序即可。</p><p></p><p></p><p>对N个关键字进行桶排序的时间复杂度分为两个部分：</p><p></p><p></p><p>(1) 循环计算每个关键字的桶映射函数，这个时间复杂度是O(N)。</p><p></p><p></p><p>(2) 利用先进的比较排序算法对每个桶内的所有数据进行排序，其时间复杂度为  ∑ O(Ni*logNi) 。其中Ni 为第i个桶的数据量。</p><p></p><p></p><p>很显然，第(2)部分是桶排序性能好坏的决定因素。尽量减少桶内数据的数量是提高效率的唯一办法(因为基于比较排序的最好平均时间复杂度只能达到O(N*logN)了)。因此，我们需要尽量做到下面两点：</p><p></p><p></p><p>(1) 映射函数f(k)能够将N个数据平均的分配到M个桶中，这样每个桶就有[N/M]个数据量。</p><p></p><p></p><p>(2) 尽量的增大桶的数量。极限情况下每个桶只能得到一个数据，这样就完全避开了桶内数据的“比较”排序操作。当然，做到这一点很不容易，数据量巨大的情况下，f(k)函数会使得桶集合的数量巨大，空间浪费严重。这就是一个时间代价和空间代价的权衡问题了。</p><p></p><p></p><p>对于N个待排数据，M个桶，平均每个桶[N/M]个数据的桶排序平均时间复杂度为：</p><p></p><p></p><p>O(N)+O(M<em>(N/M)</em>log(N/M))=O(N+N<em>(logN-logM))=O(N+N</em>logN-N*logM)</p><p></p><p></p><p>当N=M时，即极限情况下每个桶只有一个数据时。桶排序的最好效率能够达到O(N)。</p><p></p><p></p><p><strong>总结：</strong> 桶排序的平均时间复杂度为线性的O(N+C)，其中C=N*(logN-logM)。如果相对于同样的N，桶数量M越大，其效率越高，最好的时间复杂度达到O(N)。 当然桶排序的空间复杂度 为O(N+M)，如果输入数据非常庞大，而桶的数量也非常多，则空间代价无疑是昂贵的。此外，桶排序是稳定的。</p><p></p><p></p><p>实现代码：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;桶排序算法实现&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-4 下午7:39:31<br> */<br>public class BucketSort {</pre></p><pre><code>public static void bucketSort(int[] arr) {    if(arr == null &amp;amp;&amp;amp; arr.length == 0)        return ;    int bucketNums = 10; //这里默认为10，规定待排数[0,100)    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; buckets = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;(); //桶的索引    for(int i=0; i&amp;lt;10; i++) {        buckets.add(new LinkedList&amp;lt;Integer&amp;gt;()); //用链表比较合适    }    //划分桶    for(int i=0; i&amp;lt;arr.length; i++) {        buckets.get(f(arr[i])).add(arr[i]);    }    //对每个桶进行排序    for(int i=0; i&amp;lt;buckets.size(); i++) {        if(!buckets.get(i).isEmpty()) {            Collections.sort(buckets.get(i)); //对每个桶进行快排        }    }    //还原排好序的数组    int k = 0;    for(List&amp;lt;Integer&amp;gt; bucket : buckets) {        for(int ele : bucket) {            arr[k++] = ele;        }    }}/** * 映射函数 * @param x * @return */public static int f(int x) {    return x / 10;}</code></pre><p>}<br></p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p></p><p>基数排序又是一种和前面排序方式不同的排序方式，基数排序不需要进行记录关键字之间的比较。基数排序是一种借助多关键字排序思想对单逻辑关键字进行排序的方法。所谓的多关键字排序就是有多个优先级不同的关键字。比如说成绩的排序，如果两个人总分相同，则语文高的排在前面，语文成绩也相同则数学高的排在前面。。。如果对数字进行排序，那么个位、十位、百位就是不同优先级的关键字，如果要进行升序排序，那么个位、十位、百位优先级一次增加。基数排序是通过多次的收分配和收集来实现的，关键字优先级低的先进行分配和收集。</p><p></p><p></p><p>举个栗子：</p><p></p><p></p><p><img src="http://static.codeceo.com/images/2016/03/cb56ff40b1ade7e57d5aa9840fc1eba3.png" alt=""></p><p></p><p></p><p><img src="http://static.codeceo.com/images/2016/03/75d38cce23336e133dd8eac33eabf5ad.png" alt=""></p><p></p><p></p><p>实现代码：</p><p></p><p><div></div></p><p><pre>/*<em> </em>@Description:&lt;p&gt;基数排序算法实现&lt;/p&gt;<br> <em>@author 王旭 </em>@time 2016-3-4 下午8:29:52<br> */<br>public class RadixSort {</pre></p><pre><code>public static void radixSort(int[] arr) {    if(arr == null &amp;amp;&amp;amp; arr.length == 0)        return ;    int maxBit = getMaxBit(arr);    for(int i=1; i&amp;lt;=maxBit; i++) {        List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; buf = distribute(arr, i); //分配        collecte(arr, buf); //收集    }}/** * 分配 * @param arr 待分配数组 * @param iBit 要分配第几位 * @return */public static List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; distribute(int[] arr, int iBit) {    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; buf = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();    for(int j=0; j&amp;lt;10; j++) {        buf.add(new LinkedList&amp;lt;Integer&amp;gt;());    }    for(int i=0; i&amp;lt;arr.length; i++) {        buf.get(getNBit(arr[i], iBit)).add(arr[i]);    }    return buf;}/** * 收集 * @param arr 把分配的数据收集到arr中 * @param buf  */public static void collecte(int[] arr, List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; buf) {    int k = 0;    for(List&amp;lt;Integer&amp;gt; bucket : buf) {        for(int ele : bucket) {            arr[k++] = ele;        }    }}/** * 获取最大位数 * @param x * @return */public static int getMaxBit(int[] arr) {    int max = Integer.MIN_VALUE;    for(int ele : arr) {        int len = (ele+&quot;&quot;).length();        if(len &amp;gt; max)            max = len;    }    return max;}/** * 获取x的第n位，如果没有则为0. * @param x * @param n * @return */public static int getNBit(int x, int n) {    String sx = x + &quot;&quot;;    if(sx.length() &amp;lt; n)        return 0;    else        return sx.charAt(sx.length()-n) - &apos;0&apos;;}</code></pre><p>}<br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p></p><p>在前面的介绍和分析中我们提到了冒泡排序、选择排序、插入排序三种简单的排序及其变种快速排序、堆排序、希尔排序三种比较高效的排序。后面我们又分析了基于分治递归思想的归并排序还有计数排序、桶排序、基数排序三种线性排序。我们可以知道排序算法要么简单有效，要么是利用简单排序的特点加以改进，要么是以空间换取时间在特定情况下的高效排序。但是这些排序方法都不是固定不变的，需要结合具体的需求和场景来选择甚至组合使用。才能达到高效稳定的目的。没有最好的排序，只有最适合的排序。</p><p></p><p></p><p>下面就总结一下排序算法的各自的使用场景和适用场合。</p><p></p><p></p><p><img src="http://static.codeceo.com/images/2016/03/2f0f5c6b5c7b007b00f0d33427a70db0.png" alt=""></p><p></p><p></p><p>1. 从平均时间来看，快速排序是效率最高的，但快速排序在最坏情况下的时间性能不如堆排序和归并排序。而后者相比较的结果是，在n较大时归并排序使用时间较少，但使用辅助空间较多。</p><p></p><p></p><p>2. 上面说的简单排序包括除希尔排序之外的所有冒泡排序、插入排序、简单选择排序。其中直接插入排序最简单，但序列基本有序或者n较小时，直接插入排序是好的方法，因此常将它和其他的排序方法，如快速排序、归并排序等结合在一起使用。</p><p></p><p></p><p>3. 基数排序的时间复杂度也可以写成O(d*n)。因此它最使用于n值很大而关键字较小的的序列。若关键字也很大，而序列中大多数记录的最高关键字均不同，则亦可先按最高关键字不同，将序列分成若干小的子序列，而后进行直接插入排序。</p><p></p><p></p><p>4. 从方法的稳定性来比较，基数排序是稳定的内排方法，所有时间复杂度为O(n^2)的简单排序也是稳定的。但是快速排序、堆排序、希尔排序等时间性能较好的排序方法都是不稳定的。稳定性需要根据具体需求选择。</p><p></p><p></p><p>5. 上面的算法实现大多数是使用线性存储结构，像插入排序这种算法用链表实现更好，省去了移动元素的时间。具体的存储结构在具体的实现版本中也是不同的。</p><p></p><p></p><p>附：基于比较排序算法时间下限为O(nlogn)的证明：</p><p></p><p></p><p>基于比较排序下限的证明是通过决策树证明的，决策树的高度Ω（nlgn），这样就得出了比较排序的下限。</p><p></p><p></p><p><img src="http://static.codeceo.com/images/2016/03/b4d51a192d469b833a46695c0a7668f6.jpg" alt=""></p><p></p><p></p><p>首先要引入决策树。 首先决策树是一颗二叉树，每个节点表示元素之间一组可能的排序，它予以京进行的比较相一致，比较的结果是树的边。 先来说明一些二叉树的性质，令T是深度为d的二叉树，则T最多有2^片树叶。 具有L片树叶的二叉树的深度至少是logL。 所以，对n个元素排序的决策树必然有n!片树叶（因为n个数有n!种不同的大小关系），所以决策树的深度至少是log(n!)，即至少需要log(n!)次比较。 而 log(n!)=logn+log(n-1)+log(n-2)+&#8230;+log2+log1 &gt;=logn+log(n-1)+log(n-2)+&#8230;+log(n/2) &gt;=(n/2)log(n/2) &gt;=(n/2)logn-n/2 =O(nlogn) 所以只用到比较的排序算法最低时间复杂度是O(nlogn)。</p><p></p><p></p><p><strong>参考资料：</strong></p><p></p><p><ul></ul></p><p><li>《数据结构》 严蔚敏 吴伟民 编著</li></p><p><li>桶排序分析：<a href="http://hxraid.iteye.com/blog/647759" target="_blank" rel="noopener">http://hxraid.iteye.com/blog/647759</a></li></p><p><li>部分排序算法分析与介绍：<a href="http://www.cnblogs.com/weixliu/archive/2012/12/23/2829671.html" target="_blank" rel="noopener">http://www.cnblogs.com/weixliu/archive/2012/12/23/2829671.html</a></li><br></p><script type="text/javascript">var strBatchView = 37731</script><p><a id="soft-link" name="soft-link"></a></p><p><div style="width:336px;height:280px;margin:40px auto"></div></p><p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><br><!-- codeceo-bottom-big --><br><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-3171310320403916" data-ad-slot="5138981789"></ins></p><script></script>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codeceo.com/article/10-sort-algorithm-interview.html#0-tsina-1-10490-397232819ff9a47a7b7e80a40613cfe1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;本文转载自码农网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/francistao/LearningNotes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/francistao/LearningNotes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="03-技术-计算机" scheme="http://liangdahong.com/categories/03-%E6%8A%80%E6%9C%AF-%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="计算机" scheme="http://liangdahong.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Nots</title>
    <link href="http://liangdahong.com/2018/02/26/02-%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF/Nots/"/>
    <id>http://liangdahong.com/2018/02/26/02-技术-前端/Nots/</id>
    <published>2018-02-26T07:11:51.000Z</published>
    <updated>2019-11-06T16:27:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些名词"><a href="#一些名词" class="headerlink" title="一些名词"></a>一些名词</h2><a id="more"></a><blockquote><ul><li>HTTP 超文本传输协议（HyperText Transfer Protocol)</li><li>TCP 传输控制协议（Transmission Control Protocol) </li><li>IP 网际协议（Internet Protocol)</li><li>HTML 超文本标记语言（HyperText Markup Language)</li><li>CSS 层叠样式表(Cascading Style Sheets)</li><li>URI 统一资源标识符（Uniform Resource Identifier)</li><li>URL 统一资源定位符（Uniform Resource Locator)</li><li>URN 统一资源名称（Uniform Resource Name)</li></ul></blockquote><pre><code>应用层 HTTP     ↓  表示层     ↓  会话层     ↓传输层 TCP     ↓  网络层 IP     ↓ 数据链路层     ↓  物理层</code></pre><h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><ul><li><a href="http://www.w3school.com.cn/tags/index.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/tags/index.asp</a></li></ul><hr><ol><li>注释标签</li><li>br 标签 换行标签</li><li>hr 分割线标签</li><li>p  段落标签</li><li>h1…h6 标题标签，一个界面最多一个h1标签，搜索引擎搜索问题</li><li>font 文本标签</li><li>html 标签，root标签，</li><li>body 主体标签，给用户看的内容在这里面，浏览器也需看</li><li>head head标签，只要是给浏览器看的内容</li><li>title 标签标签，网站名称</li><li>strong （文本标签 font 的加粗样式，也可以使用 b ，b只是简单的加粗，但strong有更好的着重意义，推荐使用 strong）</li><li>em （文本标签 font 的斜体样式，也可以使用 i ，i只是简单的斜体，但em有更好的着重意义，推荐使用 em）</li><li>del (删除线标签 也可以使用 s 推荐使用 del)</li><li>ins （下划线标签  也可以使用 u  推荐使用 ins ）</li><li>a （超链接 title 提示文字）</li><li>img （图片标签，可以设置加载失败的占位文字 提醒文字等 height width等，路径使用..表示到上一个文件夹）</li><li>锚点id 在标签中添加锚点，可以在超链接中设置点击超链接到指定的锚点</li><li>特殊符号 和OC中的转义字符一样，需要特殊处理，需注意下</li><li>列表 ul li 表示无序列表，type可以设置前面的图标类型</li><li>列表 ol li 有序列表，可以使用type设置编号类型 start表示从xx开始</li><li>列表 dl 自定义列表 dt标题 dd标签介绍</li><li>embed 音乐标签</li><li>marquee 滚动标签 文字（图片等）跑马灯自动滚动</li><li>abbr 简写标签，在移动到此内容时，自动显示详细内容。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;&lt;/head&gt; 浏览器看的</span><br><span class="line"></span><br><span class="line">&lt;body&gt;&lt;/body&gt; 主体 用户看的内容</span><br><span class="line"></span><br><span class="line">&lt;title&gt;&lt;/title&gt;  网站标题</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;/p&gt;  段落</span><br><span class="line"></span><br><span class="line">&lt;strong&gt;&lt;/strong&gt; 强调加粗黑体,在阅读时会强调着用，b 只是简单的加粗黑体</span><br><span class="line"></span><br><span class="line">&lt;em&gt;&lt;/em&gt;  着重 i也可以，建议使用 em</span><br><span class="line"></span><br><span class="line">&lt;abbr&gt;&lt;/abbr&gt; 简写</span><br><span class="line"></span><br><span class="line">&lt;!----&gt;  注释</span><br><span class="line"></span><br><span class="line">&lt;ins&gt;&lt;/ins&gt;  下划线  u也可以 </span><br><span class="line"></span><br><span class="line">&lt;del&gt;&lt;/del&gt;  删除  s也可以</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;&lt;/h1&gt;  标题</span><br><span class="line">&lt;h6&gt;&lt;/h6&gt; 标题</span><br><span class="line"></span><br><span class="line">&lt;br&gt;换行</span><br><span class="line"></span><br><span class="line">&lt;hr&gt; 分割线</span><br><span class="line"></span><br><span class="line">&lt;address&gt;&lt;/address&gt; 作者信息</span><br><span class="line"></span><br><span class="line">&lt;font size=&quot;30&quot; color=&quot;red&quot;&gt;font &lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;img scr=&quot;sss.png&quot; width=&quot;100&quot; height=&quot;200&quot; alt=&quot;林志玲的图片&quot; title=&quot;我是图片&quot;&gt;</span><br><span class="line">alt 加载失败时是提示文字 加强体验</span><br><span class="line">title 提醒文本 鼠标移动到图片上时</span><br><span class="line">height width 按照比例变化</span><br><span class="line">路径问题  ../ 到上一家目录  目前在当前html文件的目录 开始寻找图片。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;www.xxx.com&quot; title=&quot;提醒文本&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;a target=&quot;_parent&quot;&gt;&lt;/a&gt; </span><br><span class="line">&lt;a target=&quot;_blank&quot;&gt;&lt;/a&gt; 打开新的界面 当前界面不会关闭</span><br><span class="line">&lt;a target=&quot;_self&quot;&gt;&lt;/a&gt; 在当前界面打开，会覆盖调 默认</span><br><span class="line">   &lt;a target=&quot;_top&quot;&gt;&lt;/a&gt;</span><br><span class="line">   在不知道具体到xxx界面时 href=&quot;#&quot; 不需跳转 在当前界面就可以了，以后再补充具体怎么跳转。</span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">   锚点，可以让滚动到界面的指定位置</span><br><span class="line">   定义锚点</span><br><span class="line">   &lt;p id=&quot;top&quot;&gt;&lt;/p&gt;</span><br><span class="line">   超链接点击就到锚点</span><br><span class="line">   &lt;a href=&quot;#top&quot;&gt; 去顶部啊啊啊啊 &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">特殊符号(转移字符需特殊处理下才可以 可以自行查看和补充)</span><br><span class="line">空格 &amp;nbsp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">列表</span><br><span class="line">无序列表（没有重要区分）</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;001&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;002&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;003&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;004&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;005&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;  </span><br><span class="line">type 表示前面的符号类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">有序列表（有重要区分 12345）</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;001&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;002&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;003&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;004&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;005&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">type 1 A i .....</span><br><span class="line">start 从xxx开始</span><br><span class="line"></span><br><span class="line">自定义列表</span><br><span class="line"></span><br><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;dt 小标题&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;dd 解释标题&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line"></span><br><span class="line">音乐标签</span><br><span class="line">&lt;embed src=&quot;1.mp3&quot; hiden=&quot;true&quot;&gt;&lt;/embed&gt;</span><br><span class="line"></span><br><span class="line">滚动标签 （可查看其他属性）</span><br><span class="line">marquee</span><br></pre></td></tr></table></figure><h2 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h2><ul><li>div p h1-h6 ul li </li><li>不设置宽度时默认和父标签的宽度一样，而且会独立站一行。</li><li>块转行 display：inLine</li><li>块转行内块 display：inline-block</li></ul><h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><ul><li>span a strong em del ins </li><li>连续布局，可以一行存放n个标签，自动布局。不可以自定义size，</li><li>行转块 display：block</li><li>行转行内块 display：inline-block</li></ul><h2 id="行内块标签"><a href="#行内块标签" class="headerlink" title="行内块标签"></a>行内块标签</h2><ul><li>img input</li><li>连续布局，可以一行存放n个标签，可以自定义size，</li></ul><h2 id="标签css的继承性"><a href="#标签css的继承性" class="headerlink" title="标签css的继承性"></a>标签css的继承性</h2><ul><li>必须是嵌套关系</li><li>文字颜色 文字大小 文字粗细  整体样式 字体风格 行高 文字属性都可以继承</li><li>h1 可以继承文字大小，但会自动乘一个系数，所以看为不可以继承</li><li>a 链接 不可继承颜色color </li></ul><h2 id="css样式优先级"><a href="#css样式优先级" class="headerlink" title="css样式优先级"></a>css样式优先级</h2><ul><li>默认 &lt; 标签样式 &lt; class &lt; id样式 &lt; 行内样式表  可以使用 !important 强制设置为重要</li><li>继承的的优先级最低</li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><p>HTML 结构</p></li><li><p>CSS 内嵌写法 / 外链写法</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">...  </span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;1.css&quot;&gt;</span><br></pre></td></tr></table></figure><!--more--><ul><li>JavaScript 内嵌写法 / 外链写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script src=&quot;1.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>JavaScript 的几种调试方式</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;ssssss&apos;); // alert 确定按钮</span><br><span class="line">confirm(&apos;s&apos;); // alert + 确定 和 取消按钮</span><br><span class="line">console.log(&apos;2&apos;);  // 控制台输出</span><br><span class="line">prompt(&apos;sss&apos;);    // 弹出一个用户输入框 搜集消息</span><br><span class="line">document.write(&apos;ssss&apos;) ; // 在页面输入内容</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一些名词&quot;&gt;&lt;a href=&quot;#一些名词&quot; class=&quot;headerlink&quot; title=&quot;一些名词&quot;&gt;&lt;/a&gt;一些名词&lt;/h2&gt;
    
    </summary>
    
      <category term="02-技术-前端" scheme="http://liangdahong.com/categories/02-%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://liangdahong.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>iOS第三方库背后的原理和简单使用</title>
    <link href="http://liangdahong.com/2017/11/27/00-%E6%8A%80%E6%9C%AF-iOS/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E8%83%8C%E5%90%8E%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://liangdahong.com/2017/11/27/00-技术-iOS/iOS第三方库背后的原理和简单使用/</id>
    <published>2017-11-27T13:48:03.000Z</published>
    <updated>2019-10-18T23:11:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.pixabay.com/photo/2018/01/16/23/37/sunset-3087145__340.jpg" alt="https://cdn.pixabay.com/photo/2018/01/16/23/37/sunset-3087145__340.jpg"></p><blockquote><p>在我们平时的开发中，或多或少都会使用到一些开源库，在小公司甚至大量依赖第三方，那么我们对一些知名第三方是否有必要了解下它背后的原理呢，甚至应该阅读一些知名第三方的底层实现和原理，下面就简单介绍一些第三方的实现原理和简单的使用方法吧。</p></blockquote><a id="more"></a><h1 id="MJExtension"><a href="#MJExtension" class="headerlink" title="MJExtension"></a>MJExtension</h1><blockquote><p><a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="noopener">MJExtension</a></p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="json-gt-Model"><a href="#json-gt-Model" class="headerlink" title="json -&gt; Model"></a>json -&gt; Model</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json -&gt; Model </span></span><br><span class="line">+ (instancetype)mj_objectWithKeyValues:(id)keyValues;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json -&gt; Model 数组</span></span><br><span class="line">+ (NSMutableArray *)mj_objectArrayWithKeyValuesArray:(NSArray *)keyValuesArray;</span><br></pre></td></tr></table></figure><h3 id="Model-gt-json"><a href="#Model-gt-json" class="headerlink" title="Model -&gt; json"></a>Model -&gt; json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  转换为JSON Data</span><br><span class="line"> */</span><br><span class="line">- (NSData *)mj_JSONData;</span><br><span class="line">/**</span><br><span class="line"> *  转换为字典或者数组</span><br><span class="line"> */</span><br><span class="line">- (id)mj_JSONObject;</span><br><span class="line">/**</span><br><span class="line"> *  转换为JSON 字符串</span><br><span class="line"> */</span><br><span class="line">- (NSString *)mj_JSONString;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*数组中需要转换的模型*/</span></span><br><span class="line">+ (NSDictionary *)mj_objectClassInArray&#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;</span><br><span class="line">             @<span class="string">"array1"</span>: BMImageInfoModel.class,</span><br><span class="line">             &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*key 重命名 属性名为key : json 中的key为 value  */</span></span><br><span class="line">+ (NSDictionary *)mj_replacedKeyFromPropertyName &#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;</span><br><span class="line">             @<span class="string">"desc"</span>: @<span class="string">"description"</span>,</span><br><span class="line">             @<span class="string">"ID"</span>: @<span class="string">"id"</span>,</span><br><span class="line">             &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*json -&gt; Model 完成时*/</span></span><br><span class="line">- (<span class="keyword">void</span>)mj_keyValuesDidFinishConvertingToObject &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Model -&gt; json 完成时*/</span></span><br><span class="line">- (<span class="keyword">void</span>)mj_objectDidFinishConvertingToKeyValues &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li><p>我们知道 json-&gt;Model时，其实就是在dict中取对应的值然后设置到Model中，  <code>obj.name = dict[@&quot;name&quot;];</code>   我们知道Model中的属性一般是非常多的，而且一个项目中Model也是非常多，而且Model中的属性随时可能变动，像上面的赋值代码就会成千上万，而且非常不好维护，那么我们有没有快捷的方法解决好这些问题呢？<a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="noopener">MJExtension</a>就是为我们解决了这些问题的一个库而且可以扩展许多功能。不管你有多少属性只需要<code>mj_objectWithKeyValues</code>这样一行代码完美搞定。</p></li><li><p>在上面的分析中我们肯定要想办法动态的获取Model中的属性，同时去dict中取相应的值设置给Model相应的属性，其实<a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="noopener">MJExtension</a>的核心功能就是解决这个问题，<a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="noopener">MJExtension</a>使用Runtime动态地的获取模型的属性，然后动态的在dict中取相应的值设置给Model，当然其中做了特别多的优化和扩展。</p></li><li><p>动态获取模型的属性</p></li></ol><blockquote><p>NSObject+MJKeyValue.m 文件 87 行的如下代码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[clazz mj_enumerateProperties:^(MJProperty *property, BOOL *stop)...</span><br></pre></td></tr></table></figure><ol><li>使用KVC赋值</li></ol><blockquote><p>NSObject+MJKeyValue.m 文件 189 行的如下代码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.赋值</span></span><br><span class="line">[property setValue:value forObject:self];</span><br></pre></td></tr></table></figure><p>此方法内部如下（NSObject+MJKeyValue.m 文件78行）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  设置成员变量的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(id)value forObject:(id)object</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.type.KVCDisabled || value == nil) <span class="keyword">return</span>;</span><br><span class="line">    [object setValue:value forKey:self.name];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基本功能的代码基本就是上面的代码段，当然有大量的优化和扩展防错等功能未展开。</p></blockquote><ol><li>支持模型的继承属性，比如：Model的父类有一个name属性，那么在转换时会支持name属性的获取</li><li>对一些特殊类型做了特殊处理，比如：BOOL类型等</li><li>支持模型嵌套模型转换</li><li>支持模型嵌套数组转换，如果数组中的对象是模型需实现相应协议</li><li>支持指定属性名称支持转换和指定属性名称不支持转换</li><li>只对属性有效</li><li>支持readonly属性</li><li>对Model的属性做了缓存大幅度增加性能</li><li>添加一些扩展方法，Model-&gt;jsonData, Model-&gt;json, Model-&gt;dict</li><li>json(NSData dict，NSString)-&gt;模型 </li><li>json(NSData arr，NSString)-&gt;模型数组 </li><li>获取到模型的属性列表时做缓存</li><li>内部使用KVC赋值</li></ol><h1 id="YYModel"><a href="#YYModel" class="headerlink" title="YYModel"></a>YYModel</h1><h1 id="YYCache"><a href="#YYCache" class="headerlink" title="YYCache"></a>YYCache</h1><h1 id="UITableView-FDTemplateLayoutCell"><a href="#UITableView-FDTemplateLayoutCell" class="headerlink" title="UITableView-FDTemplateLayoutCell"></a>UITableView-FDTemplateLayoutCell</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.pixabay.com/photo/2018/01/16/23/37/sunset-3087145__340.jpg&quot; alt=&quot;https://cdn.pixabay.com/photo/2018/01/16/23/37/sunset-3087145__340.jpg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在我们平时的开发中，或多或少都会使用到一些开源库，在小公司甚至大量依赖第三方，那么我们对一些知名第三方是否有必要了解下它背后的原理呢，甚至应该阅读一些知名第三方的底层实现和原理，下面就简单介绍一些第三方的实现原理和简单的使用方法吧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="00-技术-iOS" scheme="http://liangdahong.com/categories/00-%E6%8A%80%E6%9C%AF-iOS/"/>
    
    
      <category term="iOS" scheme="http://liangdahong.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS面试题笔记</title>
    <link href="http://liangdahong.com/2017/11/19/iOS%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>http://liangdahong.com/2017/11/19/iOS面试题笔记/</id>
    <published>2017-11-19T01:44:37.000Z</published>
    <updated>2019-12-05T07:59:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写一个标准宏-MIN-MAX"><a href="#写一个标准宏-MIN-MAX" class="headerlink" title="写一个标准宏 MIN/MAX"></a>写一个标准宏 MIN/MAX</h1><a id="more"></a><blockquote><p>利用 <code>__typeof__</code> 重新声明 2 个相同类型的变量，在把相关的值赋值给新的变量，在进行比较，这样可以排除其他的各种优先级问题。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define kMIN(a,b) (&#123;__typeof__(a) __a__COUNTER__ = (a);__typeof__(b) __b__COUNTER__ = (b);(__a__COUNTER__) &lt; (__b__COUNTER__) ? (__a__COUNTER__) : (__b__COUNTER__);&#125;)</span><br><span class="line">#define kMAX(a,b) (&#123;__typeof__(a) __a__COUNTER__ = (a);__typeof__(b) __b__COUNTER__ = (b);(__a__COUNTER__) &gt; (__b__COUNTER__) ? (__a__COUNTER__) : (__b__COUNTER__);&#125;)</span><br></pre></td></tr></table></figure><h1 id="圆角卡顿问题"><a href="#圆角卡顿问题" class="headerlink" title="圆角卡顿问题"></a>圆角卡顿问题</h1><blockquote><p> 卡顿的原因？</p><p> 屏幕显示图像的原理是从上到下一行行继续扫描【当扫描完一行时发出一个HSyncx信号，扫描完整个屏幕时发出一个VSyncx信号】</p><p> 当收到VSyncx信号时 CPU需把相关需要显示的内容交给GPU来渲染，渲染好了交到帧缓冲区准备显示，在下一帧显示的时候直接到帧缓冲区取出显示即可以，</p><p> 理想状态的这样的，但是如果CPU或者GPU任务繁重，在需要显示的时候还没有准备好，就无法显示，会导致本来应该显示新的内容还会停留在上一帧，</p><p> 可能造成跳帧的情况，卡顿就产生了，使用卡顿的本质就是 CPU 和 GPU任务未完成导致的。</p><p> 圆角为什么可能导致卡顿呢？</p><p> 正如【 卡顿的原因？】所诉，为了尽量不卡顿，所以推出多个帧缓冲区的概念，正所谓鱼和熊掌不可兼得，多个帧缓冲区虽然可以解决一些卡顿问题，</p><p> 但帧缓冲区之间切换又是一个特别耗性能的问题，在设置圆角时【主要是 masksToBounds masksToBounds】就是在其他的帧缓冲区处理的【称：离屏渲染】</p><p> 如果一个屏幕上太多圆角时就会导致频繁的帧缓冲区切换，消耗太多的 GPU性能，导致在收到VSyncx信号到显示 GPU没有处理完成，导致卡顿的产生。</p><p> 那么怎么解决呢？</p><p> 正如【圆角为什么可能导致卡顿呢？】中所诉，GPU太忙了，但此时CPU可能比较闲，那么我们是否可以想办法把一些任务分配给CPU来处理呢，</p><p> 通常的处理方案就是如此：</p><p> 预先用CPU，构建圆角路径贝塞尔曲线UIBezierPath，用原来的图片填充进圆角路径，获得天然的自带圆角透明的bitmap数据UIImage，从而直接交给GPU进行普通渲染【不使用 masksToBounds masksToBounds】。</p><p> 代码如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@implementation UIImage (BMKit)</span><br><span class="line">- (instancetype)_imageAddCornerWithRadius:(CGFloat)radius size:(CGSize)size &#123;</span><br><span class="line">    //0、获取 size</span><br><span class="line">    CGRect rect = CGRectMake(0, 0, size.width, size.height);</span><br><span class="line">    //1、开启图形上下文</span><br><span class="line">    UIGraphicsBeginImageContextWithOptions(size, NO, [UIScreen mainScreen].scale);</span><br><span class="line">    //2、获取当前的图形上下文</span><br><span class="line">    CGContextRef ctx = UIGraphicsGetCurrentContext();</span><br><span class="line">    //3、创建路径 path</span><br><span class="line">    UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerAllCorners cornerRadii:CGSizeMake(radius, radius)];</span><br><span class="line">    //4、把路径添加上下文</span><br><span class="line">    CGContextAddPath(ctx,path.CGPath);</span><br><span class="line">    //5、剪切</span><br><span class="line">    CGContextClip(ctx);</span><br><span class="line">    //6、绘制图片</span><br><span class="line">    [self drawInRect:rect];</span><br><span class="line">    //7、设置填充的样式</span><br><span class="line">    CGContextDrawPath(ctx, kCGPathFillStroke);</span><br><span class="line">    //8、取得图片</span><br><span class="line">    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">    //9、关闭图形上下文</span><br><span class="line">    UIGraphicsEndImageContext();</span><br><span class="line">    return newImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 是不是全部用CPU来处理就彻底解决了圆角问题呢？</p><p> 当然不是的，如果我们全部都给CPU来处理，CPU的任务重了同样可能造成卡顿问题，通常情况下：</p><p> 1、小量圆角直接使用 masksToBounds masksToBounds 即可，因为如果使用CPU来处理可能反而适得其反。</p><p> 2、较多圆角时使用CPU来处理可以很好的处理卡顿问题，同时可以集合一些缓存策略。</p><p> 3、如果实在无法解决时可以使用异步渲染的方式来处理参考：AsyncDisplayKit</p><p><a href="https://github.com/liangdahong/iOS-Interview-Notes/tree/master/002-CornerRadius-Demo0" target="_blank" rel="noopener">demo - https://github.com/liangdahong/iOS-Interview-Notes/tree/master/002-CornerRadius-Demo0</a></p></blockquote><h1 id="003-响应链"><a href="#003-响应链" class="headerlink" title="003-响应链"></a>003-响应链</h1><blockquote><p>触摸事件的传递和响应过程</p></blockquote><blockquote><p>在触摸事件的处理过程中会有 事件传递 和 事件响应过程，首先当用户触摸屏幕时，会从上向下</p></blockquote><blockquote><p><code>(UIApplication-&gt;keyWindow-&gt;vc-&gt;View-&gt;View1... 会判断范围是否包含，是否开启了响应，是否设置了透明度等)</code></p><p>找到最合适的对象，当找到最合适的View时会由下向上</p></blockquote><blockquote><p><code>(...View1-&gt;keyWindow-&gt; View-&gt; vc-&gt; keyWindow-&gt; UIApplication 会判断是否加了相关处理的方法)</code></p></blockquote><blockquote><p>找最合适响应的对象。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://blog.flight.dev.qunar.com/2016/10/28/ios-event-mechanism-summary/" target="_blank" rel="noopener">http://blog.flight.dev.qunar.com/2016/10/28/ios-event-mechanism-summary/</a></li><li><a href="http://www.jianshu.com/p/2e074db792ba" target="_blank" rel="noopener">http://www.jianshu.com/p/2e074db792ba</a></li></ol><h1 id="Runloop"><a href="#Runloop" class="headerlink" title="Runloop"></a>Runloop</h1><blockquote><p>Runloop</p><p>就是为了应用在有事做的时候干活，没事做时休眠，具体是使用 内核函数 mach_msg Mach_port来实现线程的休眠，和激活。</p><p> runloop默认是没有创建的，只可以获取，懒加载的形式，runloop 和 线程是一个哈希关系，线程是 k，runloop 是 v，子线程中只可以获取当前线程的runloop或者max runloop。</p><p>Runloop里分 mode 模式，每一个模式里面有 soure0 soure1 timer obje 来处理。<br>循环处理相应模式下的任务，在切换模式的时候被切换的模式下的任务就会暂停，比如：定时器默认情况下载 scrollView 跟踪的时候就暂停了。</p><p>1、定时器在 scrollView 跟踪也处理可以使用 把定时器加到相应的模式下，或者直接标记为 COMM ，COMM不是一个具体的模式，只是把相应的 item 加到 COMM 中。又因为 【默认模式】和 【跟踪模式】都是 COMM 所以一举两得。<br>2、线程保活，需要处理 runloop，同时需要指定模式run起来，还需要 while 和 flag 来处理是否关闭处理，【注意使用 run 开启 runloop 是无法关闭的】<br>3、唤醒，是系统内核唤醒的；休眠，是系统内核让线程休眠的R</p></blockquote><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><blockquote><p>arc : 其实是编译器特性，编译器在编译的时候主动加上了内存管理的代码。<br>mrc: 在 arc 之前是程序员手动管理内存。<br>oc 的内存回收机制使用了引用计数来处理的，当引用计数=0 的时候就释放掉对象，引用计数是在 对象的 isa 中存起来的，具体释放是在 release 的时候判断 引用计数是不是为0了，如果是就释放。</p><p>内存布局情况：</p><p>保留【系统使用】</p><p>代码段</p><p>数据段【。。。】</p><p>s</p><p>s</p><p>s</p><p>s</p><p>s</p><p>s</p></blockquote><blockquote><p>  autorelease 和 自动释放池。<br>  自动释放池，其实底层用到了【 c++结构体 4096  ，stack，双向链表】来实现的，在使用 &gt;autoreleasepool 的时候底层会在 autoreleasepool 开始的时候 做push 操作，【push操作其实就&gt;是在加入一个标记，然后每调 autolease 方法就会把此对象的地址加到 C++结构体的指定位置上，在 autoreleasepool 结束的时候 调用 pop 方法，底层其实就是 从这个位置向后处理刚才加到 c++结构体指定位置的对象执行 release 操作，当到 标记的地方就结束，这里就用到了stack，同时如果如果autolease的对象比较多的时候，这里会把  c++结构体 穿起来做成 双向链表，【在push的时候如果已经满了就去链表的下一个对象存储，在 pop 操作的时候如果一直没有找到标记就向上一个中去继续查，直到找到标记为止】】</p><p>  同时 runloop 循环中也牵涉到 autoreleasepool<br>     1、在进入 runloop 的时候 push 操作，<br>     …工作…<br>     2、在休眠之前执行执行 pop 然后执行 push<br>     =====休息时间=====<br>     3、唤醒<br>      …工作..<br>     -&gt;2 或者 5<br>     5、退出 pop<br>     所以如果所以 autoreleasepool 方法中的 使用autorelease的临时变量不一定在离开方法就释放。</p></blockquote><h1 id="001"><a href="#001" class="headerlink" title="001"></a>001</h1><ul><li>dyld 装载app的可执行文件，同时加载依赖的动态库，然后通知 runtime 来处理。</li><li></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 中间代码</span><br><span class="line">// cd 到指定的m文件  clang -emit-llvm -S xxx.m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// C++ 代码</span><br><span class="line">// cd 到指定的m文件</span><br><span class="line">// xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc xxx.m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 看汇编代码</span><br><span class="line">// 断点看汇编代码： -&gt; Debug -&gt; Work flow -&gt; Always Show Disassembly</span><br><span class="line">// 直接看汇编代码：  选中m文件 -&gt; Prudect -&gt; Perform Action -&gt; Assembly</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(lldb) p/x per-&gt;isa</span><br><span class="line">(Class) $13 = 0x001d800100003631 BMPerson</span><br><span class="line">(lldb) p/x clas</span><br><span class="line">(Class) $14 = 0x0000000100003630 BMPerson</span><br><span class="line">  </span><br><span class="line"> （（  per-&gt;isa）&amp;  0x00007ffffffffff8ULL）  =   0x0000000100003630</span><br><span class="line">   （（  0x001d800100003631）&amp;  0x00007ffffffffff8ULL）  =   0x0000000100003630</span><br><span class="line">  </span><br><span class="line">#   define ISA_MASK        0x00007ffffffffff8ULL</span><br></pre></td></tr></table></figure><h2 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写一个标准宏-MIN-MAX&quot;&gt;&lt;a href=&quot;#写一个标准宏-MIN-MAX&quot; class=&quot;headerlink&quot; title=&quot;写一个标准宏 MIN/MAX&quot;&gt;&lt;/a&gt;写一个标准宏 MIN/MAX&lt;/h1&gt;
    
    </summary>
    
      <category term="00-技术-iOS" scheme="http://liangdahong.com/categories/00-%E6%8A%80%E6%9C%AF-iOS/"/>
    
    
      <category term="面试" scheme="http://liangdahong.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
